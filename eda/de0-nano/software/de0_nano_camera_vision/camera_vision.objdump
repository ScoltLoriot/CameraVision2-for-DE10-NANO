
camera_vision.elf:     file format elf32-littlenios2
camera_vision.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02020020

Program Header:
    LOAD off    0x00001000 vaddr 0x02020000 paddr 0x02020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02020020 paddr 0x02020020 align 2**12
         filesz 0x00005340 memsz 0x00005340 flags r-x
    LOAD off    0x00006360 vaddr 0x02025360 paddr 0x02025d90 align 2**12
         filesz 0x00000a30 memsz 0x00000a30 flags rw-
    LOAD off    0x000077c0 vaddr 0x020267c0 paddr 0x020267c0 align 2**12
         filesz 0x00000000 memsz 0x00000044 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02020000  02020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  02020020  02020020  00006d90  2**0
                  CONTENTS
  2 .text         00004c28  02020020  02020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000718  02024c48  02024c48  00005c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a30  02025360  02025d90  00006360  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000044  020267c0  020267c0  000077c0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00000000  00000000  00006d90  2**0
                  CONTENTS
  7 .memory_system 00000000  02026804  02026804  00006d90  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00006d90  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000598  00000000  00000000  00006db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00011ccf  00000000  00000000  00007350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004183  00000000  00000000  0001901f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004d12  00000000  00000000  0001d1a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000f10  00000000  00000000  00021eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001a55  00000000  00000000  00022dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004e45  00000000  00000000  00024819  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00029660  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000540  00000000  00000000  000296a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0002c0da  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000a  00000000  00000000  0002c0dd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0002c0e7  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0002c0e8  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0002c0e9  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0002c0ed  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0002c0f1  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0002c0f5  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0002c0fe  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0002c107  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000004  00000000  00000000  0002c110  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000022  00000000  00000000  0002c114  2**0
                  CONTENTS, READONLY
 30 .jdi          000048ad  00000000  00000000  0002c136  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0008a675  00000000  00000000  000309e3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02020000 l    d  .entry	00000000 .entry
02020020 l    d  .exceptions	00000000 .exceptions
02020020 l    d  .text	00000000 .text
02024c48 l    d  .rodata	00000000 .rodata
02025360 l    d  .rwdata	00000000 .rwdata
020267c0 l    d  .bss	00000000 .bss
00000000 l    d  .sdram	00000000 .sdram
02026804 l    d  .memory_system	00000000 .memory_system
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../de0_nano_camera_vision_bsp/obj/HAL/src/crt0.o
02020058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 I2C_core.c
00000000 l    df *ABS*	00000000 bit_helper.c
00000000 l    df *ABS*	00000000 camera_vision.c
00000000 l    df *ABS*	00000000 ft232h.c
00000000 l    df *ABS*	00000000 mipi_bridge_config.c
00000000 l    df *ABS*	00000000 mipi_camera_config.c
00000000 l    df *ABS*	00000000 stdio_ext.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
02025360 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
02021bf8 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
02025534 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02022d98 l     F .text	00000008 __fp_unlock
02022dac l     F .text	0000019c __sinit.part.1
02022f48 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 refill.c
020241f4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
02025d8c l     O .rwdata	00000004 heap_end
02024788 g     F .text	00000054 _isatty_r
020216b0 g     F .text	00000050 alt_main
020247dc g     F .text	00000060 _lseek_r
020201e4 g     F .text	0000004c ACK_check
02025d90 g       *ABS*	00000000 __flash_rwdata_start
0202018c g     F .text	00000058 ACK_single_check
02026804 g       *ABS*	00000000 __alt_heap_start
02024510 g     F .text	0000005c __sseek
020230f8 g     F .text	00000010 __sinit
020226c4 g     F .text	00000140 __swbuf_r
02022f50 g     F .text	00000078 __sfmoreglue
02024ae4 g     F .text	00000004 __malloc_unlock
02020230 g     F .text	00000120 OC_I2C_Write
02021320 g     F .text	00000050 readBytes
020230e0 g     F .text	00000018 _cleanup
02021f94 g     F .text	00000008 altera_nios2_gen2_irq_init
02020000 g     F .entry	0000000c __reset
0202125c g     F .text	00000078 mipi_camera_reg_write_VCM149C
02020020 g       *ABS*	00000000 __flash_exceptions_start
0202472c g     F .text	0000005c _fstat_r
020267cc g     O .bss	00000004 errno
02022618 g     F .text	00000014 __srget
0202448c g     F .text	00000008 __seofread
020209fc g     F .text	00000044 WaitFrame
020267c4 g     O .bss	00000004 alt_argv
0202dd60 g       *ABS*	00000000 _gp
02021888 g     F .text	00000004 usleep
02025d60 g     O .rwdata	00000004 MIPI_REGISTERS_COUNT
0202538c g     O .rwdata	00000180 alt_fd_list
02022180 g     F .text	00000070 _getc_r
020221f0 g     F .text	00000088 getc
02021f9c g     F .text	00000078 alt_find_dev
020222f4 g     F .text	00000148 memcpy
02020090 g     F .text	000000a8 oc_i2c_init_ex
02022da0 g     F .text	0000000c _cleanup_r
02021c70 g     F .text	00000140 alt_io_redirect
02021190 g     F .text	00000098 mipi_camera_init
020219ec g     F .text	0000008c altera_avalon_jtag_uart_read
020214f4 g     F .text	00000064 .hidden __udivsi3
02024978 g     F .text	000000a0 isatty
02020ea8 g     F .text	00000044 ft232h_send_string
020267d8 g     O .bss	00000004 __malloc_top_pad
02020f24 g     F .text	0000003c mipi_bridge_reg_read
020243e4 g     F .text	00000054 _sbrk_r
0202483c g     F .text	00000060 _read_r
02025d64 g     O .rwdata	00000004 alt_max_fd
02020eec g     F .text	00000038 mipi_bridge_reg_write
02024628 g     F .text	000000f0 _fclose_r
02022d68 g     F .text	00000030 fflush
020267d4 g     O .bss	00000004 __malloc_max_sbrked_mem
02024a18 g     F .text	000000c8 lseek
02025d7c g     O .rwdata	00000004 _global_impure_ptr
02026804 g       *ABS*	00000000 __bss_end
020215d8 g     F .text	0000000c alt_getchar
02020d44 g     F .text	000000b8 ft232h_read_bytes
02023118 g     F .text	00000018 __fp_lock_all
02024de6 g     O .rodata	00000044 MIPI_REGISTERS
02020604 g     F .text	00000150 OC_I2CL_Write
02020350 g     F .text	00000038 ACK_judge_for_read
0202550c g     O .rwdata	00000028 alt_dev_null
0202005c g     F .text	00000018 Write32_Data
02021030 g     F .text	00000038 mipi_camera_reg_write
02021bf4 g     F .text	00000004 alt_dcache_flush_all
02025d90 g       *ABS*	00000000 __ram_rwdata_end
02025d68 g     O .rwdata	00000008 alt_dev_list
0202188c g     F .text	00000110 write
0202243c g     F .text	000000a0 _putc_r
02020dfc g     F .text	000000ac ft232h_write_bytes
02025360 g       *ABS*	00000000 __ram_rodata_end
020248b0 g     F .text	000000c8 fstat
02021558 g     F .text	00000058 .hidden __umodsi3
02020d04 g     F .text	00000040 ft232h_read_byte
02026804 g       *ABS*	00000000 end
020212d4 g     F .text	00000038 readUInt16
0202a000 g       *ABS*	00000000 __alt_stack_pointer
02021a78 g     F .text	00000034 altera_avalon_jtag_uart_write
02023108 g     F .text	00000004 __sfp_lock_acquire
0202326c g     F .text	00000310 _free_r
02021700 g     F .text	0000017c alt_printf
020225a4 g     F .text	00000074 __srget_r
02022970 g     F .text	00000180 __call_exitprocs
02025d84 g     O .rwdata	00000004 __malloc_sbrk_base
02020020 g     F .text	0000003c _start
02024ae8 g     F .text	00000114 read
020219bc g     F .text	00000010 alt_sys_init
020215b0 g     F .text	00000028 .hidden __mulsi3
02025360 g       *ABS*	00000000 __ram_rwdata_start
02024c48 g       *ABS*	00000000 __ram_rodata_start
020267dc g     O .bss	00000028 __malloc_current_mallinfo
020219cc g     F .text	00000010 altera_avalon_jtag_uart_read_fd
020220c0 g     F .text	00000088 alt_get_fd
02021aac g     F .text	00000088 alt_busy_sleep
020245d4 g     F .text	00000054 _close_r
02022278 g     F .text	0000007c memcmp
02026804 g       *ABS*	00000000 __alt_stack_base
0202281c g     F .text	00000154 __swsetup_r
02020138 g     F .text	00000014 oc_i2c_init
02022fc8 g     F .text	00000118 __sfp
02020f60 g     F .text	00000098 mipi_bridge_init
02025958 g     O .rwdata	00000408 __malloc_av_
02023114 g     F .text	00000004 __sinit_lock_release
02024438 g     F .text	00000054 __sread
02022014 g     F .text	000000ac alt_find_file
02024e2a g     O .rodata	00000514 CAMERA_REGISTERS
02021c00 g     F .text	0000006c alt_dev_llist_insert
02024ae0 g     F .text	00000004 __malloc_lock
02024bfc g     F .text	0000004c sbrk
02022d0c g     F .text	0000005c _fflush_r
020267c0 g       *ABS*	00000000 __bss_start
020240cc g     F .text	00000128 memset
02020a40 g     F .text	00000284 main
020267c0 g     O .bss	00000004 alt_envp
020267d0 g     O .bss	00000004 __malloc_max_total_mem
020219dc g     F .text	00000010 altera_avalon_jtag_uart_write_fd
02022804 g     F .text	00000018 __swbuf
0202456c g     F .text	00000008 __sclose
0202a000 g       *ABS*	00000000 __alt_heap_limit
02024718 g     F .text	00000014 fclose
020238c0 g     F .text	0000080c _malloc_r
02025d78 g     O .rwdata	00000004 alt_errno
02021068 g     F .text	00000128 mipi_camera_binning
02021228 g     F .text	00000034 mipi_camera_reg_read_VCM149C
0202357c g     F .text	000000c4 _fwalk
020224dc g     F .text	000000c8 putc
020213fc g     F .text	00000084 .hidden __divsi3
0202014c g     F .text	00000040 oc_i2c_uninit
02023148 g     F .text	00000124 _malloc_trim_r
02024c48 g       *ABS*	00000000 __flash_rodata_start
0202199c g     F .text	00000020 alt_irq_init
02021f38 g     F .text	0000005c alt_release_fd
0202130c g     F .text	00000014 bytesToUInt16
02024574 g     F .text	00000060 _write_r
02025d80 g     O .rwdata	00000004 _impure_ptr
020267c8 g     O .bss	00000004 alt_argc
02022af0 g     F .text	0000021c __sflush_r
02024210 g     F .text	000001d4 __srefill_r
02023130 g     F .text	00000018 __fp_unlock_all
02025d70 g     O .rwdata	00000008 alt_fs_list
02020074 g     F .text	0000001c Read32_Data
02020388 g     F .text	00000174 OC_I2C_Read
02020020 g       *ABS*	00000000 __ram_exceptions_start
02021370 g     F .text	00000048 writeBytes
02025d90 g       *ABS*	00000000 _edata
02026804 g       *ABS*	00000000 _end
02020020 g       *ABS*	00000000 __ram_exceptions_end
020213f4 g     F .text	00000008 writeByte
02024494 g     F .text	0000007c __swrite
02025d88 g     O .rwdata	00000004 __malloc_trim_threshold
020204fc g     F .text	00000108 OC_I2C_Read_Continue
02022148 g     F .text	00000038 exit
02023640 g     F .text	000000c4 _fwalk_reent
02021480 g     F .text	00000074 .hidden __modsi3
02020cc4 g     F .text	00000040 ft232h_send_byte
0202a000 g       *ABS*	00000000 __alt_data_end
0202310c g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
02020754 g     F .text	000001a8 OC_I2CL_Read
020213b8 g     F .text	00000024 writeUInt16
0202489c g     F .text	00000014 _exit
02023704 g     F .text	000001bc __smakebuf_r
02020ff8 g     F .text	00000038 mipi_camera_reg_read
0202262c g     F .text	00000098 strlen
02021db0 g     F .text	00000188 open
0202187c g     F .text	0000000c alt_putchar
02021c6c g     F .text	00000004 alt_icache_flush_all
020213dc g     F .text	00000018 readByte
02020000 g       *ABS*	00000000 __alt_mem_memory_system
02021b34 g     F .text	000000c0 close
02020910 g     F .text	000000ec config
020215e4 g     F .text	000000cc alt_load
020208fc g     F .text	00000014 ReverseUInt16
02023110 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

02020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2020000:	004080b4 	movhi	at,514
    ori r1, r1, %lo(_start)
 2020004:	08400814 	ori	at,at,32
    jmp r1
 2020008:	0800683a 	jmp	at
	...

Disassembly of section .text:

02020020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2020020:	06c080b4 	movhi	sp,514
    ori sp, sp, %lo(__alt_stack_pointer)
 2020024:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
 2020028:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 202002c:	d6b75814 	ori	gp,gp,56672
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2020030:	008080b4 	movhi	r2,514
    ori r2, r2, %lo(__bss_start)
 2020034:	1099f014 	ori	r2,r2,26560

    movhi r3, %hi(__bss_end)
 2020038:	00c080b4 	movhi	r3,514
    ori r3, r3, %lo(__bss_end)
 202003c:	18da0114 	ori	r3,r3,26628

    beq r2, r3, 1f
 2020040:	10c00326 	beq	r2,r3,2020050 <_start+0x30>

0:
    stw zero, (r2)
 2020044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2020048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 202004c:	10fffd36 	bltu	r2,r3,2020044 <_gp+0xffff22e4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2020050:	20215e40 	call	20215e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2020054:	20216b00 	call	20216b0 <alt_main>

02020058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2020058:	003fff06 	br	2020058 <_gp+0xffff22f8>

0202005c <Write32_Data>:
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 202005c:	294b883a 	add	r5,r5,r5
 2020060:	294b883a 	add	r5,r5,r5
 2020064:	2909883a 	add	r4,r5,r4
 2020068:	21800035 	stwio	r6,0(r4)
    bPass=TRUE;
    return bPass;
}
 202006c:	00800044 	movi	r2,1
 2020070:	f800283a 	ret

02020074 <Read32_Data>:

bool Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
 2020074:	294b883a 	add	r5,r5,r5
 2020078:	294b883a 	add	r5,r5,r5
 202007c:	2909883a 	add	r4,r5,r4
 2020080:	20800037 	ldwio	r2,0(r4)
 2020084:	30800015 	stw	r2,0(r6)
	bPass=TRUE;
    return bPass;
}
 2020088:	00800044 	movi	r2,1
 202008c:	f800283a 	ret

02020090 <oc_i2c_init_ex>:
	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
	return bSuccess;
}

bool oc_i2c_init_ex(alt_32 i2c_base, alt_32 ref_clk, alt_32 i2c_clk)
{
 2020090:	defffd04 	addi	sp,sp,-12
 2020094:	dc400115 	stw	r17,4(sp)
 2020098:	dc000015 	stw	r16,0(sp)
 202009c:	2823883a 	mov	r17,r5
 20200a0:	2021883a 	mov	r16,r4
	const alt_u8 ControlValue = 0x80;

    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	prescale = (ref_clk/(5*i2c_clk))-1;
 20200a4:	01400144 	movi	r5,5
 20200a8:	3009883a 	mov	r4,r6
	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
	return bSuccess;
}

bool oc_i2c_init_ex(alt_32 i2c_base, alt_32 ref_clk, alt_32 i2c_clk)
{
 20200ac:	dfc00215 	stw	ra,8(sp)
	const alt_u8 ControlValue = 0x80;

    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	prescale = (ref_clk/(5*i2c_clk))-1;
 20200b0:	20215b00 	call	20215b0 <__mulsi3>
 20200b4:	100b883a 	mov	r5,r2
 20200b8:	8809883a 	mov	r4,r17
 20200bc:	20213fc0 	call	20213fc <__divsi3>
 20200c0:	10bfffc4 	addi	r2,r2,-1
 20200c4:	11c03fcc 	andi	r7,r2,255
	prescale_low = prescale & 0xFF;
	prescale_high = (prescale >> 8) & 0xFF;

   IOWR(i2c_base, 0, prescale_low);//write low byte of  prescale (reg 0)
 20200c8:	81c00035 	stwio	r7,0(r16)
 20200cc:	1005d23a 	srai	r2,r2,8
   IOWR(i2c_base, 1, prescale_high);//write high byte of prescale (reg 1)
 20200d0:	81800104 	addi	r6,r16,4
 20200d4:	10803fcc 	andi	r2,r2,255
 20200d8:	30800035 	stwio	r2,0(r6)

   //enable the I2C core, but disable the IRQ
   IOWR( i2c_base, 2, ControlValue);
 20200dc:	81400204 	addi	r5,r16,8
 20200e0:	01002004 	movi	r4,128
 20200e4:	29000035 	stwio	r4,0(r5)

    // check prescale low byte
    if (bSuccess){
    	read_data =IORD(i2c_base, 0);
 20200e8:	80c00037 	ldwio	r3,0(r16)
        if( (read_data & 0x00ff) != prescale_low ){
 20200ec:	18c03fcc 	andi	r3,r3,255
 20200f0:	38c0031e 	bne	r7,r3,2020100 <oc_i2c_init_ex+0x70>
        }
    }

    // check prescale high byte
    if (bSuccess){
    	read_data =IORD(i2c_base, 1);
 20200f4:	30c00037 	ldwio	r3,0(r6)
        if( (read_data & 0x00ff) != prescale_high ){
 20200f8:	18c03fcc 	andi	r3,r3,255
 20200fc:	10c00526 	beq	r2,r3,2020114 <oc_i2c_init_ex+0x84>
            bSuccess = FALSE;
        }
    }

   if (!bSuccess)
	alt_printf("oc_i2c_init_ex fail\n");
 2020100:	010080b4 	movhi	r4,514
 2020104:	21131204 	addi	r4,r4,19528
 2020108:	20217000 	call	2021700 <alt_printf>
 202010c:	0005883a 	mov	r2,zero
 2020110:	00000406 	br	2020124 <oc_i2c_init_ex+0x94>
        }
    }

    // check control
    if (bSuccess){
    	read_data =IORD(i2c_base, 2);
 2020114:	28800037 	ldwio	r2,0(r5)
        if( (read_data & 0x00ff) != ControlValue ){
 2020118:	10803fcc 	andi	r2,r2,255
 202011c:	113ff81e 	bne	r2,r4,2020100 <_gp+0xffff23a0>
 2020120:	00800044 	movi	r2,1

   if (!bSuccess)
	alt_printf("oc_i2c_init_ex fail\n");

   return bSuccess;
}
 2020124:	dfc00217 	ldw	ra,8(sp)
 2020128:	dc400117 	ldw	r17,4(sp)
 202012c:	dc000017 	ldw	r16,0(sp)
 2020130:	dec00304 	addi	sp,sp,12
 2020134:	f800283a 	ret

02020138 <oc_i2c_init>:

bool oc_i2c_init(alt_32 i2c_base){
	bool bSuccess;
	const alt_32 ref_clk = 50*1000*1000; // 50MHz
	const alt_32 i2c_clk = 400*1000; // 400KHz
	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
 2020138:	018001b4 	movhi	r6,6
 202013c:	0140bef4 	movhi	r5,763
 2020140:	3186a004 	addi	r6,r6,6784
 2020144:	297c2004 	addi	r5,r5,-3968
 2020148:	20200901 	jmpi	2020090 <oc_i2c_init_ex>

0202014c <oc_i2c_uninit>:
{
	bool bSuccess=TRUE;
	alt_32 read_data;
	const alt_u8 ControlValue = 0x00;

    IOWR( i2c_base, 2, ControlValue);
 202014c:	21000204 	addi	r4,r4,8
 2020150:	20000035 	stwio	zero,0(r4)
   	read_data =IORD(i2c_base, 2);
 2020154:	20800037 	ldwio	r2,0(r4)
	if( (read_data & 0x00ff) != ControlValue ){
 2020158:	10803fcc 	andi	r2,r2,255
 202015c:	1000021e 	bne	r2,zero,2020168 <oc_i2c_uninit+0x1c>
   return bSuccess;
}

bool oc_i2c_uninit(alt_32 i2c_base)
{
	bool bSuccess=TRUE;
 2020160:	00800044 	movi	r2,1

   if (!bSuccess)
	   alt_printf("oc_i2c_uninit fail\n");

   return bSuccess;
}
 2020164:	f800283a 	ret
	if( (read_data & 0x00ff) != ControlValue ){
            bSuccess = FALSE;
    }

   if (!bSuccess)
	   alt_printf("oc_i2c_uninit fail\n");
 2020168:	010080b4 	movhi	r4,514

   return bSuccess;
}

bool oc_i2c_uninit(alt_32 i2c_base)
{
 202016c:	deffff04 	addi	sp,sp,-4
	if( (read_data & 0x00ff) != ControlValue ){
            bSuccess = FALSE;
    }

   if (!bSuccess)
	   alt_printf("oc_i2c_uninit fail\n");
 2020170:	21131804 	addi	r4,r4,19552

   return bSuccess;
}

bool oc_i2c_uninit(alt_32 i2c_base)
{
 2020174:	dfc00015 	stw	ra,0(sp)
	if( (read_data & 0x00ff) != ControlValue ){
            bSuccess = FALSE;
    }

   if (!bSuccess)
	   alt_printf("oc_i2c_uninit fail\n");
 2020178:	20217000 	call	2021700 <alt_printf>
	const alt_u8 ControlValue = 0x00;

    IOWR( i2c_base, 2, ControlValue);
   	read_data =IORD(i2c_base, 2);
	if( (read_data & 0x00ff) != ControlValue ){
            bSuccess = FALSE;
 202017c:	0005883a 	mov	r2,zero

   if (!bSuccess)
	   alt_printf("oc_i2c_uninit fail\n");

   return bSuccess;
}
 2020180:	dfc00017 	ldw	ra,0(sp)
 2020184:	dec00104 	addi	sp,sp,4
 2020188:	f800283a 	ret

0202018c <ACK_single_check>:

bool ACK_single_check(alt_32 i2c_base)
{
 202018c:	defffe04 	addi	sp,sp,-8
 2020190:	dc000015 	stw	r16,0(sp)
 2020194:	2021883a 	mov	r16,r4
	bool bSuccess=TRUE;
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
 2020198:	01003e84 	movi	r4,250

   return bSuccess;
}

bool ACK_single_check(alt_32 i2c_base)
{
 202019c:	dfc00115 	stw	ra,4(sp)
	bool bSuccess=TRUE;
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
    read_data =IORD(i2c_base, 4);
 20201a0:	84000404 	addi	r16,r16,16
bool ACK_single_check(alt_32 i2c_base)
{
	bool bSuccess=TRUE;
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
 20201a4:	20218880 	call	2021888 <usleep>
    read_data =IORD(i2c_base, 4);
 20201a8:	80800037 	ldwio	r2,0(r16)
    if(read_data & 0x02)
 20201ac:	1080008c 	andi	r2,r2,2
 20201b0:	10000226 	beq	r2,zero,20201bc <ACK_single_check+0x30>
 20201b4:	0005883a 	mov	r2,zero
 20201b8:	00000606 	br	20201d4 <ACK_single_check+0x48>
            bSuccess = FALSE;
     if (bSuccess){
            usleep(ACK_SLEEP_TIME);
 20201bc:	01003e84 	movi	r4,250
 20201c0:	20218880 	call	2021888 <usleep>
            read_data =IORD(i2c_base, 4);
 20201c4:	80800037 	ldwio	r2,0(r16)
                if(read_data & 0x80)
 20201c8:	1004d1fa 	srli	r2,r2,7
 20201cc:	1080005c 	xori	r2,r2,1
 20201d0:	1080004c 	andi	r2,r2,1
                    bSuccess = FALSE;
     }
    return bSuccess;
}
 20201d4:	dfc00117 	ldw	ra,4(sp)
 20201d8:	dc000017 	ldw	r16,0(sp)
 20201dc:	dec00204 	addi	sp,sp,8
 20201e0:	f800283a 	ret

020201e4 <ACK_check>:

bool ACK_check(alt_32 i2c_base){
 20201e4:	defffd04 	addi	sp,sp,-12
 20201e8:	dc400115 	stw	r17,4(sp)
 20201ec:	dc000015 	stw	r16,0(sp)
 20201f0:	dfc00215 	stw	ra,8(sp)
 20201f4:	2023883a 	mov	r17,r4
 20201f8:	040002c4 	movi	r16,11
 20201fc:	843fffc4 	addi	r16,r16,-1
    bool bSuccess = FALSE;
    int i=0;
    while(!bSuccess && i++ < 10){
 2020200:	80000526 	beq	r16,zero,2020218 <ACK_check+0x34>
        bSuccess = ACK_single_check(i2c_base);
 2020204:	8809883a 	mov	r4,r17
 2020208:	202018c0 	call	202018c <ACK_single_check>
}

bool ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;
    while(!bSuccess && i++ < 10){
 202020c:	10c03fcc 	andi	r3,r2,255
 2020210:	183ffa26 	beq	r3,zero,20201fc <_gp+0xffff249c>
 2020214:	00000106 	br	202021c <ACK_check+0x38>
 2020218:	0005883a 	mov	r2,zero
        bSuccess = ACK_single_check(i2c_base);
    }
    return bSuccess;
}
 202021c:	dfc00217 	ldw	ra,8(sp)
 2020220:	dc400117 	ldw	r17,4(sp)
 2020224:	dc000017 	ldw	r16,0(sp)
 2020228:	dec00304 	addi	sp,sp,12
 202022c:	f800283a 	ret

02020230 <OC_I2C_Write>:

bool OC_I2C_Write(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData, int nWriteLength)
{
 2020230:	defff704 	addi	sp,sp,-36
 2020234:	dd800615 	stw	r22,24(sp)
 2020238:	dd400515 	stw	r21,20(sp)
 202023c:	dcc00315 	stw	r19,12(sp)
 2020240:	dc000015 	stw	r16,0(sp)
 2020244:	dfc00815 	stw	ra,32(sp)
 2020248:	ddc00715 	stw	r23,28(sp)
 202024c:	dd000415 	stw	r20,16(sp)
 2020250:	dc800215 	stw	r18,8(sp)
 2020254:	dc400115 	stw	r17,4(sp)
 2020258:	2027883a 	mov	r19,r4
 202025c:	3021883a 	mov	r16,r6
 2020260:	382d883a 	mov	r22,r7
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 2020264:	25400304 	addi	r21,r4,12
 2020268:	29403fcc 	andi	r5,r5,255
 202026c:	a9400035 	stwio	r5,0(r21)
 2020270:	24800404 	addi	r18,r4,16
 2020274:	00802404 	movi	r2,144
 2020278:	90800035 	stwio	r2,0(r18)
       alt_printf("OC_I2C_Write err[1]\n");
       return FALSE;
   }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 202027c:	20201e40 	call	20201e4 <ACK_check>
 2020280:	1023883a 	mov	r17,r2
 2020284:	10803fcc 	andi	r2,r2,255
 2020288:	1000031e 	bne	r2,zero,2020298 <OC_I2C_Write+0x68>
        alt_printf("OC_I2C_Write err[2]\n");
 202028c:	010080b4 	movhi	r4,514
 2020290:	21131d04 	addi	r4,r4,19572
 2020294:	00000b06 	br	20202c4 <OC_I2C_Write+0x94>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 2020298:	84003fcc 	andi	r16,r16,255
 202029c:	ac000035 	stwio	r16,0(r21)
 20202a0:	05000404 	movi	r20,16
 20202a4:	95000035 	stwio	r20,0(r18)
        alt_printf("OC_I2C_Write err[4]\n");
        return FALSE;
    }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 20202a8:	9809883a 	mov	r4,r19
 20202ac:	20201e40 	call	20201e4 <ACK_check>
 20202b0:	1023883a 	mov	r17,r2
 20202b4:	10803fcc 	andi	r2,r2,255
 20202b8:	1000041e 	bne	r2,zero,20202cc <OC_I2C_Write+0x9c>
        alt_printf("OC_I2C_Write err[5]\n");
 20202bc:	010080b4 	movhi	r4,514
 20202c0:	21132304 	addi	r4,r4,19596
 20202c4:	20217000 	call	2021700 <alt_printf>
        return FALSE;
 20202c8:	00001506 	br	2020320 <OC_I2C_Write+0xf0>
    }
 //  alt_printf("\n receive ACK-reg address! \n");

#if 1
        for( i=nWriteLength-1;i>=0;i--){
 20202cc:	dc000917 	ldw	r16,36(sp)
 20202d0:	843fffc4 	addi	r16,r16,-1
 20202d4:	80000e16 	blt	r16,zero,2020310 <OC_I2C_Write+0xe0>
        //set the txr reg data with the data
          if (!Write32_Data( i2c_base, 3,*(pData+i))){
 20202d8:	b405883a 	add	r2,r22,r16
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 20202dc:	10800003 	ldbu	r2,0(r2)
 20202e0:	a8800035 	stwio	r2,0(r21)
 20202e4:	95000035 	stwio	r20,0(r18)
             alt_printf("OC_I2C_Write err[7]\n");
              return FALSE;
         }

         //wait TIP bit go to 0 to end Tx
          if(!ACK_check( i2c_base)){
 20202e8:	9809883a 	mov	r4,r19
 20202ec:	20201e40 	call	20201e4 <ACK_check>
 20202f0:	102f883a 	mov	r23,r2
 20202f4:	10803fcc 	andi	r2,r2,255
 20202f8:	103ff51e 	bne	r2,zero,20202d0 <_gp+0xffff2570>
              alt_printf("OC_I2C_Write err[8]\n");
 20202fc:	010080b4 	movhi	r4,514
 2020300:	21132904 	addi	r4,r4,19620
 2020304:	20217000 	call	2021700 <alt_printf>
              return FALSE;
 2020308:	b823883a 	mov	r17,r23
 202030c:	00000406 	br	2020320 <OC_I2C_Write+0xf0>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 2020310:	00801004 	movi	r2,64
 2020314:	90800035 	stwio	r2,0(r18)
         alt_printf("OC_I2C_Write err[9]\n");
         return FALSE;
     }
     //Sleep(10);
     //OS_msleep(1);
     usleep(SLEEP_TIME);
 2020318:	01003e84 	movi	r4,250
 202031c:	20218880 	call	2021888 <usleep>
  // alt_printf("\n receive ACK-data! \n");
     return TRUE;
}
 2020320:	8805883a 	mov	r2,r17
 2020324:	dfc00817 	ldw	ra,32(sp)
 2020328:	ddc00717 	ldw	r23,28(sp)
 202032c:	dd800617 	ldw	r22,24(sp)
 2020330:	dd400517 	ldw	r21,20(sp)
 2020334:	dd000417 	ldw	r20,16(sp)
 2020338:	dcc00317 	ldw	r19,12(sp)
 202033c:	dc800217 	ldw	r18,8(sp)
 2020340:	dc400117 	ldw	r17,4(sp)
 2020344:	dc000017 	ldw	r16,0(sp)
 2020348:	dec00904 	addi	sp,sp,36
 202034c:	f800283a 	ret

02020350 <ACK_judge_for_read>:

bool ACK_judge_for_read(alt_32 i2c_base)
{
 2020350:	defffe04 	addi	sp,sp,-8
 2020354:	dc000015 	stw	r16,0(sp)
 2020358:	2021883a 	mov	r16,r4
	bool bSuccess;
    alt_32 this_data;
   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
 202035c:	01003e84 	movi	r4,250
  // alt_printf("\n receive ACK-data! \n");
     return TRUE;
}

bool ACK_judge_for_read(alt_32 i2c_base)
{
 2020360:	dfc00115 	stw	ra,4(sp)
	bool bSuccess;
    alt_32 this_data;
   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
 2020364:	20218880 	call	2021888 <usleep>
    return bPass;
}

bool Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
 2020368:	80800437 	ldwio	r2,16(r16)
    if (bSuccess){
        if(this_data & 0x02)
            bSuccess = FALSE;
    }
   //wait the rx ACK signal 0-valid
    return bSuccess;
 202036c:	1004d07a 	srli	r2,r2,1
 2020370:	1080005c 	xori	r2,r2,1
}
 2020374:	1080004c 	andi	r2,r2,1
 2020378:	dfc00117 	ldw	ra,4(sp)
 202037c:	dc000017 	ldw	r16,0(sp)
 2020380:	dec00204 	addi	sp,sp,8
 2020384:	f800283a 	ret

02020388 <OC_I2C_Read>:

bool OC_I2C_Read(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData8, int nReadLength){
 2020388:	defff604 	addi	sp,sp,-40
 202038c:	dd800615 	stw	r22,24(sp)
 2020390:	dd800a17 	ldw	r22,40(sp)
 2020394:	df000815 	stw	fp,32(sp)
 2020398:	dd400515 	stw	r21,20(sp)
 202039c:	dd000415 	stw	r20,16(sp)
 20203a0:	dcc00315 	stw	r19,12(sp)
 20203a4:	dc400115 	stw	r17,4(sp)
 20203a8:	dfc00915 	stw	ra,36(sp)
 20203ac:	ddc00715 	stw	r23,28(sp)
 20203b0:	dc800215 	stw	r18,8(sp)
 20203b4:	dc000015 	stw	r16,0(sp)
 20203b8:	2029883a 	mov	r20,r4
 20203bc:	2823883a 	mov	r17,r5
 20203c0:	3039883a 	mov	fp,r6
 20203c4:	3827883a 	mov	r19,r7
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
 20203c8:	25400304 	addi	r21,r4,12
 20203cc:	28803fcc 	andi	r2,r5,255
 20203d0:	a8800035 	stwio	r2,0(r21)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
 20203d4:	24800404 	addi	r18,r4,16
 20203d8:	05c02404 	movi	r23,144
 20203dc:	95c00035 	stwio	r23,0(r18)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
 20203e0:	20201e40 	call	20201e4 <ACK_check>
 20203e4:	1021883a 	mov	r16,r2
 20203e8:	10803fcc 	andi	r2,r2,255
 20203ec:	1000031e 	bne	r2,zero,20203fc <OC_I2C_Read+0x74>
       alt_printf("OC_I2C_Read err[2]\n");
 20203f0:	010080b4 	movhi	r4,514
 20203f4:	21132f04 	addi	r4,r4,19644
 20203f8:	00000b06 	br	2020428 <OC_I2C_Read+0xa0>
       return FALSE;
   }
   IOWR(i2c_base, 3,sub_address);
 20203fc:	e7003fcc 	andi	fp,fp,255
 2020400:	af000035 	stwio	fp,0(r21)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
 2020404:	00800404 	movi	r2,16
 2020408:	90800035 	stwio	r2,0(r18)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 202040c:	a009883a 	mov	r4,r20
 2020410:	20201e40 	call	20201e4 <ACK_check>
 2020414:	1021883a 	mov	r16,r2
 2020418:	10803fcc 	andi	r2,r2,255
 202041c:	1000041e 	bne	r2,zero,2020430 <OC_I2C_Read+0xa8>
        alt_printf("OC_I2C_Read err[5]\n");
 2020420:	010080b4 	movhi	r4,514
 2020424:	21133404 	addi	r4,r4,19664
 2020428:	20217000 	call	2021700 <alt_printf>
        return FALSE;
 202042c:	00002606 	br	20204c8 <OC_I2C_Read+0x140>
  // alt_printf("\n read receive ACK-reg address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1

    IOWR(i2c_base, 3,device_address|0x01);
 2020430:	8c400054 	ori	r17,r17,1
 2020434:	8c403fcc 	andi	r17,r17,255
 2020438:	ac400035 	stwio	r17,0(r21)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
 202043c:	95c00035 	stwio	r23,0(r18)

   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 2020440:	a009883a 	mov	r4,r20
 2020444:	20201e40 	call	20201e4 <ACK_check>
 2020448:	1021883a 	mov	r16,r2
 202044c:	10803fcc 	andi	r2,r2,255
 2020450:	10000226 	beq	r2,zero,202045c <OC_I2C_Read+0xd4>
 2020454:	0023883a 	mov	r17,zero
 2020458:	00000606 	br	2020474 <OC_I2C_Read+0xec>
        alt_printf("OC_I2C_Read err[8]\n");
 202045c:	010080b4 	movhi	r4,514
 2020460:	21133904 	addi	r4,r4,19684
 2020464:	003ff006 	br	2020428 <_gp+0xffff26c8>
            alt_printf("OC_I2C_Read err[10]\n");
            return FALSE;
        }
   // alt_printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 2020468:	a8800037 	ldwio	r2,0(r21)
        *(pData8+i) =  Data32 & 0xff;
 202046c:	98800005 	stb	r2,0(r19)
 2020470:	9cc00044 	addi	r19,r19,1
    if (!ACK_check( i2c_base)){
        alt_printf("OC_I2C_Read err[8]\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
 2020474:	8d80100e 	bge	r17,r22,20204b8 <OC_I2C_Read+0x130>
  // alt_printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 2020478:	8c400044 	addi	r17,r17,1
 202047c:	b4400226 	beq	r22,r17,2020488 <OC_I2C_Read+0x100>
 2020480:	00800804 	movi	r2,32
 2020484:	00000106 	br	202048c <OC_I2C_Read+0x104>
 2020488:	00800a04 	movi	r2,40
 202048c:	90800035 	stwio	r2,0(r18)

        if (!ACK_judge_for_read( i2c_base)){
 2020490:	a009883a 	mov	r4,r20
 2020494:	20203500 	call	2020350 <ACK_judge_for_read>
 2020498:	102f883a 	mov	r23,r2
 202049c:	10803fcc 	andi	r2,r2,255
 20204a0:	103ff11e 	bne	r2,zero,2020468 <_gp+0xffff2708>
            alt_printf("OC_I2C_Read err[10]\n");
 20204a4:	010080b4 	movhi	r4,514
 20204a8:	21133e04 	addi	r4,r4,19704
 20204ac:	20217000 	call	2021700 <alt_printf>
            return FALSE;
 20204b0:	b821883a 	mov	r16,r23
 20204b4:	00000406 	br	20204c8 <OC_I2C_Read+0x140>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
 20204b8:	00801004 	movi	r2,64
 20204bc:	90800035 	stwio	r2,0(r18)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
 20204c0:	01003e84 	movi	r4,250
 20204c4:	20218880 	call	2021888 <usleep>
 //  alt_printf(" Read  [%02X] = %02Xh\n", sub_address, data);


   return TRUE;

}
 20204c8:	8005883a 	mov	r2,r16
 20204cc:	dfc00917 	ldw	ra,36(sp)
 20204d0:	df000817 	ldw	fp,32(sp)
 20204d4:	ddc00717 	ldw	r23,28(sp)
 20204d8:	dd800617 	ldw	r22,24(sp)
 20204dc:	dd400517 	ldw	r21,20(sp)
 20204e0:	dd000417 	ldw	r20,16(sp)
 20204e4:	dcc00317 	ldw	r19,12(sp)
 20204e8:	dc800217 	ldw	r18,8(sp)
 20204ec:	dc400117 	ldw	r17,4(sp)
 20204f0:	dc000017 	ldw	r16,0(sp)
 20204f4:	dec00a04 	addi	sp,sp,40
 20204f8:	f800283a 	ret

020204fc <OC_I2C_Read_Continue>:


bool  OC_I2C_Read_Continue(alt_32 i2c_base,alt_u8 device_address, alt_u8 *pData8, int nReadLength){
 20204fc:	defff704 	addi	sp,sp,-36
	int i;
	alt_u32 Data32;

    IOWR(i2c_base, 3,device_address|0x01);
 2020500:	29400054 	ori	r5,r5,1
   return TRUE;

}


bool  OC_I2C_Read_Continue(alt_32 i2c_base,alt_u8 device_address, alt_u8 *pData8, int nReadLength){
 2020504:	dd800615 	stw	r22,24(sp)
 2020508:	dd400515 	stw	r21,20(sp)
 202050c:	dd000415 	stw	r20,16(sp)
 2020510:	dc000015 	stw	r16,0(sp)
 2020514:	dfc00815 	stw	ra,32(sp)
 2020518:	ddc00715 	stw	r23,28(sp)
 202051c:	dcc00315 	stw	r19,12(sp)
 2020520:	dc800215 	stw	r18,8(sp)
 2020524:	dc400115 	stw	r17,4(sp)
 2020528:	2029883a 	mov	r20,r4
 202052c:	3021883a 	mov	r16,r6
 2020530:	382d883a 	mov	r22,r7
	int i;
	alt_u32 Data32;

    IOWR(i2c_base, 3,device_address|0x01);
 2020534:	25400304 	addi	r21,r4,12
 2020538:	29403fcc 	andi	r5,r5,255
 202053c:	a9400035 	stwio	r5,0(r21)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
 2020540:	24c00404 	addi	r19,r4,16
 2020544:	00802404 	movi	r2,144
 2020548:	98800035 	stwio	r2,0(r19)
//usleep(5*1000);
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 202054c:	20201e40 	call	20201e4 <ACK_check>
 2020550:	1025883a 	mov	r18,r2
 2020554:	10803fcc 	andi	r2,r2,255
 2020558:	10000226 	beq	r2,zero,2020564 <OC_I2C_Read_Continue+0x68>
 202055c:	0023883a 	mov	r17,zero
 2020560:	00000706 	br	2020580 <OC_I2C_Read_Continue+0x84>
        alt_printf("OC_I2C_Read err[8]\n");
 2020564:	010080b4 	movhi	r4,514
 2020568:	21133904 	addi	r4,r4,19684
 202056c:	20217000 	call	2021700 <alt_printf>
        return FALSE;
 2020570:	00001806 	br	20205d4 <OC_I2C_Read_Continue+0xd8>
            alt_printf("OC_I2C_Read err[10]\n");
            return FALSE;
        }
   // alt_printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 2020574:	a8800037 	ldwio	r2,0(r21)
        *(pData8+i) =  Data32 & 0xff;
 2020578:	80800005 	stb	r2,0(r16)
 202057c:	84000044 	addi	r16,r16,1
    if (!ACK_check( i2c_base)){
        alt_printf("OC_I2C_Read err[8]\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
 2020580:	8d80100e 	bge	r17,r22,20205c4 <OC_I2C_Read_Continue+0xc8>
  // alt_printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 2020584:	8c400044 	addi	r17,r17,1
 2020588:	b4400226 	beq	r22,r17,2020594 <OC_I2C_Read_Continue+0x98>
 202058c:	00800804 	movi	r2,32
 2020590:	00000106 	br	2020598 <OC_I2C_Read_Continue+0x9c>
 2020594:	00800a04 	movi	r2,40
 2020598:	98800035 	stwio	r2,0(r19)

        if (!ACK_judge_for_read( i2c_base)){
 202059c:	a009883a 	mov	r4,r20
 20205a0:	20203500 	call	2020350 <ACK_judge_for_read>
 20205a4:	102f883a 	mov	r23,r2
 20205a8:	10803fcc 	andi	r2,r2,255
 20205ac:	103ff11e 	bne	r2,zero,2020574 <_gp+0xffff2814>
            alt_printf("OC_I2C_Read err[10]\n");
 20205b0:	010080b4 	movhi	r4,514
 20205b4:	21133e04 	addi	r4,r4,19704
 20205b8:	20217000 	call	2021700 <alt_printf>
            return FALSE;
 20205bc:	b825883a 	mov	r18,r23
 20205c0:	00000406 	br	20205d4 <OC_I2C_Read_Continue+0xd8>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
 20205c4:	00801004 	movi	r2,64
 20205c8:	98800035 	stwio	r2,0(r19)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
 20205cc:	01003e84 	movi	r4,250
 20205d0:	20218880 	call	2021888 <usleep>
 //  alt_printf(" Read  [%02X] = %02Xh\n", sub_address, data);


   return TRUE;

}
 20205d4:	9005883a 	mov	r2,r18
 20205d8:	dfc00817 	ldw	ra,32(sp)
 20205dc:	ddc00717 	ldw	r23,28(sp)
 20205e0:	dd800617 	ldw	r22,24(sp)
 20205e4:	dd400517 	ldw	r21,20(sp)
 20205e8:	dd000417 	ldw	r20,16(sp)
 20205ec:	dcc00317 	ldw	r19,12(sp)
 20205f0:	dc800217 	ldw	r18,8(sp)
 20205f4:	dc400117 	ldw	r17,4(sp)
 20205f8:	dc000017 	ldw	r16,0(sp)
 20205fc:	dec00904 	addi	sp,sp,36
 2020600:	f800283a 	ret

02020604 <OC_I2CL_Write>:


//  size > 2Kb
bool  OC_I2CL_Write(alt_32 i2c_base,alt_u8 device_address,alt_u16 sub_address,alt_u8 *pData, int nWriteLength)
    {
 2020604:	defff704 	addi	sp,sp,-36
 2020608:	dd800615 	stw	r22,24(sp)
 202060c:	dd400515 	stw	r21,20(sp)
 2020610:	dcc00315 	stw	r19,12(sp)
 2020614:	dc400115 	stw	r17,4(sp)
 2020618:	dfc00815 	stw	ra,32(sp)
 202061c:	ddc00715 	stw	r23,28(sp)
 2020620:	dd000415 	stw	r20,16(sp)
 2020624:	dc800215 	stw	r18,8(sp)
 2020628:	dc000015 	stw	r16,0(sp)
 202062c:	2027883a 	mov	r19,r4
 2020630:	3023883a 	mov	r17,r6
 2020634:	382d883a 	mov	r22,r7
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 2020638:	25400304 	addi	r21,r4,12
 202063c:	29403fcc 	andi	r5,r5,255
 2020640:	a9400035 	stwio	r5,0(r21)
 2020644:	24800404 	addi	r18,r4,16
 2020648:	00802404 	movi	r2,144
 202064c:	90800035 	stwio	r2,0(r18)
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))//0x90
       return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 2020650:	20201e40 	call	20201e4 <ACK_check>
 2020654:	1021883a 	mov	r16,r2
 2020658:	10803fcc 	andi	r2,r2,255
 202065c:	1000031e 	bne	r2,zero,202066c <OC_I2CL_Write+0x68>
        alt_printf("OC_I2CL_Write err[0]\n");
 2020660:	010080b4 	movhi	r4,514
 2020664:	21134404 	addi	r4,r4,19728
 2020668:	00001706 	br	20206c8 <OC_I2CL_Write+0xc4>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 202066c:	88bfffcc 	andi	r2,r17,65535
 2020670:	1004d23a 	srli	r2,r2,8
 2020674:	a8800035 	stwio	r2,0(r21)
 2020678:	05000404 	movi	r20,16
 202067c:	95000035 	stwio	r20,0(r18)
   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
        return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 2020680:	9809883a 	mov	r4,r19
 2020684:	20201e40 	call	20201e4 <ACK_check>
 2020688:	1021883a 	mov	r16,r2
 202068c:	10803fcc 	andi	r2,r2,255
 2020690:	1000031e 	bne	r2,zero,20206a0 <OC_I2CL_Write+0x9c>
        alt_printf("OC_I2CL_Write err[1]\n");
 2020694:	010080b4 	movhi	r4,514
 2020698:	21134a04 	addi	r4,r4,19752
 202069c:	00000a06 	br	20206c8 <OC_I2CL_Write+0xc4>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 20206a0:	8c403fcc 	andi	r17,r17,255
 20206a4:	ac400035 	stwio	r17,0(r21)
 20206a8:	95000035 	stwio	r20,0(r18)

   //set WR bits(bit4)
    Write32_Data( i2c_base, 4,0x10);

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 20206ac:	9809883a 	mov	r4,r19
 20206b0:	20201e40 	call	20201e4 <ACK_check>
 20206b4:	1021883a 	mov	r16,r2
 20206b8:	10803fcc 	andi	r2,r2,255
 20206bc:	1000041e 	bne	r2,zero,20206d0 <OC_I2CL_Write+0xcc>
        alt_printf("OC_I2CL_Write err[2]\n");
 20206c0:	010080b4 	movhi	r4,514
 20206c4:	21135004 	addi	r4,r4,19776
 20206c8:	20217000 	call	2021700 <alt_printf>
        return FALSE;
 20206cc:	00001506 	br	2020724 <OC_I2CL_Write+0x120>
    }
  //  alt_printf("\n receive ACK-reg low address! \n");

#if 1
    for( i=nWriteLength-1;i>=0;i--){
 20206d0:	dc400917 	ldw	r17,36(sp)
 20206d4:	8c7fffc4 	addi	r17,r17,-1
 20206d8:	88000e16 	blt	r17,zero,2020714 <OC_I2CL_Write+0x110>
        //set the txr reg data with the other data 8 bit LSB
        if (!Write32_Data( i2c_base, 3,*(pData+i)))
 20206dc:	b445883a 	add	r2,r22,r17
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 20206e0:	10800003 	ldbu	r2,0(r2)
 20206e4:	a8800035 	stwio	r2,0(r21)
 20206e8:	95000035 	stwio	r20,0(r18)
       //set STO and WR bits(bit7 and bit4)
        if (!Write32_Data( i2c_base, 4,0x10))
            return FALSE;

        //wait TIP bit go to 0 to end Tx
         if(!ACK_check( i2c_base)){
 20206ec:	9809883a 	mov	r4,r19
 20206f0:	20201e40 	call	20201e4 <ACK_check>
 20206f4:	102f883a 	mov	r23,r2
 20206f8:	10803fcc 	andi	r2,r2,255
 20206fc:	103ff51e 	bne	r2,zero,20206d4 <_gp+0xffff2974>
             alt_printf("OC_I2CL_Write err[3]\n");
 2020700:	010080b4 	movhi	r4,514
 2020704:	21135604 	addi	r4,r4,19800
 2020708:	20217000 	call	2021700 <alt_printf>
             return FALSE;
 202070c:	b821883a 	mov	r16,r23
 2020710:	00000406 	br	2020724 <OC_I2CL_Write+0x120>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 2020714:	00801004 	movi	r2,64
 2020718:	90800035 	stwio	r2,0(r18)
#endif
    if (!Write32_Data( i2c_base, 4,0x40))
         return FALSE;

     //OS_msleep(1);
      usleep(SLEEP_TIME);
 202071c:	01003e84 	movi	r4,250
 2020720:	20218880 	call	2021888 <usleep>
  //  alt_printf("\n receive ACK-data! \n");

     return TRUE;
}
 2020724:	8005883a 	mov	r2,r16
 2020728:	dfc00817 	ldw	ra,32(sp)
 202072c:	ddc00717 	ldw	r23,28(sp)
 2020730:	dd800617 	ldw	r22,24(sp)
 2020734:	dd400517 	ldw	r21,20(sp)
 2020738:	dd000417 	ldw	r20,16(sp)
 202073c:	dcc00317 	ldw	r19,12(sp)
 2020740:	dc800217 	ldw	r18,8(sp)
 2020744:	dc400117 	ldw	r17,4(sp)
 2020748:	dc000017 	ldw	r16,0(sp)
 202074c:	dec00904 	addi	sp,sp,36
 2020750:	f800283a 	ret

02020754 <OC_I2CL_Read>:

   return TRUE;

} */

bool  OC_I2CL_Read(alt_32 i2c_base,alt_u8 device_address, alt_u16 sub_address, alt_u8 *pData8, int nReadLength){
 2020754:	defff604 	addi	sp,sp,-40
 2020758:	df000815 	stw	fp,32(sp)
 202075c:	dd400515 	stw	r21,20(sp)
 2020760:	dd000415 	stw	r20,16(sp)
 2020764:	dcc00315 	stw	r19,12(sp)
 2020768:	dc800215 	stw	r18,8(sp)
 202076c:	dfc00915 	stw	ra,36(sp)
 2020770:	ddc00715 	stw	r23,28(sp)
 2020774:	dd800615 	stw	r22,24(sp)
 2020778:	dc400115 	stw	r17,4(sp)
 202077c:	dc000015 	stw	r16,0(sp)
 2020780:	2025883a 	mov	r18,r4
 2020784:	2827883a 	mov	r19,r5
 2020788:	3039883a 	mov	fp,r6
 202078c:	382b883a 	mov	r21,r7
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 2020790:	25000304 	addi	r20,r4,12
 2020794:	28803fcc 	andi	r2,r5,255
 2020798:	a0800035 	stwio	r2,0(r20)
 202079c:	24400404 	addi	r17,r4,16
 20207a0:	05c02404 	movi	r23,144
 20207a4:	8dc00035 	stwio	r23,0(r17)
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))
       return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 20207a8:	20201e40 	call	20201e4 <ACK_check>
 20207ac:	1021883a 	mov	r16,r2
 20207b0:	10803fcc 	andi	r2,r2,255
 20207b4:	1000031e 	bne	r2,zero,20207c4 <OC_I2CL_Read+0x70>
        alt_printf("OC_I2CL_Read err[0]\n");
 20207b8:	010080b4 	movhi	r4,514
 20207bc:	21135c04 	addi	r4,r4,19824
 20207c0:	00002506 	br	2020858 <OC_I2CL_Read+0x104>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 20207c4:	e0bfffcc 	andi	r2,fp,65535
 20207c8:	1004d23a 	srli	r2,r2,8
 20207cc:	a0800035 	stwio	r2,0(r20)
 20207d0:	05800404 	movi	r22,16
 20207d4:	8d800035 	stwio	r22,0(r17)
   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
        return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 20207d8:	9009883a 	mov	r4,r18
 20207dc:	20201e40 	call	20201e4 <ACK_check>
 20207e0:	1021883a 	mov	r16,r2
 20207e4:	10803fcc 	andi	r2,r2,255
 20207e8:	1000031e 	bne	r2,zero,20207f8 <OC_I2CL_Read+0xa4>
        alt_printf("OC_I2CL_Read err[1]\n");
 20207ec:	010080b4 	movhi	r4,514
 20207f0:	21136204 	addi	r4,r4,19848
 20207f4:	00001806 	br	2020858 <OC_I2CL_Read+0x104>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 20207f8:	e7003fcc 	andi	fp,fp,255
 20207fc:	a7000035 	stwio	fp,0(r20)
 2020800:	8d800035 	stwio	r22,0(r17)
   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
        return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 2020804:	9009883a 	mov	r4,r18
 2020808:	20201e40 	call	20201e4 <ACK_check>
 202080c:	1021883a 	mov	r16,r2
 2020810:	10803fcc 	andi	r2,r2,255
 2020814:	1000031e 	bne	r2,zero,2020824 <OC_I2CL_Read+0xd0>
        alt_printf("OC_I2CL_Read err[2]\n");
 2020818:	010080b4 	movhi	r4,514
 202081c:	21136804 	addi	r4,r4,19872
 2020820:	00000d06 	br	2020858 <OC_I2CL_Read+0x104>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 2020824:	9cc00054 	ori	r19,r19,1
 2020828:	9cc03fcc 	andi	r19,r19,255
 202082c:	a4c00035 	stwio	r19,0(r20)
 2020830:	8dc00035 	stwio	r23,0(r17)
   //set STA and WR bits(bit7 and bit4)
     if (!Write32_Data( i2c_base, 4,0x90))
         return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 2020834:	9009883a 	mov	r4,r18
 2020838:	20201e40 	call	20201e4 <ACK_check>
 202083c:	1021883a 	mov	r16,r2
 2020840:	10803fcc 	andi	r2,r2,255
 2020844:	10000226 	beq	r2,zero,2020850 <OC_I2CL_Read+0xfc>
 2020848:	0027883a 	mov	r19,zero
 202084c:	00000706 	br	202086c <OC_I2CL_Read+0x118>
        alt_printf("OC_I2CL_Read err[3]\n");
 2020850:	010080b4 	movhi	r4,514
 2020854:	21136e04 	addi	r4,r4,19896
 2020858:	20217000 	call	2021700 <alt_printf>
        return FALSE;
 202085c:	00001a06 	br	20208c8 <OC_I2CL_Read+0x174>
            alt_printf("OC_I2CL_Read err[4]\n");
            return FALSE;
        }
   // alt_printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 2020860:	a0800037 	ldwio	r2,0(r20)
        *(pData8+i) =  Data32 & 0xff;
 2020864:	a8800005 	stb	r2,0(r21)
 2020868:	ad400044 	addi	r21,r21,1
//   alt_printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
 202086c:	d8800a17 	ldw	r2,40(sp)
 2020870:	9880110e 	bge	r19,r2,20208b8 <OC_I2CL_Read+0x164>
  // alt_printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 2020874:	d8800a17 	ldw	r2,40(sp)
 2020878:	9cc00044 	addi	r19,r19,1
 202087c:	14c00226 	beq	r2,r19,2020888 <OC_I2CL_Read+0x134>
 2020880:	00800804 	movi	r2,32
 2020884:	00000106 	br	202088c <OC_I2CL_Read+0x138>
 2020888:	00800a04 	movi	r2,40
 202088c:	88800035 	stwio	r2,0(r17)

        if (!ACK_judge_for_read( i2c_base)){
 2020890:	9009883a 	mov	r4,r18
 2020894:	20203500 	call	2020350 <ACK_judge_for_read>
 2020898:	102f883a 	mov	r23,r2
 202089c:	10803fcc 	andi	r2,r2,255
 20208a0:	103fef1e 	bne	r2,zero,2020860 <_gp+0xffff2b00>
            alt_printf("OC_I2CL_Read err[4]\n");
 20208a4:	010080b4 	movhi	r4,514
 20208a8:	21137404 	addi	r4,r4,19920
 20208ac:	20217000 	call	2021700 <alt_printf>
            return FALSE;
 20208b0:	b821883a 	mov	r16,r23
 20208b4:	00000406 	br	20208c8 <OC_I2CL_Read+0x174>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
 20208b8:	00801004 	movi	r2,64
 20208bc:	88800035 	stwio	r2,0(r17)
#endif
   if (!Write32_Data( i2c_base, 4,0x40))
       return FALSE;

   //OS_msleep(1);
   usleep(SLEEP_TIME);
 20208c0:	01003e84 	movi	r4,250
 20208c4:	20218880 	call	2021888 <usleep>
   return TRUE;
}
 20208c8:	8005883a 	mov	r2,r16
 20208cc:	dfc00917 	ldw	ra,36(sp)
 20208d0:	df000817 	ldw	fp,32(sp)
 20208d4:	ddc00717 	ldw	r23,28(sp)
 20208d8:	dd800617 	ldw	r22,24(sp)
 20208dc:	dd400517 	ldw	r21,20(sp)
 20208e0:	dd000417 	ldw	r20,16(sp)
 20208e4:	dcc00317 	ldw	r19,12(sp)
 20208e8:	dc800217 	ldw	r18,8(sp)
 20208ec:	dc400117 	ldw	r17,4(sp)
 20208f0:	dc000017 	ldw	r16,0(sp)
 20208f4:	dec00a04 	addi	sp,sp,40
 20208f8:	f800283a 	ret

020208fc <ReverseUInt16>:
uint16_t ReverseUInt16(uint16_t x)
{
	uint16_t y;
	y = (x >> 8) & 0x00ff;
	y |= (x << 8) & 0xff00;
	return y;
 20208fc:	2004923a 	slli	r2,r4,8
 2020900:	213fffcc 	andi	r4,r4,65535
 2020904:	2008d23a 	srli	r4,r4,8
}
 2020908:	1104b03a 	or	r2,r2,r4
 202090c:	f800283a 	ret

02020910 <config>:
#define COM_JTAG		0
#define COM_FT232H		1

// Setup MIPI Bridge and Camera
bool config()
{
 2020910:	defffc04 	addi	sp,sp,-16
 2020914:	dc800215 	stw	r18,8(sp)
	//See OV8865 pag. 30/34 for power down sequence details
	// MIPI_PWDN_N = OV8865 PWDNB
	// MIPI_RESET_N = TC358748XBG RESX
	IOWR(MIPI_PWDN_N_BASE, 0x00, 0x00);
 2020918:	04808034 	movhi	r18,512
#define COM_JTAG		0
#define COM_FT232H		1

// Setup MIPI Bridge and Camera
bool config()
{
 202091c:	dfc00315 	stw	ra,12(sp)
 2020920:	dc400115 	stw	r17,4(sp)
 2020924:	dc000015 	stw	r16,0(sp)
	//See OV8865 pag. 30/34 for power down sequence details
	// MIPI_PWDN_N = OV8865 PWDNB
	// MIPI_RESET_N = TC358748XBG RESX
	IOWR(MIPI_PWDN_N_BASE, 0x00, 0x00);
 2020928:	94811c04 	addi	r18,r18,1136
 202092c:	90000035 	stwio	zero,0(r18)
	IOWR(MIPI_RESET_N_BASE, 0x00, 0x00);
 2020930:	04008034 	movhi	r16,512
 2020934:	84011804 	addi	r16,r16,1120
 2020938:	80000035 	stwio	zero,0(r16)
	usleep(2 * 1000);
 202093c:	0101f404 	movi	r4,2000
 2020940:	20218880 	call	2021888 <usleep>
	IOWR(MIPI_PWDN_N_BASE, 0x00, 0xFF);
 2020944:	04403fc4 	movi	r17,255
 2020948:	94400035 	stwio	r17,0(r18)
	usleep(2 * 1000);
 202094c:	0101f404 	movi	r4,2000
 2020950:	20218880 	call	2021888 <usleep>
	IOWR(MIPI_RESET_N_BASE, 0x00, 0xFF);
 2020954:	84400035 	stwio	r17,0(r16)
	usleep(2000);
 2020958:	0101f404 	movi	r4,2000
 202095c:	20218880 	call	2021888 <usleep>
	if(!oc_i2c_init_ex(I2C_OPENCORES_MIPI_BASE, ALT_CPU_FREQ, I2C_SPEED))
 2020960:	018001b4 	movhi	r6,6
 2020964:	01417db4 	movhi	r5,1526
 2020968:	01008034 	movhi	r4,512
 202096c:	3186a004 	addi	r6,r6,6784
 2020970:	29784004 	addi	r5,r5,-7936
 2020974:	21011004 	addi	r4,r4,1088
 2020978:	20200900 	call	2020090 <oc_i2c_init_ex>
 202097c:	10803fcc 	andi	r2,r2,255
 2020980:	1000021e 	bne	r2,zero,202098c <config+0x7c>
		return false;
 2020984:	0021883a 	mov	r16,zero
 2020988:	00001506 	br	20209e0 <config+0xd0>
	if(!mipi_bridge_init())
 202098c:	2020f600 	call	2020f60 <mipi_bridge_init>
 2020990:	10803fcc 	andi	r2,r2,255
 2020994:	103ffb26 	beq	r2,zero,2020984 <_gp+0xffff2c24>
		return false;
	usleep(500*1000);
 2020998:	01000234 	movhi	r4,8
 202099c:	21284804 	addi	r4,r4,-24288
 20209a0:	20218880 	call	2021888 <usleep>
	//if(!oc_i2c_uninit(I2C_OPENCORES_MIPI_BASE))
	//	return false;
	if(!oc_i2c_init_ex(I2C_OPENCORES_CAMERA_BASE, ALT_CPU_FREQ, I2C_SPEED))
 20209a4:	018001b4 	movhi	r6,6
 20209a8:	01417db4 	movhi	r5,1526
 20209ac:	01008034 	movhi	r4,512
 20209b0:	3186a004 	addi	r6,r6,6784
 20209b4:	29784004 	addi	r5,r5,-7936
 20209b8:	21010804 	addi	r4,r4,1056
 20209bc:	20200900 	call	2020090 <oc_i2c_init_ex>
 20209c0:	10803fcc 	andi	r2,r2,255
 20209c4:	103fef26 	beq	r2,zero,2020984 <_gp+0xffff2c24>
		return false;
	if(!mipi_camera_init())
 20209c8:	20211900 	call	2021190 <mipi_camera_init>
 20209cc:	1021883a 	mov	r16,r2
 20209d0:	10803fcc 	andi	r2,r2,255
 20209d4:	103feb26 	beq	r2,zero,2020984 <_gp+0xffff2c24>
		return false;
	usleep(1000);
 20209d8:	0100fa04 	movi	r4,1000
 20209dc:	20218880 	call	2021888 <usleep>
	//if(!oc_i2c_uninit(I2C_OPENCORES_CAMERA_BASE))
	//	return false;
	return true;
}
 20209e0:	8005883a 	mov	r2,r16
 20209e4:	dfc00317 	ldw	ra,12(sp)
 20209e8:	dc800217 	ldw	r18,8(sp)
 20209ec:	dc400117 	ldw	r17,4(sp)
 20209f0:	dc000017 	ldw	r16,0(sp)
 20209f4:	dec00404 	addi	sp,sp,16
 20209f8:	f800283a 	ret

020209fc <WaitFrame>:
// Wait until frame is captured
void WaitFrame()
{
 20209fc:	defffe04 	addi	sp,sp,-8
	uint32_t status = IORD(MIPI_BASE, 0x00);
 2020a00:	00c08034 	movhi	r3,512
	//	return false;
	return true;
}
// Wait until frame is captured
void WaitFrame()
{
 2020a04:	dfc00115 	stw	ra,4(sp)
 2020a08:	dc000015 	stw	r16,0(sp)
	uint32_t status = IORD(MIPI_BASE, 0x00);
 2020a0c:	18800037 	ldwio	r2,0(r3)
	while((status  & 0x02)== 0x00)
	{
		usleep(1000 * 5);
		status = (IORD(MIPI_BASE, 0x00) & 0x02);
 2020a10:	1821883a 	mov	r16,r3
}
// Wait until frame is captured
void WaitFrame()
{
	uint32_t status = IORD(MIPI_BASE, 0x00);
	while((status  & 0x02)== 0x00)
 2020a14:	1080008c 	andi	r2,r2,2
 2020a18:	1000051e 	bne	r2,zero,2020a30 <WaitFrame+0x34>
	{
		usleep(1000 * 5);
 2020a1c:	0104e204 	movi	r4,5000
 2020a20:	20218880 	call	2021888 <usleep>
		status = (IORD(MIPI_BASE, 0x00) & 0x02);
 2020a24:	80800037 	ldwio	r2,0(r16)
 2020a28:	1080008c 	andi	r2,r2,2
 2020a2c:	003ff906 	br	2020a14 <_gp+0xffff2cb4>
	}
}
 2020a30:	dfc00117 	ldw	ra,4(sp)
 2020a34:	dc000017 	ldw	r16,0(sp)
 2020a38:	dec00204 	addi	sp,sp,8
 2020a3c:	f800283a 	ret

02020a40 <main>:
int main()
{
	usleep(1000 * 100);
 2020a40:	010000b4 	movhi	r4,2
		usleep(1000 * 5);
		status = (IORD(MIPI_BASE, 0x00) & 0x02);
	}
}
int main()
{
 2020a44:	defff104 	addi	sp,sp,-60
	usleep(1000 * 100);
 2020a48:	2121a804 	addi	r4,r4,-31072
		usleep(1000 * 5);
		status = (IORD(MIPI_BASE, 0x00) & 0x02);
	}
}
int main()
{
 2020a4c:	dfc00e15 	stw	ra,56(sp)
 2020a50:	dc400615 	stw	r17,24(sp)
 2020a54:	df000d15 	stw	fp,52(sp)
 2020a58:	ddc00c15 	stw	r23,48(sp)
 2020a5c:	dd800b15 	stw	r22,44(sp)
 2020a60:	dd400a15 	stw	r21,40(sp)
 2020a64:	dd000915 	stw	r20,36(sp)
 2020a68:	dcc00815 	stw	r19,32(sp)
 2020a6c:	dc800715 	stw	r18,28(sp)
 2020a70:	dc000515 	stw	r16,20(sp)
	usleep(1000 * 100);
 2020a74:	20218880 	call	2021888 <usleep>
	if(!config())
 2020a78:	20209100 	call	2020910 <config>
 2020a7c:	04408034 	movhi	r17,512
 2020a80:	10803fcc 	andi	r2,r2,255
 2020a84:	8c410004 	addi	r17,r17,1024
 2020a88:	10007f26 	beq	r2,zero,2020c88 <main+0x248>
		IOWR(LED_BASE, 0x00, 0xFF);
		return 0;
	}

	// wait for one frame to adjust blc
	usleep(1000 * 500);
 2020a8c:	01000234 	movhi	r4,8
 2020a90:	21284804 	addi	r4,r4,-24288
 2020a94:	20218880 	call	2021888 <usleep>

	IOWR(LED_BASE, 0x00, 0x01);
 2020a98:	04000044 	movi	r16,1
 2020a9c:	8c000035 	stwio	r16,0(r17)
		return 0;
	}
	*/
	while(1){
		cmd = readByte();
		switch(cmd)
 2020aa0:	05c080b4 	movhi	r23,514
	// wait for one frame to adjust blc
	usleep(1000 * 500);

	IOWR(LED_BASE, 0x00, 0x01);
	uint16_t img_width = 3264;
	uint16_t img_height = 2448;
 2020aa4:	04826404 	movi	r18,2448

	// wait for one frame to adjust blc
	usleep(1000 * 500);

	IOWR(LED_BASE, 0x00, 0x01);
	uint16_t img_width = 3264;
 2020aa8:	04c33004 	movi	r19,3264
		return 0;
	}
	*/
	while(1){
		cmd = readByte();
		switch(cmd)
 2020aac:	05800404 	movi	r22,16
 2020ab0:	bdc2b604 	addi	r23,r23,2776
				img_height = readUInt16();
				writeByte(RESPONSE_OK);
				break;
			case CMD_RD_IMG:
				IOWR(LED_BASE, 0x00, 0x00);
				IOWR(MIPI_BASE, 0x00, 0x00000001);	// Stop capture request
 2020ab4:	05008034 	movhi	r20,512
		IOWR(LED_BASE, 0x00, 0xFF);
		return 0;
	}
	*/
	while(1){
		cmd = readByte();
 2020ab8:	20213dc0 	call	20213dc <readByte>
		switch(cmd)
 2020abc:	10bfffc4 	addi	r2,r2,-1
 2020ac0:	10803fcc 	andi	r2,r2,255
 2020ac4:	b0bffc36 	bltu	r22,r2,2020ab8 <_gp+0xffff2d58>
 2020ac8:	100490ba 	slli	r2,r2,2
 2020acc:	15c5883a 	add	r2,r2,r23
 2020ad0:	10800017 	ldw	r2,0(r2)
 2020ad4:	1000683a 	jmp	r2
 2020ad8:	02020b34 	movhi	r8,2092
 2020adc:	02020b4c 	andi	r8,zero,2093
 2020ae0:	02020ba0 	cmpeqi	r8,zero,2094
 2020ae4:	02020bcc 	andi	r8,zero,2095
 2020ae8:	02020bd4 	movui	r8,2095
 2020aec:	02020be8 	cmpgeui	r8,zero,2095
 2020af0:	02020bb4 	movhi	r8,2094
 2020af4:	02020b68 	cmpgeui	r8,zero,2093
 2020af8:	02020b84 	movi	r8,2094
 2020afc:	02020ab8 	rdprs	r8,zero,2090
 2020b00:	02020ab8 	rdprs	r8,zero,2090
 2020b04:	02020ab8 	rdprs	r8,zero,2090
 2020b08:	02020ab8 	rdprs	r8,zero,2090
 2020b0c:	02020ab8 	rdprs	r8,zero,2090
 2020b10:	02020ab8 	rdprs	r8,zero,2090
 2020b14:	02020b1c 	xori	r8,zero,2092
 2020b18:	02020b28 	cmpgeui	r8,zero,2092
		{
			case CMD_RD_COM:
				writeByte(com);
 2020b1c:	a9003fcc 	andi	r4,r21,255
 2020b20:	20213f40 	call	20213f4 <writeByte>
 2020b24:	00005506 	br	2020c7c <main+0x23c>
				writeByte(RESPONSE_OK);
				break;
			case CMD_WR_COM:
				com = readByte();
 2020b28:	20213dc0 	call	20213dc <readByte>
 2020b2c:	102b883a 	mov	r21,r2
 2020b30:	00005206 	br	2020c7c <main+0x23c>
				writeByte(RESPONSE_OK);
				break;
			case CMD_RD_REG:
				addr = readUInt16();
 2020b34:	20212d40 	call	20212d4 <readUInt16>
				reg = mipi_camera_reg_read(addr);
 2020b38:	113fffcc 	andi	r4,r2,65535
			case CMD_WR_COM:
				com = readByte();
				writeByte(RESPONSE_OK);
				break;
			case CMD_RD_REG:
				addr = readUInt16();
 2020b3c:	d880000d 	sth	r2,0(sp)
				reg = mipi_camera_reg_read(addr);
 2020b40:	2020ff80 	call	2020ff8 <mipi_camera_reg_read>
				writeByte(reg);
 2020b44:	11003fcc 	andi	r4,r2,255
 2020b48:	00004d06 	br	2020c80 <main+0x240>
				break;
			case CMD_WR_REG:
				addr = readUInt16();
 2020b4c:	20212d40 	call	20212d4 <readUInt16>
 2020b50:	d880000d 	sth	r2,0(sp)
				reg = readByte();
 2020b54:	20213dc0 	call	20213dc <readByte>
				mipi_camera_reg_write(addr, reg);
 2020b58:	d900000b 	ldhu	r4,0(sp)
 2020b5c:	11403fcc 	andi	r5,r2,255
 2020b60:	20210300 	call	2021030 <mipi_camera_reg_write>
				break;
 2020b64:	003fd406 	br	2020ab8 <_gp+0xffff2d58>
			case CMD_MIPI_RD_REG:
				addr = readUInt16();
 2020b68:	20212d40 	call	20212d4 <readUInt16>
				mipiReg = mipi_bridge_reg_read(addr);
 2020b6c:	113fffcc 	andi	r4,r2,65535
				addr = readUInt16();
				reg = readByte();
				mipi_camera_reg_write(addr, reg);
				break;
			case CMD_MIPI_RD_REG:
				addr = readUInt16();
 2020b70:	d880000d 	sth	r2,0(sp)
				mipiReg = mipi_bridge_reg_read(addr);
 2020b74:	2020f240 	call	2020f24 <mipi_bridge_reg_read>
				writeUInt16(mipiReg);
 2020b78:	113fffcc 	andi	r4,r2,65535
 2020b7c:	20213b80 	call	20213b8 <writeUInt16>
				break;
 2020b80:	003fcd06 	br	2020ab8 <_gp+0xffff2d58>
			case CMD_MIPI_WR_REG:
				addr = readUInt16();
 2020b84:	20212d40 	call	20212d4 <readUInt16>
 2020b88:	d880000d 	sth	r2,0(sp)
				mipiReg = readUInt16();
 2020b8c:	20212d40 	call	20212d4 <readUInt16>
				mipi_bridge_reg_write(addr, mipiReg);
 2020b90:	d900000b 	ldhu	r4,0(sp)
 2020b94:	117fffcc 	andi	r5,r2,65535
 2020b98:	2020eec0 	call	2020eec <mipi_bridge_reg_write>
				break;
 2020b9c:	003fc606 	br	2020ab8 <_gp+0xffff2d58>
			case CMD_WR_FOCUS:
				addr = readUInt16();
 2020ba0:	20212d40 	call	20212d4 <readUInt16>
				mipi_camera_reg_write_VCM149C(addr);
 2020ba4:	113fffcc 	andi	r4,r2,65535
				addr = readUInt16();
				mipiReg = readUInt16();
				mipi_bridge_reg_write(addr, mipiReg);
				break;
			case CMD_WR_FOCUS:
				addr = readUInt16();
 2020ba8:	d880000d 	sth	r2,0(sp)
				mipi_camera_reg_write_VCM149C(addr);
 2020bac:	202125c0 	call	202125c <mipi_camera_reg_write_VCM149C>
 2020bb0:	00003206 	br	2020c7c <main+0x23c>
				writeByte(RESPONSE_OK);
				break;
			case CMD_RD_FOCUS:
				addr = mipi_camera_reg_read_VCM149C();
 2020bb4:	20212280 	call	2021228 <mipi_camera_reg_read_VCM149C>
				writeBytes((byte*)&addr, 2);
 2020bb8:	01400084 	movi	r5,2
 2020bbc:	d809883a 	mov	r4,sp
				addr = readUInt16();
				mipi_camera_reg_write_VCM149C(addr);
				writeByte(RESPONSE_OK);
				break;
			case CMD_RD_FOCUS:
				addr = mipi_camera_reg_read_VCM149C();
 2020bc0:	d880000d 	sth	r2,0(sp)
				writeBytes((byte*)&addr, 2);
 2020bc4:	20213700 	call	2021370 <writeBytes>
 2020bc8:	00002c06 	br	2020c7c <main+0x23c>
				writeByte(RESPONSE_OK);
				break;
			case CMD_RESET_REG:
				mipi_camera_init();
 2020bcc:	20211900 	call	2021190 <mipi_camera_init>
 2020bd0:	00002a06 	br	2020c7c <main+0x23c>
				writeByte(RESPONSE_OK);
				break;
			case CMD_CONFIG:
				img_width = readUInt16();
 2020bd4:	20212d40 	call	20212d4 <readUInt16>
 2020bd8:	1027883a 	mov	r19,r2
				img_height = readUInt16();
 2020bdc:	20212d40 	call	20212d4 <readUInt16>
 2020be0:	1025883a 	mov	r18,r2
 2020be4:	00002506 	br	2020c7c <main+0x23c>
				writeByte(RESPONSE_OK);
				break;
			case CMD_RD_IMG:
				IOWR(LED_BASE, 0x00, 0x00);
 2020be8:	88000035 	stwio	zero,0(r17)
				IOWR(MIPI_BASE, 0x00, 0x00000001);	// Stop capture request
 2020bec:	a4000035 	stwio	r16,0(r20)
				WaitFrame();
 2020bf0:	20209fc0 	call	20209fc <WaitFrame>
				switch(com)
 2020bf4:	a8803fcc 	andi	r2,r21,255
 2020bf8:	10000826 	beq	r2,zero,2020c1c <main+0x1dc>
 2020bfc:	14001d1e 	bne	r2,r16,2020c74 <main+0x234>
						writeBytes(bytes, img_width * 2);
					}
					break;
				case COM_FT232H:
					// send the whole frame
					ft232h_write_bytes(0, img_width*img_height*2);
 2020c00:	917fffcc 	andi	r5,r18,65535
 2020c04:	993fffcc 	andi	r4,r19,65535
 2020c08:	20215b00 	call	20215b0 <__mulsi3>
 2020c0c:	108b883a 	add	r5,r2,r2
 2020c10:	0009883a 	mov	r4,zero
 2020c14:	2020dfc0 	call	2020dfc <ft232h_write_bytes>
					break;
 2020c18:	00001606 	br	2020c74 <main+0x234>
 2020c1c:	98bfffcc 	andi	r2,r19,65535
 2020c20:	108d883a 	add	r6,r2,r2
 2020c24:	0085c83a 	sub	r2,zero,r2
 2020c28:	10b9883a 	add	fp,r2,r2
				case COM_JTAG:
					// send row by row
					for(int rowIndex=0;rowIndex<img_height;rowIndex++)
					{
						byte *bytes = (byte *)(SDRAM_BASE + (rowIndex * img_width * 2));
						writeBytes(bytes, img_width * 2);
 2020c2c:	0007883a 	mov	r3,zero
 2020c30:	0005883a 	mov	r2,zero
				WaitFrame();
				switch(com)
				{
				case COM_JTAG:
					// send row by row
					for(int rowIndex=0;rowIndex<img_height;rowIndex++)
 2020c34:	91ffffcc 	andi	r7,r18,65535
 2020c38:	1987883a 	add	r3,r3,r6
 2020c3c:	11c00d0e 	bge	r2,r7,2020c74 <main+0x234>
					{
						byte *bytes = (byte *)(SDRAM_BASE + (rowIndex * img_width * 2));
						writeBytes(bytes, img_width * 2);
 2020c40:	300b883a 	mov	r5,r6
 2020c44:	1f09883a 	add	r4,r3,fp
 2020c48:	d8800215 	stw	r2,8(sp)
 2020c4c:	d8c00115 	stw	r3,4(sp)
 2020c50:	d9800315 	stw	r6,12(sp)
 2020c54:	d9c00415 	stw	r7,16(sp)
 2020c58:	20213700 	call	2021370 <writeBytes>
				WaitFrame();
				switch(com)
				{
				case COM_JTAG:
					// send row by row
					for(int rowIndex=0;rowIndex<img_height;rowIndex++)
 2020c5c:	d8800217 	ldw	r2,8(sp)
 2020c60:	d9c00417 	ldw	r7,16(sp)
 2020c64:	d9800317 	ldw	r6,12(sp)
 2020c68:	10800044 	addi	r2,r2,1
 2020c6c:	d8c00117 	ldw	r3,4(sp)
 2020c70:	003ff106 	br	2020c38 <_gp+0xffff2ed8>
				case COM_FT232H:
					// send the whole frame
					ft232h_write_bytes(0, img_width*img_height*2);
					break;
				}
				IOWR(MIPI_BASE, 0x00, 0x00000000);	// Start capture request
 2020c74:	a0000035 	stwio	zero,0(r20)
				IOWR(LED_BASE, 0x00, 0x01);
 2020c78:	8c000035 	stwio	r16,0(r17)
				writeByte(RESPONSE_OK);
 2020c7c:	01002a84 	movi	r4,170
 2020c80:	20213f40 	call	20213f4 <writeByte>
				break;
 2020c84:	003f8c06 	br	2020ab8 <_gp+0xffff2d58>
int main()
{
	usleep(1000 * 100);
	if(!config())
	{
		IOWR(LED_BASE, 0x00, 0xFF);
 2020c88:	00803fc4 	movi	r2,255
 2020c8c:	88800035 	stwio	r2,0(r17)
				writeByte(RESPONSE_OK);
				break;
		}
	};
	return 0;
}
 2020c90:	0005883a 	mov	r2,zero
 2020c94:	dfc00e17 	ldw	ra,56(sp)
 2020c98:	df000d17 	ldw	fp,52(sp)
 2020c9c:	ddc00c17 	ldw	r23,48(sp)
 2020ca0:	dd800b17 	ldw	r22,44(sp)
 2020ca4:	dd400a17 	ldw	r21,40(sp)
 2020ca8:	dd000917 	ldw	r20,36(sp)
 2020cac:	dcc00817 	ldw	r19,32(sp)
 2020cb0:	dc800717 	ldw	r18,28(sp)
 2020cb4:	dc400617 	ldw	r17,24(sp)
 2020cb8:	dc000517 	ldw	r16,20(sp)
 2020cbc:	dec00f04 	addi	sp,sp,60
 2020cc0:	f800283a 	ret

02020cc4 <ft232h_send_byte>:
#include "ft232h.h"

void ft232h_send_byte(uint8_t data)
{
	// Wait that nTXE is low (data can be written)
	while((IORD_8DIRECT(FT232H_BASE, FT232H_CTRL_REG) & FT232H_CTRL_TXE)){}
 2020cc4:	01408034 	movhi	r5,512
 2020cc8:	29410444 	addi	r5,r5,1041
 2020ccc:	28800023 	ldbuio	r2,0(r5)
 2020cd0:	00c08034 	movhi	r3,512
 2020cd4:	1080080c 	andi	r2,r2,32
 2020cd8:	18c10444 	addi	r3,r3,1041
 2020cdc:	103ffb1e 	bne	r2,zero,2020ccc <_gp+0xffff2f6c>

	// Set Data to Write
	IOWR_8DIRECT(FT232H_BASE, FT232H_DATA_REG, data);
 2020ce0:	00808034 	movhi	r2,512
 2020ce4:	10810404 	addi	r2,r2,1040
 2020ce8:	11000025 	stbio	r4,0(r2)

	// Set Write Enable
	IOWR_8DIRECT(FT232H_BASE, FT232H_CTRL_REG, FT232H_CTRL_WE);
 2020cec:	00bfe004 	movi	r2,-128
 2020cf0:	18800025 	stbio	r2,0(r3)

	// Wait that Write is complete
	while((IORD_8DIRECT(FT232H_BASE, FT232H_CTRL_REG) & FT232H_CTRL_WE)){}
 2020cf4:	18800023 	ldbuio	r2,0(r3)
 2020cf8:	1080200c 	andi	r2,r2,128
 2020cfc:	103ffd1e 	bne	r2,zero,2020cf4 <_gp+0xffff2f94>
}
 2020d00:	f800283a 	ret

02020d04 <ft232h_read_byte>:

uint8_t ft232h_read_byte()
{
	// Wait that nRXF is low (there is data available)
	while((IORD_8DIRECT(FT232H_BASE, FT232H_CTRL_REG) & FT232H_CTRL_RXF)){}
 2020d04:	01008034 	movhi	r4,512
 2020d08:	21010444 	addi	r4,r4,1041
 2020d0c:	20800023 	ldbuio	r2,0(r4)
 2020d10:	00c08034 	movhi	r3,512
 2020d14:	1080040c 	andi	r2,r2,16
 2020d18:	18c10444 	addi	r3,r3,1041
 2020d1c:	103ffb1e 	bne	r2,zero,2020d0c <_gp+0xffff2fac>

	// Set Read Enable
	IOWR_8DIRECT(FT232H_BASE, FT232H_CTRL_REG, FT232H_CTRL_RE);
 2020d20:	00801004 	movi	r2,64
 2020d24:	18800025 	stbio	r2,0(r3)

	// Wait that Read is complete
	while((IORD_8DIRECT(FT232H_BASE, FT232H_CTRL_REG) & FT232H_CTRL_RE)){}
 2020d28:	18800023 	ldbuio	r2,0(r3)
 2020d2c:	1080100c 	andi	r2,r2,64
 2020d30:	103ffd1e 	bne	r2,zero,2020d28 <_gp+0xffff2fc8>

	// Read Result
	uint8_t data = IORD_8DIRECT(FT232H_BASE, FT232H_DATA_REG);
	return data;
}
 2020d34:	00808034 	movhi	r2,512
 2020d38:	10810404 	addi	r2,r2,1040
 2020d3c:	10800023 	ldbuio	r2,0(r2)
 2020d40:	f800283a 	ret

02020d44 <ft232h_read_bytes>:

uint8_t ft232h_read_bytes(uint32_t data_index, uint32_t data_lenght)
{
	// Wait that nRXF is low (there is data available)
	while((IORD_8DIRECT(FT232H_BASE, FT232H_CTRL_REG) & FT232H_CTRL_RXF)){}
 2020d44:	01808034 	movhi	r6,512
 2020d48:	31810444 	addi	r6,r6,1041
 2020d4c:	30800023 	ldbuio	r2,0(r6)
 2020d50:	00c08034 	movhi	r3,512
 2020d54:	1080040c 	andi	r2,r2,16
 2020d58:	18c10444 	addi	r3,r3,1041
 2020d5c:	103ffb1e 	bne	r2,zero,2020d4c <_gp+0xffff2fec>

	// Set Data Index
	IOWR_8DIRECT(FT232H_BASE, FT232H_DI0_REG, data_index & 0xFF);
 2020d60:	00808034 	movhi	r2,512
 2020d64:	10810584 	addi	r2,r2,1046
 2020d68:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(FT232H_BASE, FT232H_DI1_REG, (data_index >> 8) & 0xFF);
 2020d6c:	200cd23a 	srli	r6,r4,8
 2020d70:	00808034 	movhi	r2,512
 2020d74:	108105c4 	addi	r2,r2,1047
 2020d78:	11800025 	stbio	r6,0(r2)
	IOWR_8DIRECT(FT232H_BASE, FT232H_DI2_REG, (data_index >> 16) & 0xFF);
 2020d7c:	200cd43a 	srli	r6,r4,16
 2020d80:	00808034 	movhi	r2,512
 2020d84:	10810604 	addi	r2,r2,1048
 2020d88:	11800025 	stbio	r6,0(r2)
	IOWR_8DIRECT(FT232H_BASE, FT232H_DI3_REG, (data_index >> 24) & 0xFF);
 2020d8c:	2008d63a 	srli	r4,r4,24
 2020d90:	00808034 	movhi	r2,512
 2020d94:	10810644 	addi	r2,r2,1049
 2020d98:	11000025 	stbio	r4,0(r2)

	// Set Data Length
	IOWR_8DIRECT(FT232H_BASE, FT232H_DL0_REG, data_lenght & 0xFF);
 2020d9c:	00808034 	movhi	r2,512
 2020da0:	10810484 	addi	r2,r2,1042
 2020da4:	11400025 	stbio	r5,0(r2)
	IOWR_8DIRECT(FT232H_BASE, FT232H_DL1_REG, (data_lenght >> 8) & 0xFF);
 2020da8:	2808d23a 	srli	r4,r5,8
 2020dac:	00808034 	movhi	r2,512
 2020db0:	108104c4 	addi	r2,r2,1043
 2020db4:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(FT232H_BASE, FT232H_DL2_REG, (data_lenght >> 16) & 0xFF);
 2020db8:	2808d43a 	srli	r4,r5,16
 2020dbc:	00808034 	movhi	r2,512
 2020dc0:	10810504 	addi	r2,r2,1044
 2020dc4:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(FT232H_BASE, FT232H_DL3_REG, (data_lenght >> 24) & 0xFF);
 2020dc8:	280ad63a 	srli	r5,r5,24
 2020dcc:	00808034 	movhi	r2,512
 2020dd0:	10810544 	addi	r2,r2,1045
 2020dd4:	11400025 	stbio	r5,0(r2)

	// Set Read Enable
	IOWR_8DIRECT(FT232H_BASE, FT232H_CTRL_REG, FT232H_CTRL_RE);
 2020dd8:	00801004 	movi	r2,64
 2020ddc:	18800025 	stbio	r2,0(r3)

	// Wait that Read is complete
	while((IORD_8DIRECT(FT232H_BASE, FT232H_CTRL_REG) & FT232H_CTRL_RE)){}
 2020de0:	18800023 	ldbuio	r2,0(r3)
 2020de4:	1080100c 	andi	r2,r2,64
 2020de8:	103ffd1e 	bne	r2,zero,2020de0 <_gp+0xffff3080>

	// Read Result
	uint8_t data = IORD_8DIRECT(FT232H_BASE, FT232H_DATA_REG);
	return data;
}
 2020dec:	00808034 	movhi	r2,512
 2020df0:	10810404 	addi	r2,r2,1040
 2020df4:	10800023 	ldbuio	r2,0(r2)
 2020df8:	f800283a 	ret

02020dfc <ft232h_write_bytes>:

void ft232h_write_bytes(uint32_t data_index, uint32_t data_lenght)
{
	// Wait that nTXE is low (data can be written)
	while((IORD_8DIRECT(FT232H_BASE, FT232H_CTRL_REG) & FT232H_CTRL_TXE)){}
 2020dfc:	01808034 	movhi	r6,512
 2020e00:	31810444 	addi	r6,r6,1041
 2020e04:	30800023 	ldbuio	r2,0(r6)
 2020e08:	00c08034 	movhi	r3,512
 2020e0c:	1080080c 	andi	r2,r2,32
 2020e10:	18c10444 	addi	r3,r3,1041
 2020e14:	103ffb1e 	bne	r2,zero,2020e04 <_gp+0xffff30a4>

	// Set Data Index
	IOWR_8DIRECT(FT232H_BASE, FT232H_DI0_REG, data_index & 0xFF);
 2020e18:	00808034 	movhi	r2,512
 2020e1c:	10810584 	addi	r2,r2,1046
 2020e20:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(FT232H_BASE, FT232H_DI1_REG, (data_index >> 8) & 0xFF);
 2020e24:	200cd23a 	srli	r6,r4,8
 2020e28:	00808034 	movhi	r2,512
 2020e2c:	108105c4 	addi	r2,r2,1047
 2020e30:	11800025 	stbio	r6,0(r2)
	IOWR_8DIRECT(FT232H_BASE, FT232H_DI2_REG, (data_index >> 16) & 0xFF);
 2020e34:	200cd43a 	srli	r6,r4,16
 2020e38:	00808034 	movhi	r2,512
 2020e3c:	10810604 	addi	r2,r2,1048
 2020e40:	11800025 	stbio	r6,0(r2)
	IOWR_8DIRECT(FT232H_BASE, FT232H_DI3_REG, (data_index >> 24) & 0xFF);
 2020e44:	2008d63a 	srli	r4,r4,24
 2020e48:	00808034 	movhi	r2,512
 2020e4c:	10810644 	addi	r2,r2,1049
 2020e50:	11000025 	stbio	r4,0(r2)

	// Set Data Length
	IOWR_8DIRECT(FT232H_BASE, FT232H_DL0_REG, data_lenght & 0xFF);
 2020e54:	00808034 	movhi	r2,512
 2020e58:	10810484 	addi	r2,r2,1042
 2020e5c:	11400025 	stbio	r5,0(r2)
	IOWR_8DIRECT(FT232H_BASE, FT232H_DL1_REG, (data_lenght >> 8) & 0xFF);
 2020e60:	2808d23a 	srli	r4,r5,8
 2020e64:	00808034 	movhi	r2,512
 2020e68:	108104c4 	addi	r2,r2,1043
 2020e6c:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(FT232H_BASE, FT232H_DL2_REG, (data_lenght >> 16) & 0xFF);
 2020e70:	2808d43a 	srli	r4,r5,16
 2020e74:	00808034 	movhi	r2,512
 2020e78:	10810504 	addi	r2,r2,1044
 2020e7c:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(FT232H_BASE, FT232H_DL3_REG, (data_lenght >> 24) & 0xFF);
 2020e80:	280ad63a 	srli	r5,r5,24
 2020e84:	00808034 	movhi	r2,512
 2020e88:	10810544 	addi	r2,r2,1045
 2020e8c:	11400025 	stbio	r5,0(r2)

	// Set Write Enable
	IOWR_8DIRECT(FT232H_BASE, FT232H_CTRL_REG, FT232H_CTRL_WE);
 2020e90:	00bfe004 	movi	r2,-128
 2020e94:	18800025 	stbio	r2,0(r3)

	// Wait that Write is complete
	while((IORD_8DIRECT(FT232H_BASE, FT232H_CTRL_REG) & FT232H_CTRL_WE)){}
 2020e98:	18800023 	ldbuio	r2,0(r3)
 2020e9c:	1080200c 	andi	r2,r2,128
 2020ea0:	103ffd1e 	bne	r2,zero,2020e98 <_gp+0xffff3138>

}
 2020ea4:	f800283a 	ret

02020ea8 <ft232h_send_string>:

void ft232h_send_string(char* string)
{
 2020ea8:	defffe04 	addi	sp,sp,-8
 2020eac:	dc000015 	stw	r16,0(sp)
 2020eb0:	dfc00115 	stw	ra,4(sp)
 2020eb4:	2021883a 	mov	r16,r4
	while(*string)
 2020eb8:	81000003 	ldbu	r4,0(r16)
 2020ebc:	20803fcc 	andi	r2,r4,255
 2020ec0:	1080201c 	xori	r2,r2,128
 2020ec4:	10bfe004 	addi	r2,r2,-128
 2020ec8:	10000426 	beq	r2,zero,2020edc <ft232h_send_string+0x34>
	{
		ft232h_send_byte(*string);
 2020ecc:	21003fcc 	andi	r4,r4,255
 2020ed0:	2020cc40 	call	2020cc4 <ft232h_send_byte>
		string++;
 2020ed4:	84000044 	addi	r16,r16,1
 2020ed8:	003ff706 	br	2020eb8 <_gp+0xffff3158>
	}
}
 2020edc:	dfc00117 	ldw	ra,4(sp)
 2020ee0:	dc000017 	ldw	r16,0(sp)
 2020ee4:	dec00204 	addi	sp,sp,8
 2020ee8:	f800283a 	ret

02020eec <mipi_bridge_reg_write>:
};

const int MIPI_REGISTERS_COUNT = sizeof(MIPI_REGISTERS) / sizeof(MipiRegister);

bool mipi_bridge_reg_write(uint16_t Addr, uint16_t Value)
{
 2020eec:	defffd04 	addi	sp,sp,-12
	return OC_I2CL_Write(I2C_OPENCORES_MIPI_BASE, MIPI_BRIDGE_I2C_ADDR, Addr, (alt_u8 *)&Value, sizeof(Value));
 2020ef0:	21bfffcc 	andi	r6,r4,65535
 2020ef4:	00800084 	movi	r2,2
 2020ef8:	01008034 	movhi	r4,512
};

const int MIPI_REGISTERS_COUNT = sizeof(MIPI_REGISTERS) / sizeof(MipiRegister);

bool mipi_bridge_reg_write(uint16_t Addr, uint16_t Value)
{
 2020efc:	d940010d 	sth	r5,4(sp)
	return OC_I2CL_Write(I2C_OPENCORES_MIPI_BASE, MIPI_BRIDGE_I2C_ADDR, Addr, (alt_u8 *)&Value, sizeof(Value));
 2020f00:	d8800015 	stw	r2,0(sp)
 2020f04:	d9c00104 	addi	r7,sp,4
 2020f08:	01400704 	movi	r5,28
 2020f0c:	21011004 	addi	r4,r4,1088
};

const int MIPI_REGISTERS_COUNT = sizeof(MIPI_REGISTERS) / sizeof(MipiRegister);

bool mipi_bridge_reg_write(uint16_t Addr, uint16_t Value)
{
 2020f10:	dfc00215 	stw	ra,8(sp)
	return OC_I2CL_Write(I2C_OPENCORES_MIPI_BASE, MIPI_BRIDGE_I2C_ADDR, Addr, (alt_u8 *)&Value, sizeof(Value));
 2020f14:	20206040 	call	2020604 <OC_I2CL_Write>
}
 2020f18:	dfc00217 	ldw	ra,8(sp)
 2020f1c:	dec00304 	addi	sp,sp,12
 2020f20:	f800283a 	ret

02020f24 <mipi_bridge_reg_read>:

uint16_t mipi_bridge_reg_read(uint16_t Addr)
{
 2020f24:	defffd04 	addi	sp,sp,-12
	uint16_t value;
	OC_I2CL_Read(I2C_OPENCORES_MIPI_BASE,MIPI_BRIDGE_I2C_ADDR, Addr,(alt_u8 *)&value,sizeof(value));
 2020f28:	21bfffcc 	andi	r6,r4,65535
 2020f2c:	00800084 	movi	r2,2
 2020f30:	01008034 	movhi	r4,512
 2020f34:	d9c00104 	addi	r7,sp,4
 2020f38:	01400704 	movi	r5,28
 2020f3c:	d8800015 	stw	r2,0(sp)
 2020f40:	21011004 	addi	r4,r4,1088
{
	return OC_I2CL_Write(I2C_OPENCORES_MIPI_BASE, MIPI_BRIDGE_I2C_ADDR, Addr, (alt_u8 *)&Value, sizeof(Value));
}

uint16_t mipi_bridge_reg_read(uint16_t Addr)
{
 2020f44:	dfc00215 	stw	ra,8(sp)
	uint16_t value;
	OC_I2CL_Read(I2C_OPENCORES_MIPI_BASE,MIPI_BRIDGE_I2C_ADDR, Addr,(alt_u8 *)&value,sizeof(value));
 2020f48:	20207540 	call	2020754 <OC_I2CL_Read>
	return ReverseUInt16(value);
 2020f4c:	d900010b 	ldhu	r4,4(sp)
 2020f50:	20208fc0 	call	20208fc <ReverseUInt16>
}
 2020f54:	dfc00217 	ldw	ra,8(sp)
 2020f58:	dec00304 	addi	sp,sp,12
 2020f5c:	f800283a 	ret

02020f60 <mipi_bridge_init>:

bool mipi_bridge_init(void)
{
 2020f60:	defffa04 	addi	sp,sp,-24
 2020f64:	dc000015 	stw	r16,0(sp)
 2020f68:	040080b4 	movhi	r16,514
 2020f6c:	84137a04 	addi	r16,r16,19944
 2020f70:	dd000415 	stw	r20,16(sp)
 2020f74:	dcc00315 	stw	r19,12(sp)
 2020f78:	dc800215 	stw	r18,8(sp)
 2020f7c:	dc400115 	stw	r17,4(sp)
 2020f80:	dfc00515 	stw	ra,20(sp)
 2020f84:	0023883a 	mov	r17,zero
		printf("TC358748XBG Chip and Revision ID: 0x%04xh don't match 0x4401\n", chipID);
		return;
	}
	*/
	for(int i = 0; i < MIPI_REGISTERS_COUNT; i++){
		if (MIPI_REGISTERS[i].Addr == WRITE_DELAY)
 2020f88:	84ffff84 	addi	r19,r16,-2
 2020f8c:	053fffd4 	movui	r20,65535
	{
		printf("TC358748XBG Chip and Revision ID: 0x%04xh don't match 0x4401\n", chipID);
		return;
	}
	*/
	for(int i = 0; i < MIPI_REGISTERS_COUNT; i++){
 2020f90:	04801104 	movi	r18,68
		if (MIPI_REGISTERS[i].Addr == WRITE_DELAY)
 2020f94:	8cc5883a 	add	r2,r17,r19
 2020f98:	1100000b 	ldhu	r4,0(r2)
 2020f9c:	2500061e 	bne	r4,r20,2020fb8 <mipi_bridge_init+0x58>
		{
			usleep(MIPI_REGISTERS[i].Data * 1000);
 2020fa0:	8100000b 	ldhu	r4,0(r16)
 2020fa4:	0140fa04 	movi	r5,1000
 2020fa8:	20215b00 	call	20215b0 <__mulsi3>
 2020fac:	1009883a 	mov	r4,r2
 2020fb0:	20218880 	call	2021888 <usleep>
 2020fb4:	00000406 	br	2020fc8 <mipi_bridge_init+0x68>
		}
		else
		{
			if(!mipi_bridge_reg_write(MIPI_REGISTERS[i].Addr, MIPI_REGISTERS[i].Data))
 2020fb8:	8140000b 	ldhu	r5,0(r16)
 2020fbc:	2020eec0 	call	2020eec <mipi_bridge_reg_write>
 2020fc0:	10c03fcc 	andi	r3,r2,255
 2020fc4:	18000426 	beq	r3,zero,2020fd8 <mipi_bridge_init+0x78>
 2020fc8:	8c400104 	addi	r17,r17,4
 2020fcc:	84000104 	addi	r16,r16,4
	{
		printf("TC358748XBG Chip and Revision ID: 0x%04xh don't match 0x4401\n", chipID);
		return;
	}
	*/
	for(int i = 0; i < MIPI_REGISTERS_COUNT; i++){
 2020fd0:	8cbff01e 	bne	r17,r18,2020f94 <_gp+0xffff3234>
		{
			if(!mipi_bridge_reg_write(MIPI_REGISTERS[i].Addr, MIPI_REGISTERS[i].Data))
				return false;
		}
	}
	return true;
 2020fd4:	00800044 	movi	r2,1
}
 2020fd8:	dfc00517 	ldw	ra,20(sp)
 2020fdc:	dd000417 	ldw	r20,16(sp)
 2020fe0:	dcc00317 	ldw	r19,12(sp)
 2020fe4:	dc800217 	ldw	r18,8(sp)
 2020fe8:	dc400117 	ldw	r17,4(sp)
 2020fec:	dc000017 	ldw	r16,0(sp)
 2020ff0:	dec00604 	addi	sp,sp,24
 2020ff4:	f800283a 	ret

02020ff8 <mipi_camera_reg_read>:

		{OV8865_SC_CTRL0100, 0x01}, //; wake up, streaming
};

uint8_t mipi_camera_reg_read(uint16_t Addr)
{
 2020ff8:	defffd04 	addi	sp,sp,-12
	uint8_t value;
	OC_I2CL_Read(I2C_OPENCORES_CAMERA_BASE, MIPI_I2C_ADDR, Addr, (uint8_t *)&value, sizeof(value));
 2020ffc:	21bfffcc 	andi	r6,r4,65535
 2021000:	00800044 	movi	r2,1
 2021004:	01008034 	movhi	r4,512
 2021008:	d8800015 	stw	r2,0(sp)
 202100c:	d9c00104 	addi	r7,sp,4
 2021010:	01401b04 	movi	r5,108
 2021014:	21010804 	addi	r4,r4,1056

		{OV8865_SC_CTRL0100, 0x01}, //; wake up, streaming
};

uint8_t mipi_camera_reg_read(uint16_t Addr)
{
 2021018:	dfc00215 	stw	ra,8(sp)
	uint8_t value;
	OC_I2CL_Read(I2C_OPENCORES_CAMERA_BASE, MIPI_I2C_ADDR, Addr, (uint8_t *)&value, sizeof(value));
 202101c:	20207540 	call	2020754 <OC_I2CL_Read>
	return (value);
}
 2021020:	d8800103 	ldbu	r2,4(sp)
 2021024:	dfc00217 	ldw	ra,8(sp)
 2021028:	dec00304 	addi	sp,sp,12
 202102c:	f800283a 	ret

02021030 <mipi_camera_reg_write>:

bool mipi_camera_reg_write(uint16_t Addr, uint8_t Value)
{
 2021030:	defffd04 	addi	sp,sp,-12
	return OC_I2CL_Write(I2C_OPENCORES_CAMERA_BASE, MIPI_I2C_ADDR, Addr, (uint8_t *)&Value, sizeof(Value));
 2021034:	21bfffcc 	andi	r6,r4,65535
 2021038:	00800044 	movi	r2,1
 202103c:	01008034 	movhi	r4,512
	OC_I2CL_Read(I2C_OPENCORES_CAMERA_BASE, MIPI_I2C_ADDR, Addr, (uint8_t *)&value, sizeof(value));
	return (value);
}

bool mipi_camera_reg_write(uint16_t Addr, uint8_t Value)
{
 2021040:	d9400105 	stb	r5,4(sp)
	return OC_I2CL_Write(I2C_OPENCORES_CAMERA_BASE, MIPI_I2C_ADDR, Addr, (uint8_t *)&Value, sizeof(Value));
 2021044:	d8800015 	stw	r2,0(sp)
 2021048:	d9c00104 	addi	r7,sp,4
 202104c:	01401b04 	movi	r5,108
 2021050:	21010804 	addi	r4,r4,1056
	OC_I2CL_Read(I2C_OPENCORES_CAMERA_BASE, MIPI_I2C_ADDR, Addr, (uint8_t *)&value, sizeof(value));
	return (value);
}

bool mipi_camera_reg_write(uint16_t Addr, uint8_t Value)
{
 2021054:	dfc00215 	stw	ra,8(sp)
	return OC_I2CL_Write(I2C_OPENCORES_CAMERA_BASE, MIPI_I2C_ADDR, Addr, (uint8_t *)&Value, sizeof(Value));
 2021058:	20206040 	call	2020604 <OC_I2CL_Write>
}
 202105c:	dfc00217 	ldw	ra,8(sp)
 2021060:	dec00304 	addi	sp,sp,12
 2021064:	f800283a 	ret

02021068 <mipi_camera_binning>:

void mipi_camera_binning(uint8_t level)
{
 2021068:	defffd04 	addi	sp,sp,-12
 202106c:	dc400115 	stw	r17,4(sp)
 2021070:	dc000015 	stw	r16,0(sp)
 2021074:	2023883a 	mov	r17,r4
 2021078:	dfc00215 	stw	ra,8(sp)
	if(level <= 1) level = 1;
 202107c:	21003fcc 	andi	r4,r4,255
 2021080:	04000044 	movi	r16,1
 2021084:	8100342e 	bgeu	r16,r4,2021158 <mipi_camera_binning+0xf0>
	if(level >= 3) level = 3;
 2021088:	04000084 	movi	r16,2
 202108c:	24000126 	beq	r4,r16,2021094 <mipi_camera_binning+0x2c>
 2021090:	044000c4 	movi	r17,3
	mipi_camera_reg_write(OV8865_SC_CTRL0100, 0x00);
 2021094:	000b883a 	mov	r5,zero
 2021098:	01004004 	movi	r4,256
		mipi_camera_reg_write(0x382a, 0x01);
		mipi_camera_reg_write(0x382b, 0x01);
		mipi_camera_reg_write(OV8865_BLC_NUM_OPTION, 8);
		mipi_camera_reg_write(OV8865_ZLINE_NUM_OPTION, 2);
	}
	else if(level == 2){
 202109c:	8c403fcc 	andi	r17,r17,255

void mipi_camera_binning(uint8_t level)
{
	if(level <= 1) level = 1;
	if(level >= 3) level = 3;
	mipi_camera_reg_write(OV8865_SC_CTRL0100, 0x00);
 20210a0:	20210300 	call	2021030 <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382a, 0x01);
		mipi_camera_reg_write(0x382b, 0x01);
		mipi_camera_reg_write(OV8865_BLC_NUM_OPTION, 8);
		mipi_camera_reg_write(OV8865_ZLINE_NUM_OPTION, 2);
	}
	else if(level == 2){
 20210a4:	8c00111e 	bne	r17,r16,20210ec <mipi_camera_binning+0x84>
		// 2x2 binning
		mipi_camera_reg_write(0x3814, 0x03);
 20210a8:	014000c4 	movi	r5,3
 20210ac:	010e0504 	movi	r4,14356
 20210b0:	20210300 	call	2021030 <mipi_camera_reg_write>
		mipi_camera_reg_write(0x3815, 0x01);
 20210b4:	01400044 	movi	r5,1
 20210b8:	010e0544 	movi	r4,14357
 20210bc:	20210300 	call	2021030 <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382a, 0x03);
 20210c0:	014000c4 	movi	r5,3
 20210c4:	010e0a84 	movi	r4,14378
 20210c8:	20210300 	call	2021030 <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382b, 0x01);
 20210cc:	01400044 	movi	r5,1
 20210d0:	010e0ac4 	movi	r4,14379
 20210d4:	20210300 	call	2021030 <mipi_camera_reg_write>
		mipi_camera_reg_write(OV8865_BLC_NUM_OPTION, 4);
 20210d8:	01400104 	movi	r5,4
 20210dc:	010e0c04 	movi	r4,14384
 20210e0:	20210300 	call	2021030 <mipi_camera_reg_write>
		mipi_camera_reg_write(OV8865_ZLINE_NUM_OPTION, 1);
 20210e4:	01400044 	movi	r5,1
 20210e8:	00001006 	br	202112c <mipi_camera_binning+0xc4>
	}
	else if(level == 3){
		// 4x4 binning
		mipi_camera_reg_write(0x3814, 0x07);
 20210ec:	014001c4 	movi	r5,7
 20210f0:	010e0504 	movi	r4,14356
 20210f4:	20210300 	call	2021030 <mipi_camera_reg_write>
		mipi_camera_reg_write(0x3815, 0x01);
 20210f8:	01400044 	movi	r5,1
 20210fc:	010e0544 	movi	r4,14357
 2021100:	20210300 	call	2021030 <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382a, 0x07);
 2021104:	014001c4 	movi	r5,7
 2021108:	010e0a84 	movi	r4,14378
 202110c:	20210300 	call	2021030 <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382b, 0x01);
 2021110:	01400044 	movi	r5,1
 2021114:	010e0ac4 	movi	r4,14379
 2021118:	20210300 	call	2021030 <mipi_camera_reg_write>
		mipi_camera_reg_write(OV8865_BLC_NUM_OPTION, 8);
 202111c:	01400204 	movi	r5,8
 2021120:	010e0c04 	movi	r4,14384
 2021124:	20210300 	call	2021030 <mipi_camera_reg_write>
		mipi_camera_reg_write(OV8865_ZLINE_NUM_OPTION, 2);
 2021128:	01400084 	movi	r5,2
 202112c:	010e0d84 	movi	r4,14390
 2021130:	20210300 	call	2021030 <mipi_camera_reg_write>
	}
	usleep(10000);
 2021134:	0109c404 	movi	r4,10000
 2021138:	20218880 	call	2021888 <usleep>
	mipi_camera_reg_write(OV8865_SC_CTRL0100, 0x01);
 202113c:	01400044 	movi	r5,1
 2021140:	01004004 	movi	r4,256
}
 2021144:	dfc00217 	ldw	ra,8(sp)
 2021148:	dc400117 	ldw	r17,4(sp)
 202114c:	dc000017 	ldw	r16,0(sp)
 2021150:	dec00304 	addi	sp,sp,12
		mipi_camera_reg_write(0x382b, 0x01);
		mipi_camera_reg_write(OV8865_BLC_NUM_OPTION, 8);
		mipi_camera_reg_write(OV8865_ZLINE_NUM_OPTION, 2);
	}
	usleep(10000);
	mipi_camera_reg_write(OV8865_SC_CTRL0100, 0x01);
 2021154:	20210301 	jmpi	2021030 <mipi_camera_reg_write>

void mipi_camera_binning(uint8_t level)
{
	if(level <= 1) level = 1;
	if(level >= 3) level = 3;
	mipi_camera_reg_write(OV8865_SC_CTRL0100, 0x00);
 2021158:	000b883a 	mov	r5,zero
 202115c:	01004004 	movi	r4,256
 2021160:	20210300 	call	2021030 <mipi_camera_reg_write>
	if(level == 1){
		// no binning
		mipi_camera_reg_write(0x3814, 0x01);
 2021164:	800b883a 	mov	r5,r16
 2021168:	010e0504 	movi	r4,14356
 202116c:	20210300 	call	2021030 <mipi_camera_reg_write>
		mipi_camera_reg_write(0x3815, 0x01);
 2021170:	800b883a 	mov	r5,r16
 2021174:	010e0544 	movi	r4,14357
 2021178:	20210300 	call	2021030 <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382a, 0x01);
 202117c:	800b883a 	mov	r5,r16
 2021180:	010e0a84 	movi	r4,14378
 2021184:	20210300 	call	2021030 <mipi_camera_reg_write>
		mipi_camera_reg_write(0x382b, 0x01);
 2021188:	800b883a 	mov	r5,r16
 202118c:	003fe106 	br	2021114 <_gp+0xffff33b4>

02021190 <mipi_camera_init>:
	usleep(10000);
	mipi_camera_reg_write(OV8865_SC_CTRL0100, 0x01);
}

bool mipi_camera_init(void)
{
 2021190:	defffa04 	addi	sp,sp,-24
 2021194:	dc000015 	stw	r16,0(sp)
 2021198:	040080b4 	movhi	r16,514
 202119c:	84138b04 	addi	r16,r16,20012
 20211a0:	dd000415 	stw	r20,16(sp)
 20211a4:	dcc00315 	stw	r19,12(sp)
 20211a8:	dc800215 	stw	r18,8(sp)
 20211ac:	dc400115 	stw	r17,4(sp)
 20211b0:	dfc00515 	stw	ra,20(sp)
 20211b4:	0023883a 	mov	r17,zero
	const int num = sizeof(CAMERA_REGISTERS)/sizeof(CameraRegister);
	for(int i=0; i<num; i++){
		if (CAMERA_REGISTERS[i].Addr == TIME_DELAY)
 20211b8:	84ffff84 	addi	r19,r16,-2
 20211bc:	053fffd4 	movui	r20,65535
}

bool mipi_camera_init(void)
{
	const int num = sizeof(CAMERA_REGISTERS)/sizeof(CameraRegister);
	for(int i=0; i<num; i++){
 20211c0:	04814504 	movi	r18,1300
		if (CAMERA_REGISTERS[i].Addr == TIME_DELAY)
 20211c4:	8cc5883a 	add	r2,r17,r19
 20211c8:	1100000b 	ldhu	r4,0(r2)
 20211cc:	2500061e 	bne	r4,r20,20211e8 <mipi_camera_init+0x58>
		{
			usleep(CAMERA_REGISTERS[i].Data * 100);
 20211d0:	81000003 	ldbu	r4,0(r16)
 20211d4:	01401904 	movi	r5,100
 20211d8:	20215b00 	call	20215b0 <__mulsi3>
 20211dc:	1009883a 	mov	r4,r2
 20211e0:	20218880 	call	2021888 <usleep>
 20211e4:	00000406 	br	20211f8 <mipi_camera_init+0x68>
		}
		else
		{
			if(!mipi_camera_reg_write(CAMERA_REGISTERS[i].Addr, CAMERA_REGISTERS[i].Data))
 20211e8:	81400003 	ldbu	r5,0(r16)
 20211ec:	20210300 	call	2021030 <mipi_camera_reg_write>
 20211f0:	10c03fcc 	andi	r3,r2,255
 20211f4:	18000426 	beq	r3,zero,2021208 <mipi_camera_init+0x78>
 20211f8:	8c400104 	addi	r17,r17,4
 20211fc:	84000104 	addi	r16,r16,4
}

bool mipi_camera_init(void)
{
	const int num = sizeof(CAMERA_REGISTERS)/sizeof(CameraRegister);
	for(int i=0; i<num; i++){
 2021200:	8cbff01e 	bne	r17,r18,20211c4 <_gp+0xffff3464>
		{
			if(!mipi_camera_reg_write(CAMERA_REGISTERS[i].Addr, CAMERA_REGISTERS[i].Data))
				return false;
		}
	}
	return true;
 2021204:	00800044 	movi	r2,1
}
 2021208:	dfc00517 	ldw	ra,20(sp)
 202120c:	dd000417 	ldw	r20,16(sp)
 2021210:	dcc00317 	ldw	r19,12(sp)
 2021214:	dc800217 	ldw	r18,8(sp)
 2021218:	dc400117 	ldw	r17,4(sp)
 202121c:	dc000017 	ldw	r16,0(sp)
 2021220:	dec00604 	addi	sp,sp,24
 2021224:	f800283a 	ret

02021228 <mipi_camera_reg_read_VCM149C>:

uint16_t mipi_camera_reg_read_VCM149C()
{
 2021228:	defffe04 	addi	sp,sp,-8
	uint16_t focus;
	OC_I2C_Read_Continue(I2C_OPENCORES_CAMERA_BASE, MIPI_AF_I2C_ADDR, (uint8_t *)&focus, sizeof(focus));
 202122c:	01008034 	movhi	r4,512
 2021230:	01c00084 	movi	r7,2
 2021234:	d80d883a 	mov	r6,sp
 2021238:	01400604 	movi	r5,24
 202123c:	21010804 	addi	r4,r4,1056
	}
	return true;
}

uint16_t mipi_camera_reg_read_VCM149C()
{
 2021240:	dfc00115 	stw	ra,4(sp)
	uint16_t focus;
	OC_I2C_Read_Continue(I2C_OPENCORES_CAMERA_BASE, MIPI_AF_I2C_ADDR, (uint8_t *)&focus, sizeof(focus));
 2021244:	20204fc0 	call	20204fc <OC_I2C_Read_Continue>
	return ReverseUInt16(focus);
 2021248:	d900000b 	ldhu	r4,0(sp)
 202124c:	20208fc0 	call	20208fc <ReverseUInt16>
}
 2021250:	dfc00117 	ldw	ra,4(sp)
 2021254:	dec00204 	addi	sp,sp,8
 2021258:	f800283a 	ret

0202125c <mipi_camera_reg_write_VCM149C>:

bool mipi_camera_reg_write_VCM149C(uint16_t dacValue)
{
 202125c:	defffc04 	addi	sp,sp,-16
 2021260:	200d883a 	mov	r6,r4
 2021264:	dfc00315 	stw	ra,12(sp)
 2021268:	dc000215 	stw	r16,8(sp)
 202126c:	213fffcc 	andi	r4,r4,65535
 2021270:	0080ffc4 	movi	r2,1023
 2021274:	1100012e 	bgeu	r2,r4,202127c <mipi_camera_reg_write_VCM149C+0x20>
 2021278:	100d883a 	mov	r6,r2
		dacValue = 0;
	}
	uint8_t msb = (dacValue >> 4)&0x00FF;
	uint8_t lsb = (dacValue << 4 )&0x00F0;
	lsb += 0x06;
	lsb += 0x06;
 202127c:	31bfffcc 	andi	r6,r6,65535
 2021280:	3004913a 	slli	r2,r6,4
	if(!OC_I2C_Write(I2C_OPENCORES_CAMERA_BASE, MIPI_AF_I2C_ADDR, msb, (uint8_t *)&lsb, sizeof(lsb)))
 2021284:	300cd13a 	srli	r6,r6,4
 2021288:	01008034 	movhi	r4,512
		dacValue = 0;
	}
	uint8_t msb = (dacValue >> 4)&0x00FF;
	uint8_t lsb = (dacValue << 4 )&0x00F0;
	lsb += 0x06;
	lsb += 0x06;
 202128c:	10800304 	addi	r2,r2,12
 2021290:	d8800105 	stb	r2,4(sp)
	if(!OC_I2C_Write(I2C_OPENCORES_CAMERA_BASE, MIPI_AF_I2C_ADDR, msb, (uint8_t *)&lsb, sizeof(lsb)))
 2021294:	00800044 	movi	r2,1
 2021298:	d8800015 	stw	r2,0(sp)
 202129c:	d9c00104 	addi	r7,sp,4
 20212a0:	01400604 	movi	r5,24
 20212a4:	21010804 	addi	r4,r4,1056
 20212a8:	20202300 	call	2020230 <OC_I2C_Write>
 20212ac:	1021883a 	mov	r16,r2
 20212b0:	10803fcc 	andi	r2,r2,255
 20212b4:	10000226 	beq	r2,zero,20212c0 <mipi_camera_reg_write_VCM149C+0x64>
		return false;
	usleep(1000);
 20212b8:	0100fa04 	movi	r4,1000
 20212bc:	20218880 	call	2021888 <usleep>
	return true;
}
 20212c0:	8005883a 	mov	r2,r16
 20212c4:	dfc00317 	ldw	ra,12(sp)
 20212c8:	dc000217 	ldw	r16,8(sp)
 20212cc:	dec00404 	addi	sp,sp,16
 20212d0:	f800283a 	ret

020212d4 <readUInt16>:
#include "stdio_ext.h"

// x86 is Little Endian
// ex. 0x123 => 0x23 0x01
uint16_t readUInt16()
{
 20212d4:	defffe04 	addi	sp,sp,-8
 20212d8:	dfc00115 	stw	ra,4(sp)
 20212dc:	dc000015 	stw	r16,0(sp)
}
*/

byte readByte()
{
	return alt_getchar();
 20212e0:	20215d80 	call	20215d8 <alt_getchar>
 20212e4:	1021883a 	mov	r16,r2
 20212e8:	20215d80 	call	20215d8 <alt_getchar>
uint16_t readUInt16()
{
  byte data[2];
  data[0] = readByte();
  data[1] = readByte();
  return bytesToUInt16(data);
 20212ec:	10803fcc 	andi	r2,r2,255
 20212f0:	1004923a 	slli	r2,r2,8
 20212f4:	84003fcc 	andi	r16,r16,255
}
 20212f8:	1404b03a 	or	r2,r2,r16
 20212fc:	dfc00117 	ldw	ra,4(sp)
 2021300:	dc000017 	ldw	r16,0(sp)
 2021304:	dec00204 	addi	sp,sp,8
 2021308:	f800283a 	ret

0202130c <bytesToUInt16>:

uint16_t bytesToUInt16(byte* data)
{
  uint16_t result = data[0];
  result |= data[1] << 8;
  return result;
 202130c:	20800043 	ldbu	r2,1(r4)
 2021310:	20c00003 	ldbu	r3,0(r4)
 2021314:	1004923a 	slli	r2,r2,8
}
 2021318:	10c4b03a 	or	r2,r2,r3
 202131c:	f800283a 	ret

02021320 <readBytes>:
{
	writeBytes((byte*)&data,2);
}

void readBytes(byte* data, int dataLen)
{
 2021320:	defffc04 	addi	sp,sp,-16
 2021324:	dc800215 	stw	r18,8(sp)
 2021328:	dc400115 	stw	r17,4(sp)
 202132c:	dc000015 	stw	r16,0(sp)
 2021330:	dfc00315 	stw	ra,12(sp)
 2021334:	2023883a 	mov	r17,r4
 2021338:	2825883a 	mov	r18,r5
	int byteIndex;
	for(byteIndex = 0; byteIndex < dataLen; byteIndex++)
 202133c:	2021883a 	mov	r16,r4
 2021340:	8445c83a 	sub	r2,r16,r17
 2021344:	1480040e 	bge	r2,r18,2021358 <readBytes+0x38>
}
*/

byte readByte()
{
	return alt_getchar();
 2021348:	20215d80 	call	20215d8 <alt_getchar>
void readBytes(byte* data, int dataLen)
{
	int byteIndex;
	for(byteIndex = 0; byteIndex < dataLen; byteIndex++)
	{
		data[byteIndex] = readByte();
 202134c:	80800005 	stb	r2,0(r16)
 2021350:	84000044 	addi	r16,r16,1
 2021354:	003ffa06 	br	2021340 <_gp+0xffff35e0>
	}
}
 2021358:	dfc00317 	ldw	ra,12(sp)
 202135c:	dc800217 	ldw	r18,8(sp)
 2021360:	dc400117 	ldw	r17,4(sp)
 2021364:	dc000017 	ldw	r16,0(sp)
 2021368:	dec00404 	addi	sp,sp,16
 202136c:	f800283a 	ret

02021370 <writeBytes>:

// Alternative version of writeBytes that use STDIO
void writeBytes(byte* data, int dataLen)
{
 2021370:	defffd04 	addi	sp,sp,-12
 2021374:	dc400115 	stw	r17,4(sp)
 2021378:	dc000015 	stw	r16,0(sp)
 202137c:	dfc00215 	stw	ra,8(sp)
 2021380:	2023883a 	mov	r17,r4
 2021384:	2821883a 	mov	r16,r5
	int remainingBytes = dataLen;
	while (remainingBytes > 0)
 2021388:	0400060e 	bge	zero,r16,20213a4 <writeBytes+0x34>
	{
		int writtenBytes = write(STDOUT_FILENO, data, remainingBytes);
 202138c:	800d883a 	mov	r6,r16
 2021390:	880b883a 	mov	r5,r17
 2021394:	01000044 	movi	r4,1
 2021398:	202188c0 	call	202188c <write>
		remainingBytes -= writtenBytes;
 202139c:	80a1c83a 	sub	r16,r16,r2
 20213a0:	003ff906 	br	2021388 <_gp+0xffff3628>
	}
}
 20213a4:	dfc00217 	ldw	ra,8(sp)
 20213a8:	dc400117 	ldw	r17,4(sp)
 20213ac:	dc000017 	ldw	r16,0(sp)
 20213b0:	dec00304 	addi	sp,sp,12
 20213b4:	f800283a 	ret

020213b8 <writeUInt16>:
  result |= data[1] << 8;
  return result;
}

void writeUInt16(uint16_t data)
{
 20213b8:	defffe04 	addi	sp,sp,-8
 20213bc:	d900000d 	sth	r4,0(sp)
	writeBytes((byte*)&data,2);
 20213c0:	01400084 	movi	r5,2
 20213c4:	d809883a 	mov	r4,sp
  result |= data[1] << 8;
  return result;
}

void writeUInt16(uint16_t data)
{
 20213c8:	dfc00115 	stw	ra,4(sp)
	writeBytes((byte*)&data,2);
 20213cc:	20213700 	call	2021370 <writeBytes>
}
 20213d0:	dfc00117 	ldw	ra,4(sp)
 20213d4:	dec00204 	addi	sp,sp,8
 20213d8:	f800283a 	ret

020213dc <readByte>:
	}
}
*/

byte readByte()
{
 20213dc:	deffff04 	addi	sp,sp,-4
 20213e0:	dfc00015 	stw	ra,0(sp)
	return alt_getchar();
 20213e4:	20215d80 	call	20215d8 <alt_getchar>
}
 20213e8:	dfc00017 	ldw	ra,0(sp)
 20213ec:	dec00104 	addi	sp,sp,4
 20213f0:	f800283a 	ret

020213f4 <writeByte>:

void writeByte(byte data)
{
	alt_putchar(data);
 20213f4:	21003fcc 	andi	r4,r4,255
 20213f8:	202187c1 	jmpi	202187c <alt_putchar>

020213fc <__divsi3>:
 20213fc:	20001b16 	blt	r4,zero,202146c <__divsi3+0x70>
 2021400:	000f883a 	mov	r7,zero
 2021404:	28001616 	blt	r5,zero,2021460 <__divsi3+0x64>
 2021408:	200d883a 	mov	r6,r4
 202140c:	29001a2e 	bgeu	r5,r4,2021478 <__divsi3+0x7c>
 2021410:	00800804 	movi	r2,32
 2021414:	00c00044 	movi	r3,1
 2021418:	00000106 	br	2021420 <__divsi3+0x24>
 202141c:	10000d26 	beq	r2,zero,2021454 <__divsi3+0x58>
 2021420:	294b883a 	add	r5,r5,r5
 2021424:	10bfffc4 	addi	r2,r2,-1
 2021428:	18c7883a 	add	r3,r3,r3
 202142c:	293ffb36 	bltu	r5,r4,202141c <_gp+0xffff36bc>
 2021430:	0005883a 	mov	r2,zero
 2021434:	18000726 	beq	r3,zero,2021454 <__divsi3+0x58>
 2021438:	0005883a 	mov	r2,zero
 202143c:	31400236 	bltu	r6,r5,2021448 <__divsi3+0x4c>
 2021440:	314dc83a 	sub	r6,r6,r5
 2021444:	10c4b03a 	or	r2,r2,r3
 2021448:	1806d07a 	srli	r3,r3,1
 202144c:	280ad07a 	srli	r5,r5,1
 2021450:	183ffa1e 	bne	r3,zero,202143c <_gp+0xffff36dc>
 2021454:	38000126 	beq	r7,zero,202145c <__divsi3+0x60>
 2021458:	0085c83a 	sub	r2,zero,r2
 202145c:	f800283a 	ret
 2021460:	014bc83a 	sub	r5,zero,r5
 2021464:	39c0005c 	xori	r7,r7,1
 2021468:	003fe706 	br	2021408 <_gp+0xffff36a8>
 202146c:	0109c83a 	sub	r4,zero,r4
 2021470:	01c00044 	movi	r7,1
 2021474:	003fe306 	br	2021404 <_gp+0xffff36a4>
 2021478:	00c00044 	movi	r3,1
 202147c:	003fee06 	br	2021438 <_gp+0xffff36d8>

02021480 <__modsi3>:
 2021480:	20001716 	blt	r4,zero,20214e0 <__modsi3+0x60>
 2021484:	000f883a 	mov	r7,zero
 2021488:	2005883a 	mov	r2,r4
 202148c:	28001216 	blt	r5,zero,20214d8 <__modsi3+0x58>
 2021490:	2900162e 	bgeu	r5,r4,20214ec <__modsi3+0x6c>
 2021494:	01800804 	movi	r6,32
 2021498:	00c00044 	movi	r3,1
 202149c:	00000106 	br	20214a4 <__modsi3+0x24>
 20214a0:	30000a26 	beq	r6,zero,20214cc <__modsi3+0x4c>
 20214a4:	294b883a 	add	r5,r5,r5
 20214a8:	31bfffc4 	addi	r6,r6,-1
 20214ac:	18c7883a 	add	r3,r3,r3
 20214b0:	293ffb36 	bltu	r5,r4,20214a0 <_gp+0xffff3740>
 20214b4:	18000526 	beq	r3,zero,20214cc <__modsi3+0x4c>
 20214b8:	1806d07a 	srli	r3,r3,1
 20214bc:	11400136 	bltu	r2,r5,20214c4 <__modsi3+0x44>
 20214c0:	1145c83a 	sub	r2,r2,r5
 20214c4:	280ad07a 	srli	r5,r5,1
 20214c8:	183ffb1e 	bne	r3,zero,20214b8 <_gp+0xffff3758>
 20214cc:	38000126 	beq	r7,zero,20214d4 <__modsi3+0x54>
 20214d0:	0085c83a 	sub	r2,zero,r2
 20214d4:	f800283a 	ret
 20214d8:	014bc83a 	sub	r5,zero,r5
 20214dc:	003fec06 	br	2021490 <_gp+0xffff3730>
 20214e0:	0109c83a 	sub	r4,zero,r4
 20214e4:	01c00044 	movi	r7,1
 20214e8:	003fe706 	br	2021488 <_gp+0xffff3728>
 20214ec:	00c00044 	movi	r3,1
 20214f0:	003ff106 	br	20214b8 <_gp+0xffff3758>

020214f4 <__udivsi3>:
 20214f4:	200d883a 	mov	r6,r4
 20214f8:	2900152e 	bgeu	r5,r4,2021550 <__udivsi3+0x5c>
 20214fc:	28001416 	blt	r5,zero,2021550 <__udivsi3+0x5c>
 2021500:	00800804 	movi	r2,32
 2021504:	00c00044 	movi	r3,1
 2021508:	00000206 	br	2021514 <__udivsi3+0x20>
 202150c:	10000e26 	beq	r2,zero,2021548 <__udivsi3+0x54>
 2021510:	28000516 	blt	r5,zero,2021528 <__udivsi3+0x34>
 2021514:	294b883a 	add	r5,r5,r5
 2021518:	10bfffc4 	addi	r2,r2,-1
 202151c:	18c7883a 	add	r3,r3,r3
 2021520:	293ffa36 	bltu	r5,r4,202150c <_gp+0xffff37ac>
 2021524:	18000826 	beq	r3,zero,2021548 <__udivsi3+0x54>
 2021528:	0005883a 	mov	r2,zero
 202152c:	31400236 	bltu	r6,r5,2021538 <__udivsi3+0x44>
 2021530:	314dc83a 	sub	r6,r6,r5
 2021534:	10c4b03a 	or	r2,r2,r3
 2021538:	1806d07a 	srli	r3,r3,1
 202153c:	280ad07a 	srli	r5,r5,1
 2021540:	183ffa1e 	bne	r3,zero,202152c <_gp+0xffff37cc>
 2021544:	f800283a 	ret
 2021548:	0005883a 	mov	r2,zero
 202154c:	f800283a 	ret
 2021550:	00c00044 	movi	r3,1
 2021554:	003ff406 	br	2021528 <_gp+0xffff37c8>

02021558 <__umodsi3>:
 2021558:	2005883a 	mov	r2,r4
 202155c:	2900122e 	bgeu	r5,r4,20215a8 <__umodsi3+0x50>
 2021560:	28001116 	blt	r5,zero,20215a8 <__umodsi3+0x50>
 2021564:	01800804 	movi	r6,32
 2021568:	00c00044 	movi	r3,1
 202156c:	00000206 	br	2021578 <__umodsi3+0x20>
 2021570:	30000c26 	beq	r6,zero,20215a4 <__umodsi3+0x4c>
 2021574:	28000516 	blt	r5,zero,202158c <__umodsi3+0x34>
 2021578:	294b883a 	add	r5,r5,r5
 202157c:	31bfffc4 	addi	r6,r6,-1
 2021580:	18c7883a 	add	r3,r3,r3
 2021584:	293ffa36 	bltu	r5,r4,2021570 <_gp+0xffff3810>
 2021588:	18000626 	beq	r3,zero,20215a4 <__umodsi3+0x4c>
 202158c:	1806d07a 	srli	r3,r3,1
 2021590:	11400136 	bltu	r2,r5,2021598 <__umodsi3+0x40>
 2021594:	1145c83a 	sub	r2,r2,r5
 2021598:	280ad07a 	srli	r5,r5,1
 202159c:	183ffb1e 	bne	r3,zero,202158c <_gp+0xffff382c>
 20215a0:	f800283a 	ret
 20215a4:	f800283a 	ret
 20215a8:	00c00044 	movi	r3,1
 20215ac:	003ff706 	br	202158c <_gp+0xffff382c>

020215b0 <__mulsi3>:
 20215b0:	0005883a 	mov	r2,zero
 20215b4:	20000726 	beq	r4,zero,20215d4 <__mulsi3+0x24>
 20215b8:	20c0004c 	andi	r3,r4,1
 20215bc:	2008d07a 	srli	r4,r4,1
 20215c0:	18000126 	beq	r3,zero,20215c8 <__mulsi3+0x18>
 20215c4:	1145883a 	add	r2,r2,r5
 20215c8:	294b883a 	add	r5,r5,r5
 20215cc:	203ffa1e 	bne	r4,zero,20215b8 <_gp+0xffff3858>
 20215d0:	f800283a 	ret
 20215d4:	f800283a 	ret

020215d8 <alt_getchar>:
 20215d8:	d0a00817 	ldw	r2,-32736(gp)
 20215dc:	11000117 	ldw	r4,4(r2)
 20215e0:	20221f01 	jmpi	20221f0 <getc>

020215e4 <alt_load>:
 20215e4:	deffff04 	addi	sp,sp,-4
 20215e8:	010080b4 	movhi	r4,514
 20215ec:	014080b4 	movhi	r5,514
 20215f0:	dfc00015 	stw	ra,0(sp)
 20215f4:	2114d804 	addi	r4,r4,21344
 20215f8:	29576404 	addi	r5,r5,23952
 20215fc:	21400a26 	beq	r4,r5,2021628 <alt_load+0x44>
 2021600:	008080b4 	movhi	r2,514
 2021604:	10976404 	addi	r2,r2,23952
 2021608:	20800726 	beq	r4,r2,2021628 <alt_load+0x44>
 202160c:	21800104 	addi	r6,r4,4
 2021610:	118dc83a 	sub	r6,r2,r6
 2021614:	300cd0ba 	srli	r6,r6,2
 2021618:	31800044 	addi	r6,r6,1
 202161c:	318d883a 	add	r6,r6,r6
 2021620:	318d883a 	add	r6,r6,r6
 2021624:	20222f40 	call	20222f4 <memcpy>
 2021628:	010080b4 	movhi	r4,514
 202162c:	014080b4 	movhi	r5,514
 2021630:	21000804 	addi	r4,r4,32
 2021634:	29400804 	addi	r5,r5,32
 2021638:	21400a26 	beq	r4,r5,2021664 <alt_load+0x80>
 202163c:	008080b4 	movhi	r2,514
 2021640:	10800804 	addi	r2,r2,32
 2021644:	20800726 	beq	r4,r2,2021664 <alt_load+0x80>
 2021648:	21800104 	addi	r6,r4,4
 202164c:	118dc83a 	sub	r6,r2,r6
 2021650:	300cd0ba 	srli	r6,r6,2
 2021654:	31800044 	addi	r6,r6,1
 2021658:	318d883a 	add	r6,r6,r6
 202165c:	318d883a 	add	r6,r6,r6
 2021660:	20222f40 	call	20222f4 <memcpy>
 2021664:	010080b4 	movhi	r4,514
 2021668:	014080b4 	movhi	r5,514
 202166c:	21131204 	addi	r4,r4,19528
 2021670:	29531204 	addi	r5,r5,19528
 2021674:	21400a26 	beq	r4,r5,20216a0 <alt_load+0xbc>
 2021678:	008080b4 	movhi	r2,514
 202167c:	1094d804 	addi	r2,r2,21344
 2021680:	20800726 	beq	r4,r2,20216a0 <alt_load+0xbc>
 2021684:	21800104 	addi	r6,r4,4
 2021688:	118dc83a 	sub	r6,r2,r6
 202168c:	300cd0ba 	srli	r6,r6,2
 2021690:	31800044 	addi	r6,r6,1
 2021694:	318d883a 	add	r6,r6,r6
 2021698:	318d883a 	add	r6,r6,r6
 202169c:	20222f40 	call	20222f4 <memcpy>
 20216a0:	2021bf40 	call	2021bf4 <alt_dcache_flush_all>
 20216a4:	dfc00017 	ldw	ra,0(sp)
 20216a8:	dec00104 	addi	sp,sp,4
 20216ac:	2021c6c1 	jmpi	2021c6c <alt_icache_flush_all>

020216b0 <alt_main>:
 20216b0:	defffe04 	addi	sp,sp,-8
 20216b4:	0009883a 	mov	r4,zero
 20216b8:	dfc00115 	stw	ra,4(sp)
 20216bc:	dc000015 	stw	r16,0(sp)
 20216c0:	202199c0 	call	202199c <alt_irq_init>
 20216c4:	20219bc0 	call	20219bc <alt_sys_init>
 20216c8:	018080b4 	movhi	r6,514
 20216cc:	3194d004 	addi	r6,r6,21312
 20216d0:	300b883a 	mov	r5,r6
 20216d4:	3009883a 	mov	r4,r6
 20216d8:	2021c700 	call	2021c70 <alt_io_redirect>
 20216dc:	d1a29817 	ldw	r6,-30112(gp)
 20216e0:	d1629917 	ldw	r5,-30108(gp)
 20216e4:	d1229a17 	ldw	r4,-30104(gp)
 20216e8:	2020a400 	call	2020a40 <main>
 20216ec:	01000044 	movi	r4,1
 20216f0:	1021883a 	mov	r16,r2
 20216f4:	2021b340 	call	2021b34 <close>
 20216f8:	8009883a 	mov	r4,r16
 20216fc:	20221480 	call	2022148 <exit>

02021700 <alt_printf>:
 2021700:	defff304 	addi	sp,sp,-52
 2021704:	dc000015 	stw	r16,0(sp)
 2021708:	2021883a 	mov	r16,r4
 202170c:	dfc00915 	stw	ra,36(sp)
 2021710:	df000815 	stw	fp,32(sp)
 2021714:	ddc00715 	stw	r23,28(sp)
 2021718:	dd800615 	stw	r22,24(sp)
 202171c:	dd400515 	stw	r21,20(sp)
 2021720:	dd000415 	stw	r20,16(sp)
 2021724:	dcc00315 	stw	r19,12(sp)
 2021728:	dc800215 	stw	r18,8(sp)
 202172c:	dc400115 	stw	r17,4(sp)
 2021730:	d9400a15 	stw	r5,40(sp)
 2021734:	d9800b15 	stw	r6,44(sp)
 2021738:	d9c00c15 	stw	r7,48(sp)
 202173c:	04400944 	movi	r17,37
 2021740:	dcc00a04 	addi	r19,sp,40
 2021744:	054018c4 	movi	r21,99
 2021748:	05801e04 	movi	r22,120
 202174c:	048003c4 	movi	r18,15
 2021750:	05000244 	movi	r20,9
 2021754:	81000007 	ldb	r4,0(r16)
 2021758:	20000526 	beq	r4,zero,2021770 <alt_printf+0x70>
 202175c:	24401026 	beq	r4,r17,20217a0 <alt_printf+0xa0>
 2021760:	84000044 	addi	r16,r16,1
 2021764:	202187c0 	call	202187c <alt_putchar>
 2021768:	81000007 	ldb	r4,0(r16)
 202176c:	203ffb1e 	bne	r4,zero,202175c <_gp+0xffff39fc>
 2021770:	dfc00917 	ldw	ra,36(sp)
 2021774:	df000817 	ldw	fp,32(sp)
 2021778:	ddc00717 	ldw	r23,28(sp)
 202177c:	dd800617 	ldw	r22,24(sp)
 2021780:	dd400517 	ldw	r21,20(sp)
 2021784:	dd000417 	ldw	r20,16(sp)
 2021788:	dcc00317 	ldw	r19,12(sp)
 202178c:	dc800217 	ldw	r18,8(sp)
 2021790:	dc400117 	ldw	r17,4(sp)
 2021794:	dc000017 	ldw	r16,0(sp)
 2021798:	dec00d04 	addi	sp,sp,52
 202179c:	f800283a 	ret
 20217a0:	80800047 	ldb	r2,1(r16)
 20217a4:	84000084 	addi	r16,r16,2
 20217a8:	103ff126 	beq	r2,zero,2021770 <_gp+0xffff3a10>
 20217ac:	14402926 	beq	r2,r17,2021854 <alt_printf+0x154>
 20217b0:	15402b26 	beq	r2,r21,2021860 <alt_printf+0x160>
 20217b4:	15800b26 	beq	r2,r22,20217e4 <alt_printf+0xe4>
 20217b8:	00c01cc4 	movi	r3,115
 20217bc:	10ffe51e 	bne	r2,r3,2021754 <_gp+0xffff39f4>
 20217c0:	9f000017 	ldw	fp,0(r19)
 20217c4:	9cc00104 	addi	r19,r19,4
 20217c8:	e1000007 	ldb	r4,0(fp)
 20217cc:	203fe126 	beq	r4,zero,2021754 <_gp+0xffff39f4>
 20217d0:	e7000044 	addi	fp,fp,1
 20217d4:	202187c0 	call	202187c <alt_putchar>
 20217d8:	e1000007 	ldb	r4,0(fp)
 20217dc:	203ffc1e 	bne	r4,zero,20217d0 <_gp+0xffff3a70>
 20217e0:	003fdc06 	br	2021754 <_gp+0xffff39f4>
 20217e4:	9dc00017 	ldw	r23,0(r19)
 20217e8:	9cc00104 	addi	r19,r19,4
 20217ec:	b8002026 	beq	r23,zero,2021870 <alt_printf+0x170>
 20217f0:	b8bc002c 	andhi	r2,r23,61440
 20217f4:	07000704 	movi	fp,28
 20217f8:	1000101e 	bne	r2,zero,202183c <alt_printf+0x13c>
 20217fc:	e73fff04 	addi	fp,fp,-4
 2021800:	9704983a 	sll	r2,r18,fp
 2021804:	15c4703a 	and	r2,r2,r23
 2021808:	103ffc26 	beq	r2,zero,20217fc <_gp+0xffff3a9c>
 202180c:	e03fd116 	blt	fp,zero,2021754 <_gp+0xffff39f4>
 2021810:	9708983a 	sll	r4,r18,fp
 2021814:	25c8703a 	and	r4,r4,r23
 2021818:	2708d83a 	srl	r4,r4,fp
 202181c:	a1000b36 	bltu	r20,r4,202184c <alt_printf+0x14c>
 2021820:	21000c04 	addi	r4,r4,48
 2021824:	21003fcc 	andi	r4,r4,255
 2021828:	2100201c 	xori	r4,r4,128
 202182c:	e73fff04 	addi	fp,fp,-4
 2021830:	213fe004 	addi	r4,r4,-128
 2021834:	202187c0 	call	202187c <alt_putchar>
 2021838:	e03fc616 	blt	fp,zero,2021754 <_gp+0xffff39f4>
 202183c:	9708983a 	sll	r4,r18,fp
 2021840:	25c8703a 	and	r4,r4,r23
 2021844:	2708d83a 	srl	r4,r4,fp
 2021848:	a13ff52e 	bgeu	r20,r4,2021820 <_gp+0xffff3ac0>
 202184c:	210015c4 	addi	r4,r4,87
 2021850:	003ff406 	br	2021824 <_gp+0xffff3ac4>
 2021854:	8809883a 	mov	r4,r17
 2021858:	202187c0 	call	202187c <alt_putchar>
 202185c:	003fbd06 	br	2021754 <_gp+0xffff39f4>
 2021860:	99000017 	ldw	r4,0(r19)
 2021864:	9cc00104 	addi	r19,r19,4
 2021868:	202187c0 	call	202187c <alt_putchar>
 202186c:	003fb906 	br	2021754 <_gp+0xffff39f4>
 2021870:	01000c04 	movi	r4,48
 2021874:	202187c0 	call	202187c <alt_putchar>
 2021878:	003fb606 	br	2021754 <_gp+0xffff39f4>

0202187c <alt_putchar>:
 202187c:	d0a00817 	ldw	r2,-32736(gp)
 2021880:	11400217 	ldw	r5,8(r2)
 2021884:	20224dc1 	jmpi	20224dc <putc>

02021888 <usleep>:
 2021888:	2021aac1 	jmpi	2021aac <alt_busy_sleep>

0202188c <write>:
 202188c:	defffa04 	addi	sp,sp,-24
 2021890:	dfc00515 	stw	ra,20(sp)
 2021894:	dd000415 	stw	r20,16(sp)
 2021898:	dcc00315 	stw	r19,12(sp)
 202189c:	dc800215 	stw	r18,8(sp)
 20218a0:	dc400115 	stw	r17,4(sp)
 20218a4:	dc000015 	stw	r16,0(sp)
 20218a8:	20003116 	blt	r4,zero,2021970 <write+0xe4>
 20218ac:	2827883a 	mov	r19,r5
 20218b0:	040080b4 	movhi	r16,514
 20218b4:	01400304 	movi	r5,12
 20218b8:	2025883a 	mov	r18,r4
 20218bc:	3029883a 	mov	r20,r6
 20218c0:	8414e304 	addi	r16,r16,21388
 20218c4:	20215b00 	call	20215b0 <__mulsi3>
 20218c8:	80a3883a 	add	r17,r16,r2
 20218cc:	88002826 	beq	r17,zero,2021970 <write+0xe4>
 20218d0:	88800217 	ldw	r2,8(r17)
 20218d4:	108000cc 	andi	r2,r2,3
 20218d8:	10001526 	beq	r2,zero,2021930 <write+0xa4>
 20218dc:	01400304 	movi	r5,12
 20218e0:	9009883a 	mov	r4,r18
 20218e4:	20215b00 	call	20215b0 <__mulsi3>
 20218e8:	8085883a 	add	r2,r16,r2
 20218ec:	10800017 	ldw	r2,0(r2)
 20218f0:	10800617 	ldw	r2,24(r2)
 20218f4:	10000e26 	beq	r2,zero,2021930 <write+0xa4>
 20218f8:	a00d883a 	mov	r6,r20
 20218fc:	980b883a 	mov	r5,r19
 2021900:	8809883a 	mov	r4,r17
 2021904:	103ee83a 	callr	r2
 2021908:	1021883a 	mov	r16,r2
 202190c:	10001116 	blt	r2,zero,2021954 <write+0xc8>
 2021910:	dfc00517 	ldw	ra,20(sp)
 2021914:	dd000417 	ldw	r20,16(sp)
 2021918:	dcc00317 	ldw	r19,12(sp)
 202191c:	dc800217 	ldw	r18,8(sp)
 2021920:	dc400117 	ldw	r17,4(sp)
 2021924:	dc000017 	ldw	r16,0(sp)
 2021928:	dec00604 	addi	sp,sp,24
 202192c:	f800283a 	ret
 2021930:	d0a00617 	ldw	r2,-32744(gp)
 2021934:	10000526 	beq	r2,zero,202194c <write+0xc0>
 2021938:	103ee83a 	callr	r2
 202193c:	00c00344 	movi	r3,13
 2021940:	10c00015 	stw	r3,0(r2)
 2021944:	00bfffc4 	movi	r2,-1
 2021948:	003ff106 	br	2021910 <_gp+0xffff3bb0>
 202194c:	d0a29b04 	addi	r2,gp,-30100
 2021950:	003ffa06 	br	202193c <_gp+0xffff3bdc>
 2021954:	d0a00617 	ldw	r2,-32744(gp)
 2021958:	10000c26 	beq	r2,zero,202198c <write+0x100>
 202195c:	103ee83a 	callr	r2
 2021960:	0421c83a 	sub	r16,zero,r16
 2021964:	14000015 	stw	r16,0(r2)
 2021968:	00bfffc4 	movi	r2,-1
 202196c:	003fe806 	br	2021910 <_gp+0xffff3bb0>
 2021970:	d0a00617 	ldw	r2,-32744(gp)
 2021974:	10000726 	beq	r2,zero,2021994 <write+0x108>
 2021978:	103ee83a 	callr	r2
 202197c:	00c01444 	movi	r3,81
 2021980:	10c00015 	stw	r3,0(r2)
 2021984:	00bfffc4 	movi	r2,-1
 2021988:	003fe106 	br	2021910 <_gp+0xffff3bb0>
 202198c:	d0a29b04 	addi	r2,gp,-30100
 2021990:	003ff306 	br	2021960 <_gp+0xffff3c00>
 2021994:	d0a29b04 	addi	r2,gp,-30100
 2021998:	003ff806 	br	202197c <_gp+0xffff3c1c>

0202199c <alt_irq_init>:
 202199c:	deffff04 	addi	sp,sp,-4
 20219a0:	dfc00015 	stw	ra,0(sp)
 20219a4:	2021f940 	call	2021f94 <altera_nios2_gen2_irq_init>
 20219a8:	00800044 	movi	r2,1
 20219ac:	1001703a 	wrctl	status,r2
 20219b0:	dfc00017 	ldw	ra,0(sp)
 20219b4:	dec00104 	addi	sp,sp,4
 20219b8:	f800283a 	ret

020219bc <alt_sys_init>:
 20219bc:	010080b4 	movhi	r4,514
 20219c0:	2114d804 	addi	r4,r4,21344
 20219c4:	d1600204 	addi	r5,gp,-32760
 20219c8:	2021c001 	jmpi	2021c00 <alt_dev_llist_insert>

020219cc <altera_avalon_jtag_uart_read_fd>:
 20219cc:	20800017 	ldw	r2,0(r4)
 20219d0:	21c00217 	ldw	r7,8(r4)
 20219d4:	11000a04 	addi	r4,r2,40
 20219d8:	20219ec1 	jmpi	20219ec <altera_avalon_jtag_uart_read>

020219dc <altera_avalon_jtag_uart_write_fd>:
 20219dc:	20800017 	ldw	r2,0(r4)
 20219e0:	21c00217 	ldw	r7,8(r4)
 20219e4:	11000a04 	addi	r4,r2,40
 20219e8:	2021a781 	jmpi	2021a78 <altera_avalon_jtag_uart_write>

020219ec <altera_avalon_jtag_uart_read>:
 20219ec:	298d883a 	add	r6,r5,r6
 20219f0:	22000017 	ldw	r8,0(r4)
 20219f4:	39d0000c 	andi	r7,r7,16384
 20219f8:	29801d2e 	bgeu	r5,r6,2021a70 <altera_avalon_jtag_uart_read+0x84>
 20219fc:	2807883a 	mov	r3,r5
 2021a00:	38000c1e 	bne	r7,zero,2021a34 <altera_avalon_jtag_uart_read+0x48>
 2021a04:	41000037 	ldwio	r4,0(r8)
 2021a08:	21e0000c 	andi	r7,r4,32768
 2021a0c:	18800044 	addi	r2,r3,1
 2021a10:	3800041e 	bne	r7,zero,2021a24 <altera_avalon_jtag_uart_read+0x38>
 2021a14:	28fffb26 	beq	r5,r3,2021a04 <_gp+0xffff3ca4>
 2021a18:	1805883a 	mov	r2,r3
 2021a1c:	1145c83a 	sub	r2,r2,r5
 2021a20:	f800283a 	ret
 2021a24:	19000005 	stb	r4,0(r3)
 2021a28:	11800b2e 	bgeu	r2,r6,2021a58 <altera_avalon_jtag_uart_read+0x6c>
 2021a2c:	1007883a 	mov	r3,r2
 2021a30:	003ff406 	br	2021a04 <_gp+0xffff3ca4>
 2021a34:	41000037 	ldwio	r4,0(r8)
 2021a38:	21e0000c 	andi	r7,r4,32768
 2021a3c:	18800044 	addi	r2,r3,1
 2021a40:	38000826 	beq	r7,zero,2021a64 <altera_avalon_jtag_uart_read+0x78>
 2021a44:	19000005 	stb	r4,0(r3)
 2021a48:	1007883a 	mov	r3,r2
 2021a4c:	11bff91e 	bne	r2,r6,2021a34 <_gp+0xffff3cd4>
 2021a50:	29bff21e 	bne	r5,r6,2021a1c <_gp+0xffff3cbc>
 2021a54:	00000406 	br	2021a68 <altera_avalon_jtag_uart_read+0x7c>
 2021a58:	28bff01e 	bne	r5,r2,2021a1c <_gp+0xffff3cbc>
 2021a5c:	00bffec4 	movi	r2,-5
 2021a60:	f800283a 	ret
 2021a64:	28ffec1e 	bne	r5,r3,2021a18 <_gp+0xffff3cb8>
 2021a68:	00bffd44 	movi	r2,-11
 2021a6c:	f800283a 	ret
 2021a70:	383ffa26 	beq	r7,zero,2021a5c <_gp+0xffff3cfc>
 2021a74:	003ffc06 	br	2021a68 <_gp+0xffff3d08>

02021a78 <altera_avalon_jtag_uart_write>:
 2021a78:	21c00017 	ldw	r7,0(r4)
 2021a7c:	3005883a 	mov	r2,r6
 2021a80:	298d883a 	add	r6,r5,r6
 2021a84:	39000104 	addi	r4,r7,4
 2021a88:	2980072e 	bgeu	r5,r6,2021aa8 <altera_avalon_jtag_uart_write+0x30>
 2021a8c:	20c00037 	ldwio	r3,0(r4)
 2021a90:	18ffffec 	andhi	r3,r3,65535
 2021a94:	183ffd26 	beq	r3,zero,2021a8c <_gp+0xffff3d2c>
 2021a98:	28c00007 	ldb	r3,0(r5)
 2021a9c:	38c00035 	stwio	r3,0(r7)
 2021aa0:	29400044 	addi	r5,r5,1
 2021aa4:	003ff806 	br	2021a88 <_gp+0xffff3d28>
 2021aa8:	f800283a 	ret

02021aac <alt_busy_sleep>:
 2021aac:	0142e8f4 	movhi	r5,2979
 2021ab0:	defffe04 	addi	sp,sp,-8
 2021ab4:	297a2e84 	addi	r5,r5,-5958
 2021ab8:	dc000015 	stw	r16,0(sp)
 2021abc:	dfc00115 	stw	ra,4(sp)
 2021ac0:	2021883a 	mov	r16,r4
 2021ac4:	20214f40 	call	20214f4 <__udivsi3>
 2021ac8:	10001426 	beq	r2,zero,2021b1c <alt_busy_sleep+0x70>
 2021acc:	01600034 	movhi	r5,32768
 2021ad0:	013d1774 	movhi	r4,62557
 2021ad4:	297fffc4 	addi	r5,r5,-1
 2021ad8:	2105d184 	addi	r4,r4,5958
 2021adc:	0007883a 	mov	r3,zero
 2021ae0:	297fffc4 	addi	r5,r5,-1
 2021ae4:	283ffe1e 	bne	r5,zero,2021ae0 <_gp+0xffff3d80>
 2021ae8:	18c00044 	addi	r3,r3,1
 2021aec:	8121883a 	add	r16,r16,r4
 2021af0:	18bffb16 	blt	r3,r2,2021ae0 <_gp+0xffff3d80>
 2021af4:	014002c4 	movi	r5,11
 2021af8:	8009883a 	mov	r4,r16
 2021afc:	20215b00 	call	20215b0 <__mulsi3>
 2021b00:	10bfffc4 	addi	r2,r2,-1
 2021b04:	103ffe1e 	bne	r2,zero,2021b00 <_gp+0xffff3da0>
 2021b08:	0005883a 	mov	r2,zero
 2021b0c:	dfc00117 	ldw	ra,4(sp)
 2021b10:	dc000017 	ldw	r16,0(sp)
 2021b14:	dec00204 	addi	sp,sp,8
 2021b18:	f800283a 	ret
 2021b1c:	014002c4 	movi	r5,11
 2021b20:	8009883a 	mov	r4,r16
 2021b24:	20215b00 	call	20215b0 <__mulsi3>
 2021b28:	10bfffc4 	addi	r2,r2,-1
 2021b2c:	00bffe16 	blt	zero,r2,2021b28 <_gp+0xffff3dc8>
 2021b30:	003ff506 	br	2021b08 <_gp+0xffff3da8>

02021b34 <close>:
 2021b34:	defffd04 	addi	sp,sp,-12
 2021b38:	dfc00215 	stw	ra,8(sp)
 2021b3c:	dc400115 	stw	r17,4(sp)
 2021b40:	dc000015 	stw	r16,0(sp)
 2021b44:	20002016 	blt	r4,zero,2021bc8 <close+0x94>
 2021b48:	01400304 	movi	r5,12
 2021b4c:	2021883a 	mov	r16,r4
 2021b50:	20215b00 	call	20215b0 <__mulsi3>
 2021b54:	010080b4 	movhi	r4,514
 2021b58:	2114e304 	addi	r4,r4,21388
 2021b5c:	2089883a 	add	r4,r4,r2
 2021b60:	20001926 	beq	r4,zero,2021bc8 <close+0x94>
 2021b64:	20800017 	ldw	r2,0(r4)
 2021b68:	10800417 	ldw	r2,16(r2)
 2021b6c:	10000b26 	beq	r2,zero,2021b9c <close+0x68>
 2021b70:	103ee83a 	callr	r2
 2021b74:	8009883a 	mov	r4,r16
 2021b78:	1023883a 	mov	r17,r2
 2021b7c:	2021f380 	call	2021f38 <alt_release_fd>
 2021b80:	0005883a 	mov	r2,zero
 2021b84:	88000916 	blt	r17,zero,2021bac <close+0x78>
 2021b88:	dfc00217 	ldw	ra,8(sp)
 2021b8c:	dc400117 	ldw	r17,4(sp)
 2021b90:	dc000017 	ldw	r16,0(sp)
 2021b94:	dec00304 	addi	sp,sp,12
 2021b98:	f800283a 	ret
 2021b9c:	8009883a 	mov	r4,r16
 2021ba0:	2021f380 	call	2021f38 <alt_release_fd>
 2021ba4:	0005883a 	mov	r2,zero
 2021ba8:	003ff706 	br	2021b88 <_gp+0xffff3e28>
 2021bac:	d0a00617 	ldw	r2,-32744(gp)
 2021bb0:	10000c26 	beq	r2,zero,2021be4 <close+0xb0>
 2021bb4:	103ee83a 	callr	r2
 2021bb8:	0463c83a 	sub	r17,zero,r17
 2021bbc:	14400015 	stw	r17,0(r2)
 2021bc0:	00bfffc4 	movi	r2,-1
 2021bc4:	003ff006 	br	2021b88 <_gp+0xffff3e28>
 2021bc8:	d0a00617 	ldw	r2,-32744(gp)
 2021bcc:	10000726 	beq	r2,zero,2021bec <close+0xb8>
 2021bd0:	103ee83a 	callr	r2
 2021bd4:	00c01444 	movi	r3,81
 2021bd8:	10c00015 	stw	r3,0(r2)
 2021bdc:	00bfffc4 	movi	r2,-1
 2021be0:	003fe906 	br	2021b88 <_gp+0xffff3e28>
 2021be4:	d0a29b04 	addi	r2,gp,-30100
 2021be8:	003ff306 	br	2021bb8 <_gp+0xffff3e58>
 2021bec:	d0a29b04 	addi	r2,gp,-30100
 2021bf0:	003ff806 	br	2021bd4 <_gp+0xffff3e74>

02021bf4 <alt_dcache_flush_all>:
 2021bf4:	f800283a 	ret

02021bf8 <alt_dev_null_write>:
 2021bf8:	3005883a 	mov	r2,r6
 2021bfc:	f800283a 	ret

02021c00 <alt_dev_llist_insert>:
 2021c00:	20000a26 	beq	r4,zero,2021c2c <alt_dev_llist_insert+0x2c>
 2021c04:	20800217 	ldw	r2,8(r4)
 2021c08:	10000826 	beq	r2,zero,2021c2c <alt_dev_llist_insert+0x2c>
 2021c0c:	28c00017 	ldw	r3,0(r5)
 2021c10:	21400115 	stw	r5,4(r4)
 2021c14:	0005883a 	mov	r2,zero
 2021c18:	20c00015 	stw	r3,0(r4)
 2021c1c:	28c00017 	ldw	r3,0(r5)
 2021c20:	19000115 	stw	r4,4(r3)
 2021c24:	29000015 	stw	r4,0(r5)
 2021c28:	f800283a 	ret
 2021c2c:	d0a00617 	ldw	r2,-32744(gp)
 2021c30:	10000926 	beq	r2,zero,2021c58 <alt_dev_llist_insert+0x58>
 2021c34:	deffff04 	addi	sp,sp,-4
 2021c38:	dfc00015 	stw	ra,0(sp)
 2021c3c:	103ee83a 	callr	r2
 2021c40:	00c00584 	movi	r3,22
 2021c44:	10c00015 	stw	r3,0(r2)
 2021c48:	00bffa84 	movi	r2,-22
 2021c4c:	dfc00017 	ldw	ra,0(sp)
 2021c50:	dec00104 	addi	sp,sp,4
 2021c54:	f800283a 	ret
 2021c58:	d0a29b04 	addi	r2,gp,-30100
 2021c5c:	00c00584 	movi	r3,22
 2021c60:	10c00015 	stw	r3,0(r2)
 2021c64:	00bffa84 	movi	r2,-22
 2021c68:	f800283a 	ret

02021c6c <alt_icache_flush_all>:
 2021c6c:	f800283a 	ret

02021c70 <alt_io_redirect>:
 2021c70:	defffb04 	addi	sp,sp,-20
 2021c74:	dcc00315 	stw	r19,12(sp)
 2021c78:	dc800215 	stw	r18,8(sp)
 2021c7c:	2827883a 	mov	r19,r5
 2021c80:	3025883a 	mov	r18,r6
 2021c84:	01400044 	movi	r5,1
 2021c88:	01807fc4 	movi	r6,511
 2021c8c:	dfc00415 	stw	ra,16(sp)
 2021c90:	dc400115 	stw	r17,4(sp)
 2021c94:	dc000015 	stw	r16,0(sp)
 2021c98:	2021db00 	call	2021db0 <open>
 2021c9c:	10000f16 	blt	r2,zero,2021cdc <alt_io_redirect+0x6c>
 2021ca0:	1009883a 	mov	r4,r2
 2021ca4:	01400304 	movi	r5,12
 2021ca8:	044080b4 	movhi	r17,514
 2021cac:	8c54e304 	addi	r17,r17,21388
 2021cb0:	1021883a 	mov	r16,r2
 2021cb4:	20215b00 	call	20215b0 <__mulsi3>
 2021cb8:	8885883a 	add	r2,r17,r2
 2021cbc:	11400017 	ldw	r5,0(r2)
 2021cc0:	10c00217 	ldw	r3,8(r2)
 2021cc4:	8009883a 	mov	r4,r16
 2021cc8:	89400315 	stw	r5,12(r17)
 2021ccc:	10800117 	ldw	r2,4(r2)
 2021cd0:	88c00515 	stw	r3,20(r17)
 2021cd4:	88800415 	stw	r2,16(r17)
 2021cd8:	2021f380 	call	2021f38 <alt_release_fd>
 2021cdc:	01807fc4 	movi	r6,511
 2021ce0:	000b883a 	mov	r5,zero
 2021ce4:	9809883a 	mov	r4,r19
 2021ce8:	2021db00 	call	2021db0 <open>
 2021cec:	1021883a 	mov	r16,r2
 2021cf0:	10000e16 	blt	r2,zero,2021d2c <alt_io_redirect+0xbc>
 2021cf4:	1009883a 	mov	r4,r2
 2021cf8:	01400304 	movi	r5,12
 2021cfc:	044080b4 	movhi	r17,514
 2021d00:	20215b00 	call	20215b0 <__mulsi3>
 2021d04:	8c54e304 	addi	r17,r17,21388
 2021d08:	8885883a 	add	r2,r17,r2
 2021d0c:	11400017 	ldw	r5,0(r2)
 2021d10:	10c00217 	ldw	r3,8(r2)
 2021d14:	8009883a 	mov	r4,r16
 2021d18:	89400015 	stw	r5,0(r17)
 2021d1c:	10800117 	ldw	r2,4(r2)
 2021d20:	88c00215 	stw	r3,8(r17)
 2021d24:	88800115 	stw	r2,4(r17)
 2021d28:	2021f380 	call	2021f38 <alt_release_fd>
 2021d2c:	01807fc4 	movi	r6,511
 2021d30:	01400044 	movi	r5,1
 2021d34:	9009883a 	mov	r4,r18
 2021d38:	2021db00 	call	2021db0 <open>
 2021d3c:	1021883a 	mov	r16,r2
 2021d40:	10001416 	blt	r2,zero,2021d94 <alt_io_redirect+0x124>
 2021d44:	1009883a 	mov	r4,r2
 2021d48:	01400304 	movi	r5,12
 2021d4c:	044080b4 	movhi	r17,514
 2021d50:	20215b00 	call	20215b0 <__mulsi3>
 2021d54:	8c54e304 	addi	r17,r17,21388
 2021d58:	8885883a 	add	r2,r17,r2
 2021d5c:	11400017 	ldw	r5,0(r2)
 2021d60:	10c00217 	ldw	r3,8(r2)
 2021d64:	8009883a 	mov	r4,r16
 2021d68:	89400615 	stw	r5,24(r17)
 2021d6c:	10800117 	ldw	r2,4(r2)
 2021d70:	88c00815 	stw	r3,32(r17)
 2021d74:	88800715 	stw	r2,28(r17)
 2021d78:	dfc00417 	ldw	ra,16(sp)
 2021d7c:	dcc00317 	ldw	r19,12(sp)
 2021d80:	dc800217 	ldw	r18,8(sp)
 2021d84:	dc400117 	ldw	r17,4(sp)
 2021d88:	dc000017 	ldw	r16,0(sp)
 2021d8c:	dec00504 	addi	sp,sp,20
 2021d90:	2021f381 	jmpi	2021f38 <alt_release_fd>
 2021d94:	dfc00417 	ldw	ra,16(sp)
 2021d98:	dcc00317 	ldw	r19,12(sp)
 2021d9c:	dc800217 	ldw	r18,8(sp)
 2021da0:	dc400117 	ldw	r17,4(sp)
 2021da4:	dc000017 	ldw	r16,0(sp)
 2021da8:	dec00504 	addi	sp,sp,20
 2021dac:	f800283a 	ret

02021db0 <open>:
 2021db0:	defffa04 	addi	sp,sp,-24
 2021db4:	dc000015 	stw	r16,0(sp)
 2021db8:	2821883a 	mov	r16,r5
 2021dbc:	d1600204 	addi	r5,gp,-32760
 2021dc0:	dc800215 	stw	r18,8(sp)
 2021dc4:	dc400115 	stw	r17,4(sp)
 2021dc8:	dfc00515 	stw	ra,20(sp)
 2021dcc:	dd000415 	stw	r20,16(sp)
 2021dd0:	dcc00315 	stw	r19,12(sp)
 2021dd4:	2023883a 	mov	r17,r4
 2021dd8:	3025883a 	mov	r18,r6
 2021ddc:	2021f9c0 	call	2021f9c <alt_find_dev>
 2021de0:	10004a26 	beq	r2,zero,2021f0c <open+0x15c>
 2021de4:	1009883a 	mov	r4,r2
 2021de8:	1029883a 	mov	r20,r2
 2021dec:	20220c00 	call	20220c0 <alt_get_fd>
 2021df0:	1027883a 	mov	r19,r2
 2021df4:	1000090e 	bge	r2,zero,2021e1c <open+0x6c>
 2021df8:	04e1c83a 	sub	r16,zero,r19
 2021dfc:	9809883a 	mov	r4,r19
 2021e00:	2021f380 	call	2021f38 <alt_release_fd>
 2021e04:	d0a00617 	ldw	r2,-32744(gp)
 2021e08:	10004726 	beq	r2,zero,2021f28 <open+0x178>
 2021e0c:	103ee83a 	callr	r2
 2021e10:	14000015 	stw	r16,0(r2)
 2021e14:	00bfffc4 	movi	r2,-1
 2021e18:	00003206 	br	2021ee4 <open+0x134>
 2021e1c:	01400304 	movi	r5,12
 2021e20:	9809883a 	mov	r4,r19
 2021e24:	20215b00 	call	20215b0 <__mulsi3>
 2021e28:	01500034 	movhi	r5,16384
 2021e2c:	00c080b4 	movhi	r3,514
 2021e30:	297fffc4 	addi	r5,r5,-1
 2021e34:	18d4e304 	addi	r3,r3,21388
 2021e38:	814a703a 	and	r5,r16,r5
 2021e3c:	1889883a 	add	r4,r3,r2
 2021e40:	29500034 	orhi	r5,r5,16384
 2021e44:	d2600117 	ldw	r9,-32764(gp)
 2021e48:	22000017 	ldw	r8,0(r4)
 2021e4c:	21400215 	stw	r5,8(r4)
 2021e50:	19800204 	addi	r6,r3,8
 2021e54:	000b883a 	mov	r5,zero
 2021e58:	00000306 	br	2021e68 <open+0xb8>
 2021e5c:	18c00304 	addi	r3,r3,12
 2021e60:	31800304 	addi	r6,r6,12
 2021e64:	49401636 	bltu	r9,r5,2021ec0 <open+0x110>
 2021e68:	19c00017 	ldw	r7,0(r3)
 2021e6c:	29400044 	addi	r5,r5,1
 2021e70:	3a3ffa1e 	bne	r7,r8,2021e5c <_gp+0xffff40fc>
 2021e74:	30800017 	ldw	r2,0(r6)
 2021e78:	103ff80e 	bge	r2,zero,2021e5c <_gp+0xffff40fc>
 2021e7c:	20fff726 	beq	r4,r3,2021e5c <_gp+0xffff40fc>
 2021e80:	04000344 	movi	r16,13
 2021e84:	003fdd06 	br	2021dfc <_gp+0xffff409c>
 2021e88:	1009883a 	mov	r4,r2
 2021e8c:	20220c00 	call	20220c0 <alt_get_fd>
 2021e90:	1027883a 	mov	r19,r2
 2021e94:	103fd816 	blt	r2,zero,2021df8 <_gp+0xffff4098>
 2021e98:	9809883a 	mov	r4,r19
 2021e9c:	01400304 	movi	r5,12
 2021ea0:	20215b00 	call	20215b0 <__mulsi3>
 2021ea4:	010080b4 	movhi	r4,514
 2021ea8:	2114e304 	addi	r4,r4,21388
 2021eac:	2089883a 	add	r4,r4,r2
 2021eb0:	00900034 	movhi	r2,16384
 2021eb4:	10bfffc4 	addi	r2,r2,-1
 2021eb8:	8084703a 	and	r2,r16,r2
 2021ebc:	20800215 	stw	r2,8(r4)
 2021ec0:	a0800317 	ldw	r2,12(r20)
 2021ec4:	10000f26 	beq	r2,zero,2021f04 <open+0x154>
 2021ec8:	900f883a 	mov	r7,r18
 2021ecc:	800d883a 	mov	r6,r16
 2021ed0:	880b883a 	mov	r5,r17
 2021ed4:	103ee83a 	callr	r2
 2021ed8:	1007883a 	mov	r3,r2
 2021edc:	9805883a 	mov	r2,r19
 2021ee0:	18001316 	blt	r3,zero,2021f30 <open+0x180>
 2021ee4:	dfc00517 	ldw	ra,20(sp)
 2021ee8:	dd000417 	ldw	r20,16(sp)
 2021eec:	dcc00317 	ldw	r19,12(sp)
 2021ef0:	dc800217 	ldw	r18,8(sp)
 2021ef4:	dc400117 	ldw	r17,4(sp)
 2021ef8:	dc000017 	ldw	r16,0(sp)
 2021efc:	dec00604 	addi	sp,sp,24
 2021f00:	f800283a 	ret
 2021f04:	9805883a 	mov	r2,r19
 2021f08:	003ff606 	br	2021ee4 <_gp+0xffff4184>
 2021f0c:	8809883a 	mov	r4,r17
 2021f10:	20220140 	call	2022014 <alt_find_file>
 2021f14:	1029883a 	mov	r20,r2
 2021f18:	103fdb1e 	bne	r2,zero,2021e88 <_gp+0xffff4128>
 2021f1c:	040004c4 	movi	r16,19
 2021f20:	04ffffc4 	movi	r19,-1
 2021f24:	003fb506 	br	2021dfc <_gp+0xffff409c>
 2021f28:	d0a29b04 	addi	r2,gp,-30100
 2021f2c:	003fb806 	br	2021e10 <_gp+0xffff40b0>
 2021f30:	00e1c83a 	sub	r16,zero,r3
 2021f34:	003fb106 	br	2021dfc <_gp+0xffff409c>

02021f38 <alt_release_fd>:
 2021f38:	00c00084 	movi	r3,2
 2021f3c:	1900140e 	bge	r3,r4,2021f90 <alt_release_fd+0x58>
 2021f40:	defffd04 	addi	sp,sp,-12
 2021f44:	dc400115 	stw	r17,4(sp)
 2021f48:	01400304 	movi	r5,12
 2021f4c:	044080b4 	movhi	r17,514
 2021f50:	dfc00215 	stw	ra,8(sp)
 2021f54:	dc000015 	stw	r16,0(sp)
 2021f58:	8c54e304 	addi	r17,r17,21388
 2021f5c:	2021883a 	mov	r16,r4
 2021f60:	20215b00 	call	20215b0 <__mulsi3>
 2021f64:	8885883a 	add	r2,r17,r2
 2021f68:	01400304 	movi	r5,12
 2021f6c:	8009883a 	mov	r4,r16
 2021f70:	10000215 	stw	zero,8(r2)
 2021f74:	20215b00 	call	20215b0 <__mulsi3>
 2021f78:	8885883a 	add	r2,r17,r2
 2021f7c:	10000015 	stw	zero,0(r2)
 2021f80:	dfc00217 	ldw	ra,8(sp)
 2021f84:	dc400117 	ldw	r17,4(sp)
 2021f88:	dc000017 	ldw	r16,0(sp)
 2021f8c:	dec00304 	addi	sp,sp,12
 2021f90:	f800283a 	ret

02021f94 <altera_nios2_gen2_irq_init>:
 2021f94:	000170fa 	wrctl	ienable,zero
 2021f98:	f800283a 	ret

02021f9c <alt_find_dev>:
 2021f9c:	defffb04 	addi	sp,sp,-20
 2021fa0:	dc000015 	stw	r16,0(sp)
 2021fa4:	2c000017 	ldw	r16,0(r5)
 2021fa8:	dc400115 	stw	r17,4(sp)
 2021fac:	2823883a 	mov	r17,r5
 2021fb0:	dcc00315 	stw	r19,12(sp)
 2021fb4:	dfc00415 	stw	ra,16(sp)
 2021fb8:	dc800215 	stw	r18,8(sp)
 2021fbc:	2027883a 	mov	r19,r4
 2021fc0:	202262c0 	call	202262c <strlen>
 2021fc4:	8c000b26 	beq	r17,r16,2021ff4 <alt_find_dev+0x58>
 2021fc8:	14800044 	addi	r18,r2,1
 2021fcc:	00000206 	br	2021fd8 <alt_find_dev+0x3c>
 2021fd0:	84000017 	ldw	r16,0(r16)
 2021fd4:	8c000726 	beq	r17,r16,2021ff4 <alt_find_dev+0x58>
 2021fd8:	81000217 	ldw	r4,8(r16)
 2021fdc:	900d883a 	mov	r6,r18
 2021fe0:	980b883a 	mov	r5,r19
 2021fe4:	20222780 	call	2022278 <memcmp>
 2021fe8:	103ff91e 	bne	r2,zero,2021fd0 <_gp+0xffff4270>
 2021fec:	8005883a 	mov	r2,r16
 2021ff0:	00000106 	br	2021ff8 <alt_find_dev+0x5c>
 2021ff4:	0005883a 	mov	r2,zero
 2021ff8:	dfc00417 	ldw	ra,16(sp)
 2021ffc:	dcc00317 	ldw	r19,12(sp)
 2022000:	dc800217 	ldw	r18,8(sp)
 2022004:	dc400117 	ldw	r17,4(sp)
 2022008:	dc000017 	ldw	r16,0(sp)
 202200c:	dec00504 	addi	sp,sp,20
 2022010:	f800283a 	ret

02022014 <alt_find_file>:
 2022014:	defffa04 	addi	sp,sp,-24
 2022018:	dc000015 	stw	r16,0(sp)
 202201c:	d4200417 	ldw	r16,-32752(gp)
 2022020:	dd000415 	stw	r20,16(sp)
 2022024:	dfc00515 	stw	ra,20(sp)
 2022028:	dcc00315 	stw	r19,12(sp)
 202202c:	dc800215 	stw	r18,8(sp)
 2022030:	dc400115 	stw	r17,4(sp)
 2022034:	d5200404 	addi	r20,gp,-32752
 2022038:	85001626 	beq	r16,r20,2022094 <alt_find_file+0x80>
 202203c:	2025883a 	mov	r18,r4
 2022040:	04c00bc4 	movi	r19,47
 2022044:	00000806 	br	2022068 <alt_find_file+0x54>
 2022048:	9185883a 	add	r2,r18,r6
 202204c:	10800007 	ldb	r2,0(r2)
 2022050:	14c00126 	beq	r2,r19,2022058 <alt_find_file+0x44>
 2022054:	1000021e 	bne	r2,zero,2022060 <alt_find_file+0x4c>
 2022058:	20222780 	call	2022278 <memcmp>
 202205c:	10001626 	beq	r2,zero,20220b8 <alt_find_file+0xa4>
 2022060:	84000017 	ldw	r16,0(r16)
 2022064:	85000b26 	beq	r16,r20,2022094 <alt_find_file+0x80>
 2022068:	84400217 	ldw	r17,8(r16)
 202206c:	8809883a 	mov	r4,r17
 2022070:	202262c0 	call	202262c <strlen>
 2022074:	100d883a 	mov	r6,r2
 2022078:	8885883a 	add	r2,r17,r2
 202207c:	10bfffc7 	ldb	r2,-1(r2)
 2022080:	900b883a 	mov	r5,r18
 2022084:	8809883a 	mov	r4,r17
 2022088:	14ffef1e 	bne	r2,r19,2022048 <_gp+0xffff42e8>
 202208c:	31bfffc4 	addi	r6,r6,-1
 2022090:	003fed06 	br	2022048 <_gp+0xffff42e8>
 2022094:	0005883a 	mov	r2,zero
 2022098:	dfc00517 	ldw	ra,20(sp)
 202209c:	dd000417 	ldw	r20,16(sp)
 20220a0:	dcc00317 	ldw	r19,12(sp)
 20220a4:	dc800217 	ldw	r18,8(sp)
 20220a8:	dc400117 	ldw	r17,4(sp)
 20220ac:	dc000017 	ldw	r16,0(sp)
 20220b0:	dec00604 	addi	sp,sp,24
 20220b4:	f800283a 	ret
 20220b8:	8005883a 	mov	r2,r16
 20220bc:	003ff606 	br	2022098 <_gp+0xffff4338>

020220c0 <alt_get_fd>:
 20220c0:	defffc04 	addi	sp,sp,-16
 20220c4:	dc400115 	stw	r17,4(sp)
 20220c8:	044080b4 	movhi	r17,514
 20220cc:	8c54e304 	addi	r17,r17,21388
 20220d0:	dc000015 	stw	r16,0(sp)
 20220d4:	dfc00315 	stw	ra,12(sp)
 20220d8:	dc800215 	stw	r18,8(sp)
 20220dc:	0021883a 	mov	r16,zero
 20220e0:	8805883a 	mov	r2,r17
 20220e4:	01400804 	movi	r5,32
 20220e8:	00000206 	br	20220f4 <alt_get_fd+0x34>
 20220ec:	84000044 	addi	r16,r16,1
 20220f0:	81401326 	beq	r16,r5,2022140 <alt_get_fd+0x80>
 20220f4:	10c00017 	ldw	r3,0(r2)
 20220f8:	10800304 	addi	r2,r2,12
 20220fc:	183ffb1e 	bne	r3,zero,20220ec <_gp+0xffff438c>
 2022100:	2025883a 	mov	r18,r4
 2022104:	01400304 	movi	r5,12
 2022108:	8009883a 	mov	r4,r16
 202210c:	20215b00 	call	20215b0 <__mulsi3>
 2022110:	8885883a 	add	r2,r17,r2
 2022114:	14800015 	stw	r18,0(r2)
 2022118:	d0a00117 	ldw	r2,-32764(gp)
 202211c:	1400010e 	bge	r2,r16,2022124 <alt_get_fd+0x64>
 2022120:	d4200115 	stw	r16,-32764(gp)
 2022124:	8005883a 	mov	r2,r16
 2022128:	dfc00317 	ldw	ra,12(sp)
 202212c:	dc800217 	ldw	r18,8(sp)
 2022130:	dc400117 	ldw	r17,4(sp)
 2022134:	dc000017 	ldw	r16,0(sp)
 2022138:	dec00404 	addi	sp,sp,16
 202213c:	f800283a 	ret
 2022140:	043ffa04 	movi	r16,-24
 2022144:	003ff706 	br	2022124 <_gp+0xffff43c4>

02022148 <exit>:
 2022148:	defffe04 	addi	sp,sp,-8
 202214c:	000b883a 	mov	r5,zero
 2022150:	dc000015 	stw	r16,0(sp)
 2022154:	dfc00115 	stw	ra,4(sp)
 2022158:	2021883a 	mov	r16,r4
 202215c:	20229700 	call	2022970 <__call_exitprocs>
 2022160:	008080b4 	movhi	r2,514
 2022164:	10975f04 	addi	r2,r2,23932
 2022168:	11000017 	ldw	r4,0(r2)
 202216c:	20800f17 	ldw	r2,60(r4)
 2022170:	10000126 	beq	r2,zero,2022178 <exit+0x30>
 2022174:	103ee83a 	callr	r2
 2022178:	8009883a 	mov	r4,r16
 202217c:	202489c0 	call	202489c <_exit>

02022180 <_getc_r>:
 2022180:	defffd04 	addi	sp,sp,-12
 2022184:	dc000115 	stw	r16,4(sp)
 2022188:	dfc00215 	stw	ra,8(sp)
 202218c:	2021883a 	mov	r16,r4
 2022190:	20000226 	beq	r4,zero,202219c <_getc_r+0x1c>
 2022194:	20800e17 	ldw	r2,56(r4)
 2022198:	10000c26 	beq	r2,zero,20221cc <_getc_r+0x4c>
 202219c:	28800117 	ldw	r2,4(r5)
 20221a0:	10bfffc4 	addi	r2,r2,-1
 20221a4:	28800115 	stw	r2,4(r5)
 20221a8:	10000c16 	blt	r2,zero,20221dc <_getc_r+0x5c>
 20221ac:	28800017 	ldw	r2,0(r5)
 20221b0:	10c00044 	addi	r3,r2,1
 20221b4:	28c00015 	stw	r3,0(r5)
 20221b8:	10800003 	ldbu	r2,0(r2)
 20221bc:	dfc00217 	ldw	ra,8(sp)
 20221c0:	dc000117 	ldw	r16,4(sp)
 20221c4:	dec00304 	addi	sp,sp,12
 20221c8:	f800283a 	ret
 20221cc:	d9400015 	stw	r5,0(sp)
 20221d0:	20230f80 	call	20230f8 <__sinit>
 20221d4:	d9400017 	ldw	r5,0(sp)
 20221d8:	003ff006 	br	202219c <_gp+0xffff443c>
 20221dc:	8009883a 	mov	r4,r16
 20221e0:	dfc00217 	ldw	ra,8(sp)
 20221e4:	dc000117 	ldw	r16,4(sp)
 20221e8:	dec00304 	addi	sp,sp,12
 20221ec:	20225a41 	jmpi	20225a4 <__srget_r>

020221f0 <getc>:
 20221f0:	008080b4 	movhi	r2,514
 20221f4:	defffd04 	addi	sp,sp,-12
 20221f8:	10976004 	addi	r2,r2,23936
 20221fc:	dc400115 	stw	r17,4(sp)
 2022200:	14400017 	ldw	r17,0(r2)
 2022204:	dc000015 	stw	r16,0(sp)
 2022208:	dfc00215 	stw	ra,8(sp)
 202220c:	2021883a 	mov	r16,r4
 2022210:	88000226 	beq	r17,zero,202221c <getc+0x2c>
 2022214:	88800e17 	ldw	r2,56(r17)
 2022218:	10000d26 	beq	r2,zero,2022250 <getc+0x60>
 202221c:	80800117 	ldw	r2,4(r16)
 2022220:	10bfffc4 	addi	r2,r2,-1
 2022224:	80800115 	stw	r2,4(r16)
 2022228:	10000c16 	blt	r2,zero,202225c <getc+0x6c>
 202222c:	80800017 	ldw	r2,0(r16)
 2022230:	10c00044 	addi	r3,r2,1
 2022234:	80c00015 	stw	r3,0(r16)
 2022238:	10800003 	ldbu	r2,0(r2)
 202223c:	dfc00217 	ldw	ra,8(sp)
 2022240:	dc400117 	ldw	r17,4(sp)
 2022244:	dc000017 	ldw	r16,0(sp)
 2022248:	dec00304 	addi	sp,sp,12
 202224c:	f800283a 	ret
 2022250:	8809883a 	mov	r4,r17
 2022254:	20230f80 	call	20230f8 <__sinit>
 2022258:	003ff006 	br	202221c <_gp+0xffff44bc>
 202225c:	800b883a 	mov	r5,r16
 2022260:	8809883a 	mov	r4,r17
 2022264:	dfc00217 	ldw	ra,8(sp)
 2022268:	dc400117 	ldw	r17,4(sp)
 202226c:	dc000017 	ldw	r16,0(sp)
 2022270:	dec00304 	addi	sp,sp,12
 2022274:	20225a41 	jmpi	20225a4 <__srget_r>

02022278 <memcmp>:
 2022278:	01c000c4 	movi	r7,3
 202227c:	3980192e 	bgeu	r7,r6,20222e4 <memcmp+0x6c>
 2022280:	2144b03a 	or	r2,r4,r5
 2022284:	11c4703a 	and	r2,r2,r7
 2022288:	10000f26 	beq	r2,zero,20222c8 <memcmp+0x50>
 202228c:	20800003 	ldbu	r2,0(r4)
 2022290:	28c00003 	ldbu	r3,0(r5)
 2022294:	10c0151e 	bne	r2,r3,20222ec <memcmp+0x74>
 2022298:	31bfff84 	addi	r6,r6,-2
 202229c:	01ffffc4 	movi	r7,-1
 20222a0:	00000406 	br	20222b4 <memcmp+0x3c>
 20222a4:	20800003 	ldbu	r2,0(r4)
 20222a8:	28c00003 	ldbu	r3,0(r5)
 20222ac:	31bfffc4 	addi	r6,r6,-1
 20222b0:	10c00e1e 	bne	r2,r3,20222ec <memcmp+0x74>
 20222b4:	21000044 	addi	r4,r4,1
 20222b8:	29400044 	addi	r5,r5,1
 20222bc:	31fff91e 	bne	r6,r7,20222a4 <_gp+0xffff4544>
 20222c0:	0005883a 	mov	r2,zero
 20222c4:	f800283a 	ret
 20222c8:	20c00017 	ldw	r3,0(r4)
 20222cc:	28800017 	ldw	r2,0(r5)
 20222d0:	18bfee1e 	bne	r3,r2,202228c <_gp+0xffff452c>
 20222d4:	31bfff04 	addi	r6,r6,-4
 20222d8:	21000104 	addi	r4,r4,4
 20222dc:	29400104 	addi	r5,r5,4
 20222e0:	39bff936 	bltu	r7,r6,20222c8 <_gp+0xffff4568>
 20222e4:	303fe91e 	bne	r6,zero,202228c <_gp+0xffff452c>
 20222e8:	003ff506 	br	20222c0 <_gp+0xffff4560>
 20222ec:	10c5c83a 	sub	r2,r2,r3
 20222f0:	f800283a 	ret

020222f4 <memcpy>:
 20222f4:	defffd04 	addi	sp,sp,-12
 20222f8:	dfc00215 	stw	ra,8(sp)
 20222fc:	dc400115 	stw	r17,4(sp)
 2022300:	dc000015 	stw	r16,0(sp)
 2022304:	00c003c4 	movi	r3,15
 2022308:	2005883a 	mov	r2,r4
 202230c:	1980452e 	bgeu	r3,r6,2022424 <memcpy+0x130>
 2022310:	2906b03a 	or	r3,r5,r4
 2022314:	18c000cc 	andi	r3,r3,3
 2022318:	1800441e 	bne	r3,zero,202242c <memcpy+0x138>
 202231c:	347ffc04 	addi	r17,r6,-16
 2022320:	8822d13a 	srli	r17,r17,4
 2022324:	28c00104 	addi	r3,r5,4
 2022328:	23400104 	addi	r13,r4,4
 202232c:	8820913a 	slli	r16,r17,4
 2022330:	2b000204 	addi	r12,r5,8
 2022334:	22c00204 	addi	r11,r4,8
 2022338:	84000504 	addi	r16,r16,20
 202233c:	2a800304 	addi	r10,r5,12
 2022340:	22400304 	addi	r9,r4,12
 2022344:	2c21883a 	add	r16,r5,r16
 2022348:	2811883a 	mov	r8,r5
 202234c:	200f883a 	mov	r7,r4
 2022350:	41000017 	ldw	r4,0(r8)
 2022354:	1fc00017 	ldw	ra,0(r3)
 2022358:	63c00017 	ldw	r15,0(r12)
 202235c:	39000015 	stw	r4,0(r7)
 2022360:	53800017 	ldw	r14,0(r10)
 2022364:	6fc00015 	stw	ra,0(r13)
 2022368:	5bc00015 	stw	r15,0(r11)
 202236c:	4b800015 	stw	r14,0(r9)
 2022370:	18c00404 	addi	r3,r3,16
 2022374:	39c00404 	addi	r7,r7,16
 2022378:	42000404 	addi	r8,r8,16
 202237c:	6b400404 	addi	r13,r13,16
 2022380:	63000404 	addi	r12,r12,16
 2022384:	5ac00404 	addi	r11,r11,16
 2022388:	52800404 	addi	r10,r10,16
 202238c:	4a400404 	addi	r9,r9,16
 2022390:	1c3fef1e 	bne	r3,r16,2022350 <_gp+0xffff45f0>
 2022394:	89c00044 	addi	r7,r17,1
 2022398:	380e913a 	slli	r7,r7,4
 202239c:	310003cc 	andi	r4,r6,15
 20223a0:	02c000c4 	movi	r11,3
 20223a4:	11c7883a 	add	r3,r2,r7
 20223a8:	29cb883a 	add	r5,r5,r7
 20223ac:	5900212e 	bgeu	r11,r4,2022434 <memcpy+0x140>
 20223b0:	1813883a 	mov	r9,r3
 20223b4:	2811883a 	mov	r8,r5
 20223b8:	200f883a 	mov	r7,r4
 20223bc:	42800017 	ldw	r10,0(r8)
 20223c0:	4a400104 	addi	r9,r9,4
 20223c4:	39ffff04 	addi	r7,r7,-4
 20223c8:	4abfff15 	stw	r10,-4(r9)
 20223cc:	42000104 	addi	r8,r8,4
 20223d0:	59fffa36 	bltu	r11,r7,20223bc <_gp+0xffff465c>
 20223d4:	213fff04 	addi	r4,r4,-4
 20223d8:	2008d0ba 	srli	r4,r4,2
 20223dc:	318000cc 	andi	r6,r6,3
 20223e0:	21000044 	addi	r4,r4,1
 20223e4:	2109883a 	add	r4,r4,r4
 20223e8:	2109883a 	add	r4,r4,r4
 20223ec:	1907883a 	add	r3,r3,r4
 20223f0:	290b883a 	add	r5,r5,r4
 20223f4:	30000626 	beq	r6,zero,2022410 <memcpy+0x11c>
 20223f8:	198d883a 	add	r6,r3,r6
 20223fc:	29c00003 	ldbu	r7,0(r5)
 2022400:	18c00044 	addi	r3,r3,1
 2022404:	29400044 	addi	r5,r5,1
 2022408:	19ffffc5 	stb	r7,-1(r3)
 202240c:	19bffb1e 	bne	r3,r6,20223fc <_gp+0xffff469c>
 2022410:	dfc00217 	ldw	ra,8(sp)
 2022414:	dc400117 	ldw	r17,4(sp)
 2022418:	dc000017 	ldw	r16,0(sp)
 202241c:	dec00304 	addi	sp,sp,12
 2022420:	f800283a 	ret
 2022424:	2007883a 	mov	r3,r4
 2022428:	003ff206 	br	20223f4 <_gp+0xffff4694>
 202242c:	2007883a 	mov	r3,r4
 2022430:	003ff106 	br	20223f8 <_gp+0xffff4698>
 2022434:	200d883a 	mov	r6,r4
 2022438:	003fee06 	br	20223f4 <_gp+0xffff4694>

0202243c <_putc_r>:
 202243c:	defffc04 	addi	sp,sp,-16
 2022440:	dc000215 	stw	r16,8(sp)
 2022444:	dfc00315 	stw	ra,12(sp)
 2022448:	2021883a 	mov	r16,r4
 202244c:	20000226 	beq	r4,zero,2022458 <_putc_r+0x1c>
 2022450:	20800e17 	ldw	r2,56(r4)
 2022454:	10001b26 	beq	r2,zero,20224c4 <_putc_r+0x88>
 2022458:	30800217 	ldw	r2,8(r6)
 202245c:	10bfffc4 	addi	r2,r2,-1
 2022460:	30800215 	stw	r2,8(r6)
 2022464:	10000a16 	blt	r2,zero,2022490 <_putc_r+0x54>
 2022468:	30800017 	ldw	r2,0(r6)
 202246c:	11400005 	stb	r5,0(r2)
 2022470:	30800017 	ldw	r2,0(r6)
 2022474:	10c00044 	addi	r3,r2,1
 2022478:	30c00015 	stw	r3,0(r6)
 202247c:	10800003 	ldbu	r2,0(r2)
 2022480:	dfc00317 	ldw	ra,12(sp)
 2022484:	dc000217 	ldw	r16,8(sp)
 2022488:	dec00404 	addi	sp,sp,16
 202248c:	f800283a 	ret
 2022490:	30c00617 	ldw	r3,24(r6)
 2022494:	10c00616 	blt	r2,r3,20224b0 <_putc_r+0x74>
 2022498:	30800017 	ldw	r2,0(r6)
 202249c:	00c00284 	movi	r3,10
 20224a0:	11400005 	stb	r5,0(r2)
 20224a4:	30800017 	ldw	r2,0(r6)
 20224a8:	11400003 	ldbu	r5,0(r2)
 20224ac:	28fff11e 	bne	r5,r3,2022474 <_gp+0xffff4714>
 20224b0:	8009883a 	mov	r4,r16
 20224b4:	dfc00317 	ldw	ra,12(sp)
 20224b8:	dc000217 	ldw	r16,8(sp)
 20224bc:	dec00404 	addi	sp,sp,16
 20224c0:	20226c41 	jmpi	20226c4 <__swbuf_r>
 20224c4:	d9400015 	stw	r5,0(sp)
 20224c8:	d9800115 	stw	r6,4(sp)
 20224cc:	20230f80 	call	20230f8 <__sinit>
 20224d0:	d9800117 	ldw	r6,4(sp)
 20224d4:	d9400017 	ldw	r5,0(sp)
 20224d8:	003fdf06 	br	2022458 <_gp+0xffff46f8>

020224dc <putc>:
 20224dc:	008080b4 	movhi	r2,514
 20224e0:	defffc04 	addi	sp,sp,-16
 20224e4:	10976004 	addi	r2,r2,23936
 20224e8:	dc000115 	stw	r16,4(sp)
 20224ec:	14000017 	ldw	r16,0(r2)
 20224f0:	dc400215 	stw	r17,8(sp)
 20224f4:	dfc00315 	stw	ra,12(sp)
 20224f8:	2023883a 	mov	r17,r4
 20224fc:	80000226 	beq	r16,zero,2022508 <putc+0x2c>
 2022500:	80800e17 	ldw	r2,56(r16)
 2022504:	10001a26 	beq	r2,zero,2022570 <putc+0x94>
 2022508:	28800217 	ldw	r2,8(r5)
 202250c:	10bfffc4 	addi	r2,r2,-1
 2022510:	28800215 	stw	r2,8(r5)
 2022514:	10000b16 	blt	r2,zero,2022544 <putc+0x68>
 2022518:	28800017 	ldw	r2,0(r5)
 202251c:	14400005 	stb	r17,0(r2)
 2022520:	28800017 	ldw	r2,0(r5)
 2022524:	10c00044 	addi	r3,r2,1
 2022528:	28c00015 	stw	r3,0(r5)
 202252c:	10800003 	ldbu	r2,0(r2)
 2022530:	dfc00317 	ldw	ra,12(sp)
 2022534:	dc400217 	ldw	r17,8(sp)
 2022538:	dc000117 	ldw	r16,4(sp)
 202253c:	dec00404 	addi	sp,sp,16
 2022540:	f800283a 	ret
 2022544:	28c00617 	ldw	r3,24(r5)
 2022548:	10c00e16 	blt	r2,r3,2022584 <putc+0xa8>
 202254c:	28800017 	ldw	r2,0(r5)
 2022550:	01000284 	movi	r4,10
 2022554:	14400005 	stb	r17,0(r2)
 2022558:	28800017 	ldw	r2,0(r5)
 202255c:	10c00003 	ldbu	r3,0(r2)
 2022560:	193ff01e 	bne	r3,r4,2022524 <_gp+0xffff47c4>
 2022564:	280d883a 	mov	r6,r5
 2022568:	180b883a 	mov	r5,r3
 202256c:	00000706 	br	202258c <putc+0xb0>
 2022570:	8009883a 	mov	r4,r16
 2022574:	d9400015 	stw	r5,0(sp)
 2022578:	20230f80 	call	20230f8 <__sinit>
 202257c:	d9400017 	ldw	r5,0(sp)
 2022580:	003fe106 	br	2022508 <_gp+0xffff47a8>
 2022584:	280d883a 	mov	r6,r5
 2022588:	880b883a 	mov	r5,r17
 202258c:	8009883a 	mov	r4,r16
 2022590:	dfc00317 	ldw	ra,12(sp)
 2022594:	dc400217 	ldw	r17,8(sp)
 2022598:	dc000117 	ldw	r16,4(sp)
 202259c:	dec00404 	addi	sp,sp,16
 20225a0:	20226c41 	jmpi	20226c4 <__swbuf_r>

020225a4 <__srget_r>:
 20225a4:	defffd04 	addi	sp,sp,-12
 20225a8:	dc400115 	stw	r17,4(sp)
 20225ac:	dc000015 	stw	r16,0(sp)
 20225b0:	dfc00215 	stw	ra,8(sp)
 20225b4:	2023883a 	mov	r17,r4
 20225b8:	2821883a 	mov	r16,r5
 20225bc:	20000226 	beq	r4,zero,20225c8 <__srget_r+0x24>
 20225c0:	20800e17 	ldw	r2,56(r4)
 20225c4:	10001026 	beq	r2,zero,2022608 <__srget_r+0x64>
 20225c8:	800b883a 	mov	r5,r16
 20225cc:	8809883a 	mov	r4,r17
 20225d0:	20242100 	call	2024210 <__srefill_r>
 20225d4:	10000e1e 	bne	r2,zero,2022610 <__srget_r+0x6c>
 20225d8:	80c00017 	ldw	r3,0(r16)
 20225dc:	80800117 	ldw	r2,4(r16)
 20225e0:	19000044 	addi	r4,r3,1
 20225e4:	10bfffc4 	addi	r2,r2,-1
 20225e8:	80800115 	stw	r2,4(r16)
 20225ec:	81000015 	stw	r4,0(r16)
 20225f0:	18800003 	ldbu	r2,0(r3)
 20225f4:	dfc00217 	ldw	ra,8(sp)
 20225f8:	dc400117 	ldw	r17,4(sp)
 20225fc:	dc000017 	ldw	r16,0(sp)
 2022600:	dec00304 	addi	sp,sp,12
 2022604:	f800283a 	ret
 2022608:	20230f80 	call	20230f8 <__sinit>
 202260c:	003fee06 	br	20225c8 <_gp+0xffff4868>
 2022610:	00bfffc4 	movi	r2,-1
 2022614:	003ff706 	br	20225f4 <_gp+0xffff4894>

02022618 <__srget>:
 2022618:	008080b4 	movhi	r2,514
 202261c:	10976004 	addi	r2,r2,23936
 2022620:	200b883a 	mov	r5,r4
 2022624:	11000017 	ldw	r4,0(r2)
 2022628:	20225a41 	jmpi	20225a4 <__srget_r>

0202262c <strlen>:
 202262c:	208000cc 	andi	r2,r4,3
 2022630:	10002026 	beq	r2,zero,20226b4 <strlen+0x88>
 2022634:	20800007 	ldb	r2,0(r4)
 2022638:	10002026 	beq	r2,zero,20226bc <strlen+0x90>
 202263c:	2005883a 	mov	r2,r4
 2022640:	00000206 	br	202264c <strlen+0x20>
 2022644:	10c00007 	ldb	r3,0(r2)
 2022648:	18001826 	beq	r3,zero,20226ac <strlen+0x80>
 202264c:	10800044 	addi	r2,r2,1
 2022650:	10c000cc 	andi	r3,r2,3
 2022654:	183ffb1e 	bne	r3,zero,2022644 <_gp+0xffff48e4>
 2022658:	10c00017 	ldw	r3,0(r2)
 202265c:	01ffbff4 	movhi	r7,65279
 2022660:	39ffbfc4 	addi	r7,r7,-257
 2022664:	00ca303a 	nor	r5,zero,r3
 2022668:	01a02074 	movhi	r6,32897
 202266c:	19c7883a 	add	r3,r3,r7
 2022670:	31a02004 	addi	r6,r6,-32640
 2022674:	1946703a 	and	r3,r3,r5
 2022678:	1986703a 	and	r3,r3,r6
 202267c:	1800091e 	bne	r3,zero,20226a4 <strlen+0x78>
 2022680:	10800104 	addi	r2,r2,4
 2022684:	10c00017 	ldw	r3,0(r2)
 2022688:	19cb883a 	add	r5,r3,r7
 202268c:	00c6303a 	nor	r3,zero,r3
 2022690:	28c6703a 	and	r3,r5,r3
 2022694:	1986703a 	and	r3,r3,r6
 2022698:	183ff926 	beq	r3,zero,2022680 <_gp+0xffff4920>
 202269c:	00000106 	br	20226a4 <strlen+0x78>
 20226a0:	10800044 	addi	r2,r2,1
 20226a4:	10c00007 	ldb	r3,0(r2)
 20226a8:	183ffd1e 	bne	r3,zero,20226a0 <_gp+0xffff4940>
 20226ac:	1105c83a 	sub	r2,r2,r4
 20226b0:	f800283a 	ret
 20226b4:	2005883a 	mov	r2,r4
 20226b8:	003fe706 	br	2022658 <_gp+0xffff48f8>
 20226bc:	0005883a 	mov	r2,zero
 20226c0:	f800283a 	ret

020226c4 <__swbuf_r>:
 20226c4:	defffb04 	addi	sp,sp,-20
 20226c8:	dcc00315 	stw	r19,12(sp)
 20226cc:	dc800215 	stw	r18,8(sp)
 20226d0:	dc000015 	stw	r16,0(sp)
 20226d4:	dfc00415 	stw	ra,16(sp)
 20226d8:	dc400115 	stw	r17,4(sp)
 20226dc:	2025883a 	mov	r18,r4
 20226e0:	2827883a 	mov	r19,r5
 20226e4:	3021883a 	mov	r16,r6
 20226e8:	20000226 	beq	r4,zero,20226f4 <__swbuf_r+0x30>
 20226ec:	20800e17 	ldw	r2,56(r4)
 20226f0:	10004226 	beq	r2,zero,20227fc <__swbuf_r+0x138>
 20226f4:	80800617 	ldw	r2,24(r16)
 20226f8:	8100030b 	ldhu	r4,12(r16)
 20226fc:	80800215 	stw	r2,8(r16)
 2022700:	2080020c 	andi	r2,r4,8
 2022704:	10003626 	beq	r2,zero,20227e0 <__swbuf_r+0x11c>
 2022708:	80c00417 	ldw	r3,16(r16)
 202270c:	18003426 	beq	r3,zero,20227e0 <__swbuf_r+0x11c>
 2022710:	2088000c 	andi	r2,r4,8192
 2022714:	9c403fcc 	andi	r17,r19,255
 2022718:	10001a26 	beq	r2,zero,2022784 <__swbuf_r+0xc0>
 202271c:	80800017 	ldw	r2,0(r16)
 2022720:	81000517 	ldw	r4,20(r16)
 2022724:	10c7c83a 	sub	r3,r2,r3
 2022728:	1900200e 	bge	r3,r4,20227ac <__swbuf_r+0xe8>
 202272c:	18c00044 	addi	r3,r3,1
 2022730:	81000217 	ldw	r4,8(r16)
 2022734:	11400044 	addi	r5,r2,1
 2022738:	81400015 	stw	r5,0(r16)
 202273c:	213fffc4 	addi	r4,r4,-1
 2022740:	81000215 	stw	r4,8(r16)
 2022744:	14c00005 	stb	r19,0(r2)
 2022748:	80800517 	ldw	r2,20(r16)
 202274c:	10c01e26 	beq	r2,r3,20227c8 <__swbuf_r+0x104>
 2022750:	8080030b 	ldhu	r2,12(r16)
 2022754:	1080004c 	andi	r2,r2,1
 2022758:	10000226 	beq	r2,zero,2022764 <__swbuf_r+0xa0>
 202275c:	00800284 	movi	r2,10
 2022760:	88801926 	beq	r17,r2,20227c8 <__swbuf_r+0x104>
 2022764:	8805883a 	mov	r2,r17
 2022768:	dfc00417 	ldw	ra,16(sp)
 202276c:	dcc00317 	ldw	r19,12(sp)
 2022770:	dc800217 	ldw	r18,8(sp)
 2022774:	dc400117 	ldw	r17,4(sp)
 2022778:	dc000017 	ldw	r16,0(sp)
 202277c:	dec00504 	addi	sp,sp,20
 2022780:	f800283a 	ret
 2022784:	81401917 	ldw	r5,100(r16)
 2022788:	00b7ffc4 	movi	r2,-8193
 202278c:	21080014 	ori	r4,r4,8192
 2022790:	2884703a 	and	r2,r5,r2
 2022794:	80801915 	stw	r2,100(r16)
 2022798:	80800017 	ldw	r2,0(r16)
 202279c:	8100030d 	sth	r4,12(r16)
 20227a0:	81000517 	ldw	r4,20(r16)
 20227a4:	10c7c83a 	sub	r3,r2,r3
 20227a8:	193fe016 	blt	r3,r4,202272c <_gp+0xffff49cc>
 20227ac:	800b883a 	mov	r5,r16
 20227b0:	9009883a 	mov	r4,r18
 20227b4:	2022d0c0 	call	2022d0c <_fflush_r>
 20227b8:	1000071e 	bne	r2,zero,20227d8 <__swbuf_r+0x114>
 20227bc:	80800017 	ldw	r2,0(r16)
 20227c0:	00c00044 	movi	r3,1
 20227c4:	003fda06 	br	2022730 <_gp+0xffff49d0>
 20227c8:	800b883a 	mov	r5,r16
 20227cc:	9009883a 	mov	r4,r18
 20227d0:	2022d0c0 	call	2022d0c <_fflush_r>
 20227d4:	103fe326 	beq	r2,zero,2022764 <_gp+0xffff4a04>
 20227d8:	00bfffc4 	movi	r2,-1
 20227dc:	003fe206 	br	2022768 <_gp+0xffff4a08>
 20227e0:	800b883a 	mov	r5,r16
 20227e4:	9009883a 	mov	r4,r18
 20227e8:	202281c0 	call	202281c <__swsetup_r>
 20227ec:	103ffa1e 	bne	r2,zero,20227d8 <_gp+0xffff4a78>
 20227f0:	8100030b 	ldhu	r4,12(r16)
 20227f4:	80c00417 	ldw	r3,16(r16)
 20227f8:	003fc506 	br	2022710 <_gp+0xffff49b0>
 20227fc:	20230f80 	call	20230f8 <__sinit>
 2022800:	003fbc06 	br	20226f4 <_gp+0xffff4994>

02022804 <__swbuf>:
 2022804:	008080b4 	movhi	r2,514
 2022808:	10976004 	addi	r2,r2,23936
 202280c:	280d883a 	mov	r6,r5
 2022810:	200b883a 	mov	r5,r4
 2022814:	11000017 	ldw	r4,0(r2)
 2022818:	20226c41 	jmpi	20226c4 <__swbuf_r>

0202281c <__swsetup_r>:
 202281c:	008080b4 	movhi	r2,514
 2022820:	defffd04 	addi	sp,sp,-12
 2022824:	10976004 	addi	r2,r2,23936
 2022828:	dc400115 	stw	r17,4(sp)
 202282c:	2023883a 	mov	r17,r4
 2022830:	11000017 	ldw	r4,0(r2)
 2022834:	dc000015 	stw	r16,0(sp)
 2022838:	dfc00215 	stw	ra,8(sp)
 202283c:	2821883a 	mov	r16,r5
 2022840:	20000226 	beq	r4,zero,202284c <__swsetup_r+0x30>
 2022844:	20800e17 	ldw	r2,56(r4)
 2022848:	10003126 	beq	r2,zero,2022910 <__swsetup_r+0xf4>
 202284c:	8080030b 	ldhu	r2,12(r16)
 2022850:	10c0020c 	andi	r3,r2,8
 2022854:	1009883a 	mov	r4,r2
 2022858:	18000f26 	beq	r3,zero,2022898 <__swsetup_r+0x7c>
 202285c:	80c00417 	ldw	r3,16(r16)
 2022860:	18001526 	beq	r3,zero,20228b8 <__swsetup_r+0x9c>
 2022864:	1100004c 	andi	r4,r2,1
 2022868:	20001c1e 	bne	r4,zero,20228dc <__swsetup_r+0xc0>
 202286c:	1080008c 	andi	r2,r2,2
 2022870:	1000291e 	bne	r2,zero,2022918 <__swsetup_r+0xfc>
 2022874:	80800517 	ldw	r2,20(r16)
 2022878:	80800215 	stw	r2,8(r16)
 202287c:	18001c26 	beq	r3,zero,20228f0 <__swsetup_r+0xd4>
 2022880:	0005883a 	mov	r2,zero
 2022884:	dfc00217 	ldw	ra,8(sp)
 2022888:	dc400117 	ldw	r17,4(sp)
 202288c:	dc000017 	ldw	r16,0(sp)
 2022890:	dec00304 	addi	sp,sp,12
 2022894:	f800283a 	ret
 2022898:	2080040c 	andi	r2,r4,16
 202289c:	10002e26 	beq	r2,zero,2022958 <__swsetup_r+0x13c>
 20228a0:	2080010c 	andi	r2,r4,4
 20228a4:	10001e1e 	bne	r2,zero,2022920 <__swsetup_r+0x104>
 20228a8:	80c00417 	ldw	r3,16(r16)
 20228ac:	20800214 	ori	r2,r4,8
 20228b0:	8080030d 	sth	r2,12(r16)
 20228b4:	183feb1e 	bne	r3,zero,2022864 <_gp+0xffff4b04>
 20228b8:	1100a00c 	andi	r4,r2,640
 20228bc:	01408004 	movi	r5,512
 20228c0:	217fe826 	beq	r4,r5,2022864 <_gp+0xffff4b04>
 20228c4:	800b883a 	mov	r5,r16
 20228c8:	8809883a 	mov	r4,r17
 20228cc:	20237040 	call	2023704 <__smakebuf_r>
 20228d0:	8080030b 	ldhu	r2,12(r16)
 20228d4:	80c00417 	ldw	r3,16(r16)
 20228d8:	003fe206 	br	2022864 <_gp+0xffff4b04>
 20228dc:	80800517 	ldw	r2,20(r16)
 20228e0:	80000215 	stw	zero,8(r16)
 20228e4:	0085c83a 	sub	r2,zero,r2
 20228e8:	80800615 	stw	r2,24(r16)
 20228ec:	183fe41e 	bne	r3,zero,2022880 <_gp+0xffff4b20>
 20228f0:	80c0030b 	ldhu	r3,12(r16)
 20228f4:	0005883a 	mov	r2,zero
 20228f8:	1900200c 	andi	r4,r3,128
 20228fc:	203fe126 	beq	r4,zero,2022884 <_gp+0xffff4b24>
 2022900:	18c01014 	ori	r3,r3,64
 2022904:	80c0030d 	sth	r3,12(r16)
 2022908:	00bfffc4 	movi	r2,-1
 202290c:	003fdd06 	br	2022884 <_gp+0xffff4b24>
 2022910:	20230f80 	call	20230f8 <__sinit>
 2022914:	003fcd06 	br	202284c <_gp+0xffff4aec>
 2022918:	0005883a 	mov	r2,zero
 202291c:	003fd606 	br	2022878 <_gp+0xffff4b18>
 2022920:	81400c17 	ldw	r5,48(r16)
 2022924:	28000626 	beq	r5,zero,2022940 <__swsetup_r+0x124>
 2022928:	80801004 	addi	r2,r16,64
 202292c:	28800326 	beq	r5,r2,202293c <__swsetup_r+0x120>
 2022930:	8809883a 	mov	r4,r17
 2022934:	202326c0 	call	202326c <_free_r>
 2022938:	8100030b 	ldhu	r4,12(r16)
 202293c:	80000c15 	stw	zero,48(r16)
 2022940:	80c00417 	ldw	r3,16(r16)
 2022944:	00bff6c4 	movi	r2,-37
 2022948:	1108703a 	and	r4,r2,r4
 202294c:	80000115 	stw	zero,4(r16)
 2022950:	80c00015 	stw	r3,0(r16)
 2022954:	003fd506 	br	20228ac <_gp+0xffff4b4c>
 2022958:	00800244 	movi	r2,9
 202295c:	88800015 	stw	r2,0(r17)
 2022960:	20801014 	ori	r2,r4,64
 2022964:	8080030d 	sth	r2,12(r16)
 2022968:	00bfffc4 	movi	r2,-1
 202296c:	003fc506 	br	2022884 <_gp+0xffff4b24>

02022970 <__call_exitprocs>:
 2022970:	defff504 	addi	sp,sp,-44
 2022974:	df000915 	stw	fp,36(sp)
 2022978:	dd400615 	stw	r21,24(sp)
 202297c:	dc800315 	stw	r18,12(sp)
 2022980:	dfc00a15 	stw	ra,40(sp)
 2022984:	ddc00815 	stw	r23,32(sp)
 2022988:	dd800715 	stw	r22,28(sp)
 202298c:	dd000515 	stw	r20,20(sp)
 2022990:	dcc00415 	stw	r19,16(sp)
 2022994:	dc400215 	stw	r17,8(sp)
 2022998:	dc000115 	stw	r16,4(sp)
 202299c:	d9000015 	stw	r4,0(sp)
 20229a0:	2839883a 	mov	fp,r5
 20229a4:	04800044 	movi	r18,1
 20229a8:	057fffc4 	movi	r21,-1
 20229ac:	008080b4 	movhi	r2,514
 20229b0:	10975f04 	addi	r2,r2,23932
 20229b4:	12000017 	ldw	r8,0(r2)
 20229b8:	45005217 	ldw	r20,328(r8)
 20229bc:	44c05204 	addi	r19,r8,328
 20229c0:	a0001c26 	beq	r20,zero,2022a34 <__call_exitprocs+0xc4>
 20229c4:	a0800117 	ldw	r2,4(r20)
 20229c8:	15ffffc4 	addi	r23,r2,-1
 20229cc:	b8000d16 	blt	r23,zero,2022a04 <__call_exitprocs+0x94>
 20229d0:	14000044 	addi	r16,r2,1
 20229d4:	8421883a 	add	r16,r16,r16
 20229d8:	8421883a 	add	r16,r16,r16
 20229dc:	84402004 	addi	r17,r16,128
 20229e0:	a463883a 	add	r17,r20,r17
 20229e4:	a421883a 	add	r16,r20,r16
 20229e8:	e0001e26 	beq	fp,zero,2022a64 <__call_exitprocs+0xf4>
 20229ec:	80804017 	ldw	r2,256(r16)
 20229f0:	e0801c26 	beq	fp,r2,2022a64 <__call_exitprocs+0xf4>
 20229f4:	bdffffc4 	addi	r23,r23,-1
 20229f8:	843fff04 	addi	r16,r16,-4
 20229fc:	8c7fff04 	addi	r17,r17,-4
 2022a00:	bd7ff91e 	bne	r23,r21,20229e8 <_gp+0xffff4c88>
 2022a04:	00800034 	movhi	r2,0
 2022a08:	10800004 	addi	r2,r2,0
 2022a0c:	10000926 	beq	r2,zero,2022a34 <__call_exitprocs+0xc4>
 2022a10:	a0800117 	ldw	r2,4(r20)
 2022a14:	1000301e 	bne	r2,zero,2022ad8 <__call_exitprocs+0x168>
 2022a18:	a0800017 	ldw	r2,0(r20)
 2022a1c:	10003226 	beq	r2,zero,2022ae8 <__call_exitprocs+0x178>
 2022a20:	a009883a 	mov	r4,r20
 2022a24:	98800015 	stw	r2,0(r19)
 2022a28:	00000000 	call	0 <__alt_mem_sdram>
 2022a2c:	9d000017 	ldw	r20,0(r19)
 2022a30:	a03fe41e 	bne	r20,zero,20229c4 <_gp+0xffff4c64>
 2022a34:	dfc00a17 	ldw	ra,40(sp)
 2022a38:	df000917 	ldw	fp,36(sp)
 2022a3c:	ddc00817 	ldw	r23,32(sp)
 2022a40:	dd800717 	ldw	r22,28(sp)
 2022a44:	dd400617 	ldw	r21,24(sp)
 2022a48:	dd000517 	ldw	r20,20(sp)
 2022a4c:	dcc00417 	ldw	r19,16(sp)
 2022a50:	dc800317 	ldw	r18,12(sp)
 2022a54:	dc400217 	ldw	r17,8(sp)
 2022a58:	dc000117 	ldw	r16,4(sp)
 2022a5c:	dec00b04 	addi	sp,sp,44
 2022a60:	f800283a 	ret
 2022a64:	a0800117 	ldw	r2,4(r20)
 2022a68:	80c00017 	ldw	r3,0(r16)
 2022a6c:	10bfffc4 	addi	r2,r2,-1
 2022a70:	15c01426 	beq	r2,r23,2022ac4 <__call_exitprocs+0x154>
 2022a74:	80000015 	stw	zero,0(r16)
 2022a78:	183fde26 	beq	r3,zero,20229f4 <_gp+0xffff4c94>
 2022a7c:	95c8983a 	sll	r4,r18,r23
 2022a80:	a0806217 	ldw	r2,392(r20)
 2022a84:	a5800117 	ldw	r22,4(r20)
 2022a88:	2084703a 	and	r2,r4,r2
 2022a8c:	10000b26 	beq	r2,zero,2022abc <__call_exitprocs+0x14c>
 2022a90:	a0806317 	ldw	r2,396(r20)
 2022a94:	2088703a 	and	r4,r4,r2
 2022a98:	20000c1e 	bne	r4,zero,2022acc <__call_exitprocs+0x15c>
 2022a9c:	89400017 	ldw	r5,0(r17)
 2022aa0:	d9000017 	ldw	r4,0(sp)
 2022aa4:	183ee83a 	callr	r3
 2022aa8:	a0800117 	ldw	r2,4(r20)
 2022aac:	15bfbf1e 	bne	r2,r22,20229ac <_gp+0xffff4c4c>
 2022ab0:	98800017 	ldw	r2,0(r19)
 2022ab4:	153fcf26 	beq	r2,r20,20229f4 <_gp+0xffff4c94>
 2022ab8:	003fbc06 	br	20229ac <_gp+0xffff4c4c>
 2022abc:	183ee83a 	callr	r3
 2022ac0:	003ff906 	br	2022aa8 <_gp+0xffff4d48>
 2022ac4:	a5c00115 	stw	r23,4(r20)
 2022ac8:	003feb06 	br	2022a78 <_gp+0xffff4d18>
 2022acc:	89000017 	ldw	r4,0(r17)
 2022ad0:	183ee83a 	callr	r3
 2022ad4:	003ff406 	br	2022aa8 <_gp+0xffff4d48>
 2022ad8:	a0800017 	ldw	r2,0(r20)
 2022adc:	a027883a 	mov	r19,r20
 2022ae0:	1029883a 	mov	r20,r2
 2022ae4:	003fb606 	br	20229c0 <_gp+0xffff4c60>
 2022ae8:	0005883a 	mov	r2,zero
 2022aec:	003ffb06 	br	2022adc <_gp+0xffff4d7c>

02022af0 <__sflush_r>:
 2022af0:	2880030b 	ldhu	r2,12(r5)
 2022af4:	defffb04 	addi	sp,sp,-20
 2022af8:	dcc00315 	stw	r19,12(sp)
 2022afc:	dc400115 	stw	r17,4(sp)
 2022b00:	dfc00415 	stw	ra,16(sp)
 2022b04:	dc800215 	stw	r18,8(sp)
 2022b08:	dc000015 	stw	r16,0(sp)
 2022b0c:	10c0020c 	andi	r3,r2,8
 2022b10:	2823883a 	mov	r17,r5
 2022b14:	2027883a 	mov	r19,r4
 2022b18:	1800311e 	bne	r3,zero,2022be0 <__sflush_r+0xf0>
 2022b1c:	28c00117 	ldw	r3,4(r5)
 2022b20:	10820014 	ori	r2,r2,2048
 2022b24:	2880030d 	sth	r2,12(r5)
 2022b28:	00c04b0e 	bge	zero,r3,2022c58 <__sflush_r+0x168>
 2022b2c:	8a000a17 	ldw	r8,40(r17)
 2022b30:	40002326 	beq	r8,zero,2022bc0 <__sflush_r+0xd0>
 2022b34:	9c000017 	ldw	r16,0(r19)
 2022b38:	10c4000c 	andi	r3,r2,4096
 2022b3c:	98000015 	stw	zero,0(r19)
 2022b40:	18004826 	beq	r3,zero,2022c64 <__sflush_r+0x174>
 2022b44:	89801417 	ldw	r6,80(r17)
 2022b48:	10c0010c 	andi	r3,r2,4
 2022b4c:	18000626 	beq	r3,zero,2022b68 <__sflush_r+0x78>
 2022b50:	88c00117 	ldw	r3,4(r17)
 2022b54:	88800c17 	ldw	r2,48(r17)
 2022b58:	30cdc83a 	sub	r6,r6,r3
 2022b5c:	10000226 	beq	r2,zero,2022b68 <__sflush_r+0x78>
 2022b60:	88800f17 	ldw	r2,60(r17)
 2022b64:	308dc83a 	sub	r6,r6,r2
 2022b68:	89400717 	ldw	r5,28(r17)
 2022b6c:	000f883a 	mov	r7,zero
 2022b70:	9809883a 	mov	r4,r19
 2022b74:	403ee83a 	callr	r8
 2022b78:	00ffffc4 	movi	r3,-1
 2022b7c:	10c04426 	beq	r2,r3,2022c90 <__sflush_r+0x1a0>
 2022b80:	88c0030b 	ldhu	r3,12(r17)
 2022b84:	89000417 	ldw	r4,16(r17)
 2022b88:	88000115 	stw	zero,4(r17)
 2022b8c:	197dffcc 	andi	r5,r3,63487
 2022b90:	8940030d 	sth	r5,12(r17)
 2022b94:	89000015 	stw	r4,0(r17)
 2022b98:	18c4000c 	andi	r3,r3,4096
 2022b9c:	18002c1e 	bne	r3,zero,2022c50 <__sflush_r+0x160>
 2022ba0:	89400c17 	ldw	r5,48(r17)
 2022ba4:	9c000015 	stw	r16,0(r19)
 2022ba8:	28000526 	beq	r5,zero,2022bc0 <__sflush_r+0xd0>
 2022bac:	88801004 	addi	r2,r17,64
 2022bb0:	28800226 	beq	r5,r2,2022bbc <__sflush_r+0xcc>
 2022bb4:	9809883a 	mov	r4,r19
 2022bb8:	202326c0 	call	202326c <_free_r>
 2022bbc:	88000c15 	stw	zero,48(r17)
 2022bc0:	0005883a 	mov	r2,zero
 2022bc4:	dfc00417 	ldw	ra,16(sp)
 2022bc8:	dcc00317 	ldw	r19,12(sp)
 2022bcc:	dc800217 	ldw	r18,8(sp)
 2022bd0:	dc400117 	ldw	r17,4(sp)
 2022bd4:	dc000017 	ldw	r16,0(sp)
 2022bd8:	dec00504 	addi	sp,sp,20
 2022bdc:	f800283a 	ret
 2022be0:	2c800417 	ldw	r18,16(r5)
 2022be4:	903ff626 	beq	r18,zero,2022bc0 <_gp+0xffff4e60>
 2022be8:	2c000017 	ldw	r16,0(r5)
 2022bec:	108000cc 	andi	r2,r2,3
 2022bf0:	2c800015 	stw	r18,0(r5)
 2022bf4:	84a1c83a 	sub	r16,r16,r18
 2022bf8:	1000131e 	bne	r2,zero,2022c48 <__sflush_r+0x158>
 2022bfc:	28800517 	ldw	r2,20(r5)
 2022c00:	88800215 	stw	r2,8(r17)
 2022c04:	04000316 	blt	zero,r16,2022c14 <__sflush_r+0x124>
 2022c08:	003fed06 	br	2022bc0 <_gp+0xffff4e60>
 2022c0c:	90a5883a 	add	r18,r18,r2
 2022c10:	043feb0e 	bge	zero,r16,2022bc0 <_gp+0xffff4e60>
 2022c14:	88800917 	ldw	r2,36(r17)
 2022c18:	89400717 	ldw	r5,28(r17)
 2022c1c:	800f883a 	mov	r7,r16
 2022c20:	900d883a 	mov	r6,r18
 2022c24:	9809883a 	mov	r4,r19
 2022c28:	103ee83a 	callr	r2
 2022c2c:	80a1c83a 	sub	r16,r16,r2
 2022c30:	00bff616 	blt	zero,r2,2022c0c <_gp+0xffff4eac>
 2022c34:	88c0030b 	ldhu	r3,12(r17)
 2022c38:	00bfffc4 	movi	r2,-1
 2022c3c:	18c01014 	ori	r3,r3,64
 2022c40:	88c0030d 	sth	r3,12(r17)
 2022c44:	003fdf06 	br	2022bc4 <_gp+0xffff4e64>
 2022c48:	0005883a 	mov	r2,zero
 2022c4c:	003fec06 	br	2022c00 <_gp+0xffff4ea0>
 2022c50:	88801415 	stw	r2,80(r17)
 2022c54:	003fd206 	br	2022ba0 <_gp+0xffff4e40>
 2022c58:	28c00f17 	ldw	r3,60(r5)
 2022c5c:	00ffb316 	blt	zero,r3,2022b2c <_gp+0xffff4dcc>
 2022c60:	003fd706 	br	2022bc0 <_gp+0xffff4e60>
 2022c64:	89400717 	ldw	r5,28(r17)
 2022c68:	000d883a 	mov	r6,zero
 2022c6c:	01c00044 	movi	r7,1
 2022c70:	9809883a 	mov	r4,r19
 2022c74:	403ee83a 	callr	r8
 2022c78:	100d883a 	mov	r6,r2
 2022c7c:	00bfffc4 	movi	r2,-1
 2022c80:	30801426 	beq	r6,r2,2022cd4 <__sflush_r+0x1e4>
 2022c84:	8880030b 	ldhu	r2,12(r17)
 2022c88:	8a000a17 	ldw	r8,40(r17)
 2022c8c:	003fae06 	br	2022b48 <_gp+0xffff4de8>
 2022c90:	98c00017 	ldw	r3,0(r19)
 2022c94:	183fba26 	beq	r3,zero,2022b80 <_gp+0xffff4e20>
 2022c98:	01000744 	movi	r4,29
 2022c9c:	19000626 	beq	r3,r4,2022cb8 <__sflush_r+0x1c8>
 2022ca0:	01000584 	movi	r4,22
 2022ca4:	19000426 	beq	r3,r4,2022cb8 <__sflush_r+0x1c8>
 2022ca8:	88c0030b 	ldhu	r3,12(r17)
 2022cac:	18c01014 	ori	r3,r3,64
 2022cb0:	88c0030d 	sth	r3,12(r17)
 2022cb4:	003fc306 	br	2022bc4 <_gp+0xffff4e64>
 2022cb8:	8880030b 	ldhu	r2,12(r17)
 2022cbc:	88c00417 	ldw	r3,16(r17)
 2022cc0:	88000115 	stw	zero,4(r17)
 2022cc4:	10bdffcc 	andi	r2,r2,63487
 2022cc8:	8880030d 	sth	r2,12(r17)
 2022ccc:	88c00015 	stw	r3,0(r17)
 2022cd0:	003fb306 	br	2022ba0 <_gp+0xffff4e40>
 2022cd4:	98800017 	ldw	r2,0(r19)
 2022cd8:	103fea26 	beq	r2,zero,2022c84 <_gp+0xffff4f24>
 2022cdc:	00c00744 	movi	r3,29
 2022ce0:	10c00226 	beq	r2,r3,2022cec <__sflush_r+0x1fc>
 2022ce4:	00c00584 	movi	r3,22
 2022ce8:	10c0031e 	bne	r2,r3,2022cf8 <__sflush_r+0x208>
 2022cec:	9c000015 	stw	r16,0(r19)
 2022cf0:	0005883a 	mov	r2,zero
 2022cf4:	003fb306 	br	2022bc4 <_gp+0xffff4e64>
 2022cf8:	88c0030b 	ldhu	r3,12(r17)
 2022cfc:	3005883a 	mov	r2,r6
 2022d00:	18c01014 	ori	r3,r3,64
 2022d04:	88c0030d 	sth	r3,12(r17)
 2022d08:	003fae06 	br	2022bc4 <_gp+0xffff4e64>

02022d0c <_fflush_r>:
 2022d0c:	defffd04 	addi	sp,sp,-12
 2022d10:	dc000115 	stw	r16,4(sp)
 2022d14:	dfc00215 	stw	ra,8(sp)
 2022d18:	2021883a 	mov	r16,r4
 2022d1c:	20000226 	beq	r4,zero,2022d28 <_fflush_r+0x1c>
 2022d20:	20800e17 	ldw	r2,56(r4)
 2022d24:	10000c26 	beq	r2,zero,2022d58 <_fflush_r+0x4c>
 2022d28:	2880030f 	ldh	r2,12(r5)
 2022d2c:	1000051e 	bne	r2,zero,2022d44 <_fflush_r+0x38>
 2022d30:	0005883a 	mov	r2,zero
 2022d34:	dfc00217 	ldw	ra,8(sp)
 2022d38:	dc000117 	ldw	r16,4(sp)
 2022d3c:	dec00304 	addi	sp,sp,12
 2022d40:	f800283a 	ret
 2022d44:	8009883a 	mov	r4,r16
 2022d48:	dfc00217 	ldw	ra,8(sp)
 2022d4c:	dc000117 	ldw	r16,4(sp)
 2022d50:	dec00304 	addi	sp,sp,12
 2022d54:	2022af01 	jmpi	2022af0 <__sflush_r>
 2022d58:	d9400015 	stw	r5,0(sp)
 2022d5c:	20230f80 	call	20230f8 <__sinit>
 2022d60:	d9400017 	ldw	r5,0(sp)
 2022d64:	003ff006 	br	2022d28 <_gp+0xffff4fc8>

02022d68 <fflush>:
 2022d68:	20000526 	beq	r4,zero,2022d80 <fflush+0x18>
 2022d6c:	008080b4 	movhi	r2,514
 2022d70:	10976004 	addi	r2,r2,23936
 2022d74:	200b883a 	mov	r5,r4
 2022d78:	11000017 	ldw	r4,0(r2)
 2022d7c:	2022d0c1 	jmpi	2022d0c <_fflush_r>
 2022d80:	008080b4 	movhi	r2,514
 2022d84:	10975f04 	addi	r2,r2,23932
 2022d88:	11000017 	ldw	r4,0(r2)
 2022d8c:	014080b4 	movhi	r5,514
 2022d90:	294b4304 	addi	r5,r5,11532
 2022d94:	20236401 	jmpi	2023640 <_fwalk_reent>

02022d98 <__fp_unlock>:
 2022d98:	0005883a 	mov	r2,zero
 2022d9c:	f800283a 	ret

02022da0 <_cleanup_r>:
 2022da0:	014080b4 	movhi	r5,514
 2022da4:	29518a04 	addi	r5,r5,17960
 2022da8:	20236401 	jmpi	2023640 <_fwalk_reent>

02022dac <__sinit.part.1>:
 2022dac:	defff704 	addi	sp,sp,-36
 2022db0:	00c080b4 	movhi	r3,514
 2022db4:	dfc00815 	stw	ra,32(sp)
 2022db8:	ddc00715 	stw	r23,28(sp)
 2022dbc:	dd800615 	stw	r22,24(sp)
 2022dc0:	dd400515 	stw	r21,20(sp)
 2022dc4:	dd000415 	stw	r20,16(sp)
 2022dc8:	dcc00315 	stw	r19,12(sp)
 2022dcc:	dc800215 	stw	r18,8(sp)
 2022dd0:	dc400115 	stw	r17,4(sp)
 2022dd4:	dc000015 	stw	r16,0(sp)
 2022dd8:	18cb6804 	addi	r3,r3,11680
 2022ddc:	24000117 	ldw	r16,4(r4)
 2022de0:	20c00f15 	stw	r3,60(r4)
 2022de4:	2080bb04 	addi	r2,r4,748
 2022de8:	00c000c4 	movi	r3,3
 2022dec:	20c0b915 	stw	r3,740(r4)
 2022df0:	2080ba15 	stw	r2,744(r4)
 2022df4:	2000b815 	stw	zero,736(r4)
 2022df8:	05c00204 	movi	r23,8
 2022dfc:	00800104 	movi	r2,4
 2022e00:	2025883a 	mov	r18,r4
 2022e04:	b80d883a 	mov	r6,r23
 2022e08:	81001704 	addi	r4,r16,92
 2022e0c:	000b883a 	mov	r5,zero
 2022e10:	80000015 	stw	zero,0(r16)
 2022e14:	80000115 	stw	zero,4(r16)
 2022e18:	80000215 	stw	zero,8(r16)
 2022e1c:	8080030d 	sth	r2,12(r16)
 2022e20:	80001915 	stw	zero,100(r16)
 2022e24:	8000038d 	sth	zero,14(r16)
 2022e28:	80000415 	stw	zero,16(r16)
 2022e2c:	80000515 	stw	zero,20(r16)
 2022e30:	80000615 	stw	zero,24(r16)
 2022e34:	20240cc0 	call	20240cc <memset>
 2022e38:	058080b4 	movhi	r22,514
 2022e3c:	94400217 	ldw	r17,8(r18)
 2022e40:	054080b4 	movhi	r21,514
 2022e44:	050080b4 	movhi	r20,514
 2022e48:	04c080b4 	movhi	r19,514
 2022e4c:	b5910e04 	addi	r22,r22,17464
 2022e50:	ad512504 	addi	r21,r21,17556
 2022e54:	a5114404 	addi	r20,r20,17680
 2022e58:	9cd15b04 	addi	r19,r19,17772
 2022e5c:	85800815 	stw	r22,32(r16)
 2022e60:	85400915 	stw	r21,36(r16)
 2022e64:	85000a15 	stw	r20,40(r16)
 2022e68:	84c00b15 	stw	r19,44(r16)
 2022e6c:	84000715 	stw	r16,28(r16)
 2022e70:	00800284 	movi	r2,10
 2022e74:	8880030d 	sth	r2,12(r17)
 2022e78:	00800044 	movi	r2,1
 2022e7c:	b80d883a 	mov	r6,r23
 2022e80:	89001704 	addi	r4,r17,92
 2022e84:	000b883a 	mov	r5,zero
 2022e88:	88000015 	stw	zero,0(r17)
 2022e8c:	88000115 	stw	zero,4(r17)
 2022e90:	88000215 	stw	zero,8(r17)
 2022e94:	88001915 	stw	zero,100(r17)
 2022e98:	8880038d 	sth	r2,14(r17)
 2022e9c:	88000415 	stw	zero,16(r17)
 2022ea0:	88000515 	stw	zero,20(r17)
 2022ea4:	88000615 	stw	zero,24(r17)
 2022ea8:	20240cc0 	call	20240cc <memset>
 2022eac:	94000317 	ldw	r16,12(r18)
 2022eb0:	00800484 	movi	r2,18
 2022eb4:	8c400715 	stw	r17,28(r17)
 2022eb8:	8d800815 	stw	r22,32(r17)
 2022ebc:	8d400915 	stw	r21,36(r17)
 2022ec0:	8d000a15 	stw	r20,40(r17)
 2022ec4:	8cc00b15 	stw	r19,44(r17)
 2022ec8:	8080030d 	sth	r2,12(r16)
 2022ecc:	00800084 	movi	r2,2
 2022ed0:	80000015 	stw	zero,0(r16)
 2022ed4:	80000115 	stw	zero,4(r16)
 2022ed8:	80000215 	stw	zero,8(r16)
 2022edc:	80001915 	stw	zero,100(r16)
 2022ee0:	8080038d 	sth	r2,14(r16)
 2022ee4:	80000415 	stw	zero,16(r16)
 2022ee8:	80000515 	stw	zero,20(r16)
 2022eec:	80000615 	stw	zero,24(r16)
 2022ef0:	b80d883a 	mov	r6,r23
 2022ef4:	000b883a 	mov	r5,zero
 2022ef8:	81001704 	addi	r4,r16,92
 2022efc:	20240cc0 	call	20240cc <memset>
 2022f00:	00800044 	movi	r2,1
 2022f04:	84000715 	stw	r16,28(r16)
 2022f08:	85800815 	stw	r22,32(r16)
 2022f0c:	85400915 	stw	r21,36(r16)
 2022f10:	85000a15 	stw	r20,40(r16)
 2022f14:	84c00b15 	stw	r19,44(r16)
 2022f18:	90800e15 	stw	r2,56(r18)
 2022f1c:	dfc00817 	ldw	ra,32(sp)
 2022f20:	ddc00717 	ldw	r23,28(sp)
 2022f24:	dd800617 	ldw	r22,24(sp)
 2022f28:	dd400517 	ldw	r21,20(sp)
 2022f2c:	dd000417 	ldw	r20,16(sp)
 2022f30:	dcc00317 	ldw	r19,12(sp)
 2022f34:	dc800217 	ldw	r18,8(sp)
 2022f38:	dc400117 	ldw	r17,4(sp)
 2022f3c:	dc000017 	ldw	r16,0(sp)
 2022f40:	dec00904 	addi	sp,sp,36
 2022f44:	f800283a 	ret

02022f48 <__fp_lock>:
 2022f48:	0005883a 	mov	r2,zero
 2022f4c:	f800283a 	ret

02022f50 <__sfmoreglue>:
 2022f50:	defffc04 	addi	sp,sp,-16
 2022f54:	dc800215 	stw	r18,8(sp)
 2022f58:	2825883a 	mov	r18,r5
 2022f5c:	dc000015 	stw	r16,0(sp)
 2022f60:	01401a04 	movi	r5,104
 2022f64:	2021883a 	mov	r16,r4
 2022f68:	913fffc4 	addi	r4,r18,-1
 2022f6c:	dfc00315 	stw	ra,12(sp)
 2022f70:	dc400115 	stw	r17,4(sp)
 2022f74:	20215b00 	call	20215b0 <__mulsi3>
 2022f78:	8009883a 	mov	r4,r16
 2022f7c:	11401d04 	addi	r5,r2,116
 2022f80:	1023883a 	mov	r17,r2
 2022f84:	20238c00 	call	20238c0 <_malloc_r>
 2022f88:	1021883a 	mov	r16,r2
 2022f8c:	10000726 	beq	r2,zero,2022fac <__sfmoreglue+0x5c>
 2022f90:	11000304 	addi	r4,r2,12
 2022f94:	10000015 	stw	zero,0(r2)
 2022f98:	14800115 	stw	r18,4(r2)
 2022f9c:	11000215 	stw	r4,8(r2)
 2022fa0:	89801a04 	addi	r6,r17,104
 2022fa4:	000b883a 	mov	r5,zero
 2022fa8:	20240cc0 	call	20240cc <memset>
 2022fac:	8005883a 	mov	r2,r16
 2022fb0:	dfc00317 	ldw	ra,12(sp)
 2022fb4:	dc800217 	ldw	r18,8(sp)
 2022fb8:	dc400117 	ldw	r17,4(sp)
 2022fbc:	dc000017 	ldw	r16,0(sp)
 2022fc0:	dec00404 	addi	sp,sp,16
 2022fc4:	f800283a 	ret

02022fc8 <__sfp>:
 2022fc8:	defffb04 	addi	sp,sp,-20
 2022fcc:	dc000015 	stw	r16,0(sp)
 2022fd0:	040080b4 	movhi	r16,514
 2022fd4:	84175f04 	addi	r16,r16,23932
 2022fd8:	dcc00315 	stw	r19,12(sp)
 2022fdc:	2027883a 	mov	r19,r4
 2022fe0:	81000017 	ldw	r4,0(r16)
 2022fe4:	dfc00415 	stw	ra,16(sp)
 2022fe8:	dc800215 	stw	r18,8(sp)
 2022fec:	20800e17 	ldw	r2,56(r4)
 2022ff0:	dc400115 	stw	r17,4(sp)
 2022ff4:	1000021e 	bne	r2,zero,2023000 <__sfp+0x38>
 2022ff8:	2022dac0 	call	2022dac <__sinit.part.1>
 2022ffc:	81000017 	ldw	r4,0(r16)
 2023000:	2480b804 	addi	r18,r4,736
 2023004:	047fffc4 	movi	r17,-1
 2023008:	91000117 	ldw	r4,4(r18)
 202300c:	94000217 	ldw	r16,8(r18)
 2023010:	213fffc4 	addi	r4,r4,-1
 2023014:	20000a16 	blt	r4,zero,2023040 <__sfp+0x78>
 2023018:	8080030f 	ldh	r2,12(r16)
 202301c:	10000c26 	beq	r2,zero,2023050 <__sfp+0x88>
 2023020:	80c01d04 	addi	r3,r16,116
 2023024:	00000206 	br	2023030 <__sfp+0x68>
 2023028:	18bfe60f 	ldh	r2,-104(r3)
 202302c:	10000826 	beq	r2,zero,2023050 <__sfp+0x88>
 2023030:	213fffc4 	addi	r4,r4,-1
 2023034:	1c3ffd04 	addi	r16,r3,-12
 2023038:	18c01a04 	addi	r3,r3,104
 202303c:	247ffa1e 	bne	r4,r17,2023028 <_gp+0xffff52c8>
 2023040:	90800017 	ldw	r2,0(r18)
 2023044:	10001d26 	beq	r2,zero,20230bc <__sfp+0xf4>
 2023048:	1025883a 	mov	r18,r2
 202304c:	003fee06 	br	2023008 <_gp+0xffff52a8>
 2023050:	00bfffc4 	movi	r2,-1
 2023054:	8080038d 	sth	r2,14(r16)
 2023058:	00800044 	movi	r2,1
 202305c:	8080030d 	sth	r2,12(r16)
 2023060:	80001915 	stw	zero,100(r16)
 2023064:	80000015 	stw	zero,0(r16)
 2023068:	80000215 	stw	zero,8(r16)
 202306c:	80000115 	stw	zero,4(r16)
 2023070:	80000415 	stw	zero,16(r16)
 2023074:	80000515 	stw	zero,20(r16)
 2023078:	80000615 	stw	zero,24(r16)
 202307c:	01800204 	movi	r6,8
 2023080:	000b883a 	mov	r5,zero
 2023084:	81001704 	addi	r4,r16,92
 2023088:	20240cc0 	call	20240cc <memset>
 202308c:	8005883a 	mov	r2,r16
 2023090:	80000c15 	stw	zero,48(r16)
 2023094:	80000d15 	stw	zero,52(r16)
 2023098:	80001115 	stw	zero,68(r16)
 202309c:	80001215 	stw	zero,72(r16)
 20230a0:	dfc00417 	ldw	ra,16(sp)
 20230a4:	dcc00317 	ldw	r19,12(sp)
 20230a8:	dc800217 	ldw	r18,8(sp)
 20230ac:	dc400117 	ldw	r17,4(sp)
 20230b0:	dc000017 	ldw	r16,0(sp)
 20230b4:	dec00504 	addi	sp,sp,20
 20230b8:	f800283a 	ret
 20230bc:	01400104 	movi	r5,4
 20230c0:	9809883a 	mov	r4,r19
 20230c4:	2022f500 	call	2022f50 <__sfmoreglue>
 20230c8:	90800015 	stw	r2,0(r18)
 20230cc:	103fde1e 	bne	r2,zero,2023048 <_gp+0xffff52e8>
 20230d0:	00800304 	movi	r2,12
 20230d4:	98800015 	stw	r2,0(r19)
 20230d8:	0005883a 	mov	r2,zero
 20230dc:	003ff006 	br	20230a0 <_gp+0xffff5340>

020230e0 <_cleanup>:
 20230e0:	008080b4 	movhi	r2,514
 20230e4:	10975f04 	addi	r2,r2,23932
 20230e8:	11000017 	ldw	r4,0(r2)
 20230ec:	014080b4 	movhi	r5,514
 20230f0:	29518a04 	addi	r5,r5,17960
 20230f4:	20236401 	jmpi	2023640 <_fwalk_reent>

020230f8 <__sinit>:
 20230f8:	20800e17 	ldw	r2,56(r4)
 20230fc:	10000126 	beq	r2,zero,2023104 <__sinit+0xc>
 2023100:	f800283a 	ret
 2023104:	2022dac1 	jmpi	2022dac <__sinit.part.1>

02023108 <__sfp_lock_acquire>:
 2023108:	f800283a 	ret

0202310c <__sfp_lock_release>:
 202310c:	f800283a 	ret

02023110 <__sinit_lock_acquire>:
 2023110:	f800283a 	ret

02023114 <__sinit_lock_release>:
 2023114:	f800283a 	ret

02023118 <__fp_lock_all>:
 2023118:	008080b4 	movhi	r2,514
 202311c:	10976004 	addi	r2,r2,23936
 2023120:	11000017 	ldw	r4,0(r2)
 2023124:	014080b4 	movhi	r5,514
 2023128:	294bd204 	addi	r5,r5,12104
 202312c:	202357c1 	jmpi	202357c <_fwalk>

02023130 <__fp_unlock_all>:
 2023130:	008080b4 	movhi	r2,514
 2023134:	10976004 	addi	r2,r2,23936
 2023138:	11000017 	ldw	r4,0(r2)
 202313c:	014080b4 	movhi	r5,514
 2023140:	294b6604 	addi	r5,r5,11672
 2023144:	202357c1 	jmpi	202357c <_fwalk>

02023148 <_malloc_trim_r>:
 2023148:	defffb04 	addi	sp,sp,-20
 202314c:	dcc00315 	stw	r19,12(sp)
 2023150:	04c080b4 	movhi	r19,514
 2023154:	dc800215 	stw	r18,8(sp)
 2023158:	dc400115 	stw	r17,4(sp)
 202315c:	dc000015 	stw	r16,0(sp)
 2023160:	dfc00415 	stw	ra,16(sp)
 2023164:	2821883a 	mov	r16,r5
 2023168:	9cd65604 	addi	r19,r19,22872
 202316c:	2025883a 	mov	r18,r4
 2023170:	2024ae00 	call	2024ae0 <__malloc_lock>
 2023174:	98800217 	ldw	r2,8(r19)
 2023178:	14400117 	ldw	r17,4(r2)
 202317c:	00bfff04 	movi	r2,-4
 2023180:	88a2703a 	and	r17,r17,r2
 2023184:	8c21c83a 	sub	r16,r17,r16
 2023188:	8403fbc4 	addi	r16,r16,4079
 202318c:	8020d33a 	srli	r16,r16,12
 2023190:	0083ffc4 	movi	r2,4095
 2023194:	843fffc4 	addi	r16,r16,-1
 2023198:	8020933a 	slli	r16,r16,12
 202319c:	1400060e 	bge	r2,r16,20231b8 <_malloc_trim_r+0x70>
 20231a0:	000b883a 	mov	r5,zero
 20231a4:	9009883a 	mov	r4,r18
 20231a8:	20243e40 	call	20243e4 <_sbrk_r>
 20231ac:	98c00217 	ldw	r3,8(r19)
 20231b0:	1c47883a 	add	r3,r3,r17
 20231b4:	10c00a26 	beq	r2,r3,20231e0 <_malloc_trim_r+0x98>
 20231b8:	9009883a 	mov	r4,r18
 20231bc:	2024ae40 	call	2024ae4 <__malloc_unlock>
 20231c0:	0005883a 	mov	r2,zero
 20231c4:	dfc00417 	ldw	ra,16(sp)
 20231c8:	dcc00317 	ldw	r19,12(sp)
 20231cc:	dc800217 	ldw	r18,8(sp)
 20231d0:	dc400117 	ldw	r17,4(sp)
 20231d4:	dc000017 	ldw	r16,0(sp)
 20231d8:	dec00504 	addi	sp,sp,20
 20231dc:	f800283a 	ret
 20231e0:	040bc83a 	sub	r5,zero,r16
 20231e4:	9009883a 	mov	r4,r18
 20231e8:	20243e40 	call	20243e4 <_sbrk_r>
 20231ec:	00ffffc4 	movi	r3,-1
 20231f0:	10c00d26 	beq	r2,r3,2023228 <_malloc_trim_r+0xe0>
 20231f4:	00c080b4 	movhi	r3,514
 20231f8:	18d9f704 	addi	r3,r3,26588
 20231fc:	18800017 	ldw	r2,0(r3)
 2023200:	99000217 	ldw	r4,8(r19)
 2023204:	8c23c83a 	sub	r17,r17,r16
 2023208:	8c400054 	ori	r17,r17,1
 202320c:	1421c83a 	sub	r16,r2,r16
 2023210:	24400115 	stw	r17,4(r4)
 2023214:	9009883a 	mov	r4,r18
 2023218:	1c000015 	stw	r16,0(r3)
 202321c:	2024ae40 	call	2024ae4 <__malloc_unlock>
 2023220:	00800044 	movi	r2,1
 2023224:	003fe706 	br	20231c4 <_gp+0xffff5464>
 2023228:	000b883a 	mov	r5,zero
 202322c:	9009883a 	mov	r4,r18
 2023230:	20243e40 	call	20243e4 <_sbrk_r>
 2023234:	99000217 	ldw	r4,8(r19)
 2023238:	014003c4 	movi	r5,15
 202323c:	1107c83a 	sub	r3,r2,r4
 2023240:	28ffdd0e 	bge	r5,r3,20231b8 <_gp+0xffff5458>
 2023244:	014080b4 	movhi	r5,514
 2023248:	29576104 	addi	r5,r5,23940
 202324c:	29400017 	ldw	r5,0(r5)
 2023250:	18c00054 	ori	r3,r3,1
 2023254:	20c00115 	stw	r3,4(r4)
 2023258:	00c080b4 	movhi	r3,514
 202325c:	1145c83a 	sub	r2,r2,r5
 2023260:	18d9f704 	addi	r3,r3,26588
 2023264:	18800015 	stw	r2,0(r3)
 2023268:	003fd306 	br	20231b8 <_gp+0xffff5458>

0202326c <_free_r>:
 202326c:	28004126 	beq	r5,zero,2023374 <_free_r+0x108>
 2023270:	defffd04 	addi	sp,sp,-12
 2023274:	dc400115 	stw	r17,4(sp)
 2023278:	dc000015 	stw	r16,0(sp)
 202327c:	2023883a 	mov	r17,r4
 2023280:	2821883a 	mov	r16,r5
 2023284:	dfc00215 	stw	ra,8(sp)
 2023288:	2024ae00 	call	2024ae0 <__malloc_lock>
 202328c:	81ffff17 	ldw	r7,-4(r16)
 2023290:	00bfff84 	movi	r2,-2
 2023294:	010080b4 	movhi	r4,514
 2023298:	81bffe04 	addi	r6,r16,-8
 202329c:	3884703a 	and	r2,r7,r2
 20232a0:	21165604 	addi	r4,r4,22872
 20232a4:	308b883a 	add	r5,r6,r2
 20232a8:	2a400117 	ldw	r9,4(r5)
 20232ac:	22000217 	ldw	r8,8(r4)
 20232b0:	00ffff04 	movi	r3,-4
 20232b4:	48c6703a 	and	r3,r9,r3
 20232b8:	2a005726 	beq	r5,r8,2023418 <_free_r+0x1ac>
 20232bc:	28c00115 	stw	r3,4(r5)
 20232c0:	39c0004c 	andi	r7,r7,1
 20232c4:	3800091e 	bne	r7,zero,20232ec <_free_r+0x80>
 20232c8:	823ffe17 	ldw	r8,-8(r16)
 20232cc:	22400204 	addi	r9,r4,8
 20232d0:	320dc83a 	sub	r6,r6,r8
 20232d4:	31c00217 	ldw	r7,8(r6)
 20232d8:	1205883a 	add	r2,r2,r8
 20232dc:	3a406526 	beq	r7,r9,2023474 <_free_r+0x208>
 20232e0:	32000317 	ldw	r8,12(r6)
 20232e4:	3a000315 	stw	r8,12(r7)
 20232e8:	41c00215 	stw	r7,8(r8)
 20232ec:	28cf883a 	add	r7,r5,r3
 20232f0:	39c00117 	ldw	r7,4(r7)
 20232f4:	39c0004c 	andi	r7,r7,1
 20232f8:	38003a26 	beq	r7,zero,20233e4 <_free_r+0x178>
 20232fc:	10c00054 	ori	r3,r2,1
 2023300:	30c00115 	stw	r3,4(r6)
 2023304:	3087883a 	add	r3,r6,r2
 2023308:	18800015 	stw	r2,0(r3)
 202330c:	00c07fc4 	movi	r3,511
 2023310:	18801936 	bltu	r3,r2,2023378 <_free_r+0x10c>
 2023314:	1004d0fa 	srli	r2,r2,3
 2023318:	01c00044 	movi	r7,1
 202331c:	21400117 	ldw	r5,4(r4)
 2023320:	10c00044 	addi	r3,r2,1
 2023324:	18c7883a 	add	r3,r3,r3
 2023328:	1005d0ba 	srai	r2,r2,2
 202332c:	18c7883a 	add	r3,r3,r3
 2023330:	18c7883a 	add	r3,r3,r3
 2023334:	1907883a 	add	r3,r3,r4
 2023338:	3884983a 	sll	r2,r7,r2
 202333c:	19c00017 	ldw	r7,0(r3)
 2023340:	1a3ffe04 	addi	r8,r3,-8
 2023344:	1144b03a 	or	r2,r2,r5
 2023348:	32000315 	stw	r8,12(r6)
 202334c:	31c00215 	stw	r7,8(r6)
 2023350:	20800115 	stw	r2,4(r4)
 2023354:	19800015 	stw	r6,0(r3)
 2023358:	39800315 	stw	r6,12(r7)
 202335c:	8809883a 	mov	r4,r17
 2023360:	dfc00217 	ldw	ra,8(sp)
 2023364:	dc400117 	ldw	r17,4(sp)
 2023368:	dc000017 	ldw	r16,0(sp)
 202336c:	dec00304 	addi	sp,sp,12
 2023370:	2024ae41 	jmpi	2024ae4 <__malloc_unlock>
 2023374:	f800283a 	ret
 2023378:	100ad27a 	srli	r5,r2,9
 202337c:	00c00104 	movi	r3,4
 2023380:	19404a36 	bltu	r3,r5,20234ac <_free_r+0x240>
 2023384:	100ad1ba 	srli	r5,r2,6
 2023388:	28c00e44 	addi	r3,r5,57
 202338c:	18c7883a 	add	r3,r3,r3
 2023390:	29400e04 	addi	r5,r5,56
 2023394:	18c7883a 	add	r3,r3,r3
 2023398:	18c7883a 	add	r3,r3,r3
 202339c:	1909883a 	add	r4,r3,r4
 20233a0:	20c00017 	ldw	r3,0(r4)
 20233a4:	01c080b4 	movhi	r7,514
 20233a8:	213ffe04 	addi	r4,r4,-8
 20233ac:	39d65604 	addi	r7,r7,22872
 20233b0:	20c04426 	beq	r4,r3,20234c4 <_free_r+0x258>
 20233b4:	01ffff04 	movi	r7,-4
 20233b8:	19400117 	ldw	r5,4(r3)
 20233bc:	29ca703a 	and	r5,r5,r7
 20233c0:	1140022e 	bgeu	r2,r5,20233cc <_free_r+0x160>
 20233c4:	18c00217 	ldw	r3,8(r3)
 20233c8:	20fffb1e 	bne	r4,r3,20233b8 <_gp+0xffff5658>
 20233cc:	19000317 	ldw	r4,12(r3)
 20233d0:	31000315 	stw	r4,12(r6)
 20233d4:	30c00215 	stw	r3,8(r6)
 20233d8:	21800215 	stw	r6,8(r4)
 20233dc:	19800315 	stw	r6,12(r3)
 20233e0:	003fde06 	br	202335c <_gp+0xffff55fc>
 20233e4:	29c00217 	ldw	r7,8(r5)
 20233e8:	10c5883a 	add	r2,r2,r3
 20233ec:	00c080b4 	movhi	r3,514
 20233f0:	18d65804 	addi	r3,r3,22880
 20233f4:	38c03b26 	beq	r7,r3,20234e4 <_free_r+0x278>
 20233f8:	2a000317 	ldw	r8,12(r5)
 20233fc:	11400054 	ori	r5,r2,1
 2023400:	3087883a 	add	r3,r6,r2
 2023404:	3a000315 	stw	r8,12(r7)
 2023408:	41c00215 	stw	r7,8(r8)
 202340c:	31400115 	stw	r5,4(r6)
 2023410:	18800015 	stw	r2,0(r3)
 2023414:	003fbd06 	br	202330c <_gp+0xffff55ac>
 2023418:	39c0004c 	andi	r7,r7,1
 202341c:	10c5883a 	add	r2,r2,r3
 2023420:	3800071e 	bne	r7,zero,2023440 <_free_r+0x1d4>
 2023424:	81fffe17 	ldw	r7,-8(r16)
 2023428:	31cdc83a 	sub	r6,r6,r7
 202342c:	30c00317 	ldw	r3,12(r6)
 2023430:	31400217 	ldw	r5,8(r6)
 2023434:	11c5883a 	add	r2,r2,r7
 2023438:	28c00315 	stw	r3,12(r5)
 202343c:	19400215 	stw	r5,8(r3)
 2023440:	10c00054 	ori	r3,r2,1
 2023444:	30c00115 	stw	r3,4(r6)
 2023448:	00c080b4 	movhi	r3,514
 202344c:	18d76204 	addi	r3,r3,23944
 2023450:	18c00017 	ldw	r3,0(r3)
 2023454:	21800215 	stw	r6,8(r4)
 2023458:	10ffc036 	bltu	r2,r3,202335c <_gp+0xffff55fc>
 202345c:	008080b4 	movhi	r2,514
 2023460:	1099f604 	addi	r2,r2,26584
 2023464:	11400017 	ldw	r5,0(r2)
 2023468:	8809883a 	mov	r4,r17
 202346c:	20231480 	call	2023148 <_malloc_trim_r>
 2023470:	003fba06 	br	202335c <_gp+0xffff55fc>
 2023474:	28c9883a 	add	r4,r5,r3
 2023478:	21000117 	ldw	r4,4(r4)
 202347c:	2100004c 	andi	r4,r4,1
 2023480:	2000391e 	bne	r4,zero,2023568 <_free_r+0x2fc>
 2023484:	29c00217 	ldw	r7,8(r5)
 2023488:	29000317 	ldw	r4,12(r5)
 202348c:	1885883a 	add	r2,r3,r2
 2023490:	10c00054 	ori	r3,r2,1
 2023494:	39000315 	stw	r4,12(r7)
 2023498:	21c00215 	stw	r7,8(r4)
 202349c:	30c00115 	stw	r3,4(r6)
 20234a0:	308d883a 	add	r6,r6,r2
 20234a4:	30800015 	stw	r2,0(r6)
 20234a8:	003fac06 	br	202335c <_gp+0xffff55fc>
 20234ac:	00c00504 	movi	r3,20
 20234b0:	19401536 	bltu	r3,r5,2023508 <_free_r+0x29c>
 20234b4:	28c01704 	addi	r3,r5,92
 20234b8:	18c7883a 	add	r3,r3,r3
 20234bc:	294016c4 	addi	r5,r5,91
 20234c0:	003fb406 	br	2023394 <_gp+0xffff5634>
 20234c4:	280bd0ba 	srai	r5,r5,2
 20234c8:	00c00044 	movi	r3,1
 20234cc:	38800117 	ldw	r2,4(r7)
 20234d0:	194a983a 	sll	r5,r3,r5
 20234d4:	2007883a 	mov	r3,r4
 20234d8:	2884b03a 	or	r2,r5,r2
 20234dc:	38800115 	stw	r2,4(r7)
 20234e0:	003fbb06 	br	20233d0 <_gp+0xffff5670>
 20234e4:	21800515 	stw	r6,20(r4)
 20234e8:	21800415 	stw	r6,16(r4)
 20234ec:	10c00054 	ori	r3,r2,1
 20234f0:	31c00315 	stw	r7,12(r6)
 20234f4:	31c00215 	stw	r7,8(r6)
 20234f8:	30c00115 	stw	r3,4(r6)
 20234fc:	308d883a 	add	r6,r6,r2
 2023500:	30800015 	stw	r2,0(r6)
 2023504:	003f9506 	br	202335c <_gp+0xffff55fc>
 2023508:	00c01504 	movi	r3,84
 202350c:	19400536 	bltu	r3,r5,2023524 <_free_r+0x2b8>
 2023510:	100ad33a 	srli	r5,r2,12
 2023514:	28c01bc4 	addi	r3,r5,111
 2023518:	18c7883a 	add	r3,r3,r3
 202351c:	29401b84 	addi	r5,r5,110
 2023520:	003f9c06 	br	2023394 <_gp+0xffff5634>
 2023524:	00c05504 	movi	r3,340
 2023528:	19400536 	bltu	r3,r5,2023540 <_free_r+0x2d4>
 202352c:	100ad3fa 	srli	r5,r2,15
 2023530:	28c01e04 	addi	r3,r5,120
 2023534:	18c7883a 	add	r3,r3,r3
 2023538:	29401dc4 	addi	r5,r5,119
 202353c:	003f9506 	br	2023394 <_gp+0xffff5634>
 2023540:	00c15504 	movi	r3,1364
 2023544:	19400536 	bltu	r3,r5,202355c <_free_r+0x2f0>
 2023548:	100ad4ba 	srli	r5,r2,18
 202354c:	28c01f44 	addi	r3,r5,125
 2023550:	18c7883a 	add	r3,r3,r3
 2023554:	29401f04 	addi	r5,r5,124
 2023558:	003f8e06 	br	2023394 <_gp+0xffff5634>
 202355c:	00c03f84 	movi	r3,254
 2023560:	01401f84 	movi	r5,126
 2023564:	003f8b06 	br	2023394 <_gp+0xffff5634>
 2023568:	10c00054 	ori	r3,r2,1
 202356c:	30c00115 	stw	r3,4(r6)
 2023570:	308d883a 	add	r6,r6,r2
 2023574:	30800015 	stw	r2,0(r6)
 2023578:	003f7806 	br	202335c <_gp+0xffff55fc>

0202357c <_fwalk>:
 202357c:	defff704 	addi	sp,sp,-36
 2023580:	dd000415 	stw	r20,16(sp)
 2023584:	dfc00815 	stw	ra,32(sp)
 2023588:	ddc00715 	stw	r23,28(sp)
 202358c:	dd800615 	stw	r22,24(sp)
 2023590:	dd400515 	stw	r21,20(sp)
 2023594:	dcc00315 	stw	r19,12(sp)
 2023598:	dc800215 	stw	r18,8(sp)
 202359c:	dc400115 	stw	r17,4(sp)
 20235a0:	dc000015 	stw	r16,0(sp)
 20235a4:	2500b804 	addi	r20,r4,736
 20235a8:	a0002326 	beq	r20,zero,2023638 <_fwalk+0xbc>
 20235ac:	282b883a 	mov	r21,r5
 20235b0:	002f883a 	mov	r23,zero
 20235b4:	05800044 	movi	r22,1
 20235b8:	04ffffc4 	movi	r19,-1
 20235bc:	a4400117 	ldw	r17,4(r20)
 20235c0:	a4800217 	ldw	r18,8(r20)
 20235c4:	8c7fffc4 	addi	r17,r17,-1
 20235c8:	88000d16 	blt	r17,zero,2023600 <_fwalk+0x84>
 20235cc:	94000304 	addi	r16,r18,12
 20235d0:	94800384 	addi	r18,r18,14
 20235d4:	8080000b 	ldhu	r2,0(r16)
 20235d8:	8c7fffc4 	addi	r17,r17,-1
 20235dc:	813ffd04 	addi	r4,r16,-12
 20235e0:	b080042e 	bgeu	r22,r2,20235f4 <_fwalk+0x78>
 20235e4:	9080000f 	ldh	r2,0(r18)
 20235e8:	14c00226 	beq	r2,r19,20235f4 <_fwalk+0x78>
 20235ec:	a83ee83a 	callr	r21
 20235f0:	b8aeb03a 	or	r23,r23,r2
 20235f4:	84001a04 	addi	r16,r16,104
 20235f8:	94801a04 	addi	r18,r18,104
 20235fc:	8cfff51e 	bne	r17,r19,20235d4 <_gp+0xffff5874>
 2023600:	a5000017 	ldw	r20,0(r20)
 2023604:	a03fed1e 	bne	r20,zero,20235bc <_gp+0xffff585c>
 2023608:	b805883a 	mov	r2,r23
 202360c:	dfc00817 	ldw	ra,32(sp)
 2023610:	ddc00717 	ldw	r23,28(sp)
 2023614:	dd800617 	ldw	r22,24(sp)
 2023618:	dd400517 	ldw	r21,20(sp)
 202361c:	dd000417 	ldw	r20,16(sp)
 2023620:	dcc00317 	ldw	r19,12(sp)
 2023624:	dc800217 	ldw	r18,8(sp)
 2023628:	dc400117 	ldw	r17,4(sp)
 202362c:	dc000017 	ldw	r16,0(sp)
 2023630:	dec00904 	addi	sp,sp,36
 2023634:	f800283a 	ret
 2023638:	002f883a 	mov	r23,zero
 202363c:	003ff206 	br	2023608 <_gp+0xffff58a8>

02023640 <_fwalk_reent>:
 2023640:	defff704 	addi	sp,sp,-36
 2023644:	dd000415 	stw	r20,16(sp)
 2023648:	dfc00815 	stw	ra,32(sp)
 202364c:	ddc00715 	stw	r23,28(sp)
 2023650:	dd800615 	stw	r22,24(sp)
 2023654:	dd400515 	stw	r21,20(sp)
 2023658:	dcc00315 	stw	r19,12(sp)
 202365c:	dc800215 	stw	r18,8(sp)
 2023660:	dc400115 	stw	r17,4(sp)
 2023664:	dc000015 	stw	r16,0(sp)
 2023668:	2500b804 	addi	r20,r4,736
 202366c:	a0002326 	beq	r20,zero,20236fc <_fwalk_reent+0xbc>
 2023670:	282b883a 	mov	r21,r5
 2023674:	2027883a 	mov	r19,r4
 2023678:	002f883a 	mov	r23,zero
 202367c:	05800044 	movi	r22,1
 2023680:	04bfffc4 	movi	r18,-1
 2023684:	a4400117 	ldw	r17,4(r20)
 2023688:	a4000217 	ldw	r16,8(r20)
 202368c:	8c7fffc4 	addi	r17,r17,-1
 2023690:	88000c16 	blt	r17,zero,20236c4 <_fwalk_reent+0x84>
 2023694:	84000304 	addi	r16,r16,12
 2023698:	8080000b 	ldhu	r2,0(r16)
 202369c:	8c7fffc4 	addi	r17,r17,-1
 20236a0:	817ffd04 	addi	r5,r16,-12
 20236a4:	b080052e 	bgeu	r22,r2,20236bc <_fwalk_reent+0x7c>
 20236a8:	8080008f 	ldh	r2,2(r16)
 20236ac:	9809883a 	mov	r4,r19
 20236b0:	14800226 	beq	r2,r18,20236bc <_fwalk_reent+0x7c>
 20236b4:	a83ee83a 	callr	r21
 20236b8:	b8aeb03a 	or	r23,r23,r2
 20236bc:	84001a04 	addi	r16,r16,104
 20236c0:	8cbff51e 	bne	r17,r18,2023698 <_gp+0xffff5938>
 20236c4:	a5000017 	ldw	r20,0(r20)
 20236c8:	a03fee1e 	bne	r20,zero,2023684 <_gp+0xffff5924>
 20236cc:	b805883a 	mov	r2,r23
 20236d0:	dfc00817 	ldw	ra,32(sp)
 20236d4:	ddc00717 	ldw	r23,28(sp)
 20236d8:	dd800617 	ldw	r22,24(sp)
 20236dc:	dd400517 	ldw	r21,20(sp)
 20236e0:	dd000417 	ldw	r20,16(sp)
 20236e4:	dcc00317 	ldw	r19,12(sp)
 20236e8:	dc800217 	ldw	r18,8(sp)
 20236ec:	dc400117 	ldw	r17,4(sp)
 20236f0:	dc000017 	ldw	r16,0(sp)
 20236f4:	dec00904 	addi	sp,sp,36
 20236f8:	f800283a 	ret
 20236fc:	002f883a 	mov	r23,zero
 2023700:	003ff206 	br	20236cc <_gp+0xffff596c>

02023704 <__smakebuf_r>:
 2023704:	2880030b 	ldhu	r2,12(r5)
 2023708:	10c0008c 	andi	r3,r2,2
 202370c:	1800411e 	bne	r3,zero,2023814 <__smakebuf_r+0x110>
 2023710:	deffec04 	addi	sp,sp,-80
 2023714:	dc000f15 	stw	r16,60(sp)
 2023718:	2821883a 	mov	r16,r5
 202371c:	2940038f 	ldh	r5,14(r5)
 2023720:	dc401015 	stw	r17,64(sp)
 2023724:	dfc01315 	stw	ra,76(sp)
 2023728:	dcc01215 	stw	r19,72(sp)
 202372c:	dc801115 	stw	r18,68(sp)
 2023730:	2023883a 	mov	r17,r4
 2023734:	28001c16 	blt	r5,zero,20237a8 <__smakebuf_r+0xa4>
 2023738:	d80d883a 	mov	r6,sp
 202373c:	202472c0 	call	202472c <_fstat_r>
 2023740:	10001816 	blt	r2,zero,20237a4 <__smakebuf_r+0xa0>
 2023744:	d8800117 	ldw	r2,4(sp)
 2023748:	00e00014 	movui	r3,32768
 202374c:	10bc000c 	andi	r2,r2,61440
 2023750:	14c80020 	cmpeqi	r19,r2,8192
 2023754:	10c03726 	beq	r2,r3,2023834 <__smakebuf_r+0x130>
 2023758:	80c0030b 	ldhu	r3,12(r16)
 202375c:	18c20014 	ori	r3,r3,2048
 2023760:	80c0030d 	sth	r3,12(r16)
 2023764:	00c80004 	movi	r3,8192
 2023768:	10c0521e 	bne	r2,r3,20238b4 <__smakebuf_r+0x1b0>
 202376c:	8140038f 	ldh	r5,14(r16)
 2023770:	8809883a 	mov	r4,r17
 2023774:	20247880 	call	2024788 <_isatty_r>
 2023778:	10004c26 	beq	r2,zero,20238ac <__smakebuf_r+0x1a8>
 202377c:	8080030b 	ldhu	r2,12(r16)
 2023780:	80c010c4 	addi	r3,r16,67
 2023784:	80c00015 	stw	r3,0(r16)
 2023788:	10800054 	ori	r2,r2,1
 202378c:	8080030d 	sth	r2,12(r16)
 2023790:	00800044 	movi	r2,1
 2023794:	80c00415 	stw	r3,16(r16)
 2023798:	80800515 	stw	r2,20(r16)
 202379c:	04810004 	movi	r18,1024
 20237a0:	00000706 	br	20237c0 <__smakebuf_r+0xbc>
 20237a4:	8080030b 	ldhu	r2,12(r16)
 20237a8:	10c0200c 	andi	r3,r2,128
 20237ac:	18001f1e 	bne	r3,zero,202382c <__smakebuf_r+0x128>
 20237b0:	04810004 	movi	r18,1024
 20237b4:	10820014 	ori	r2,r2,2048
 20237b8:	8080030d 	sth	r2,12(r16)
 20237bc:	0027883a 	mov	r19,zero
 20237c0:	900b883a 	mov	r5,r18
 20237c4:	8809883a 	mov	r4,r17
 20237c8:	20238c00 	call	20238c0 <_malloc_r>
 20237cc:	10002c26 	beq	r2,zero,2023880 <__smakebuf_r+0x17c>
 20237d0:	80c0030b 	ldhu	r3,12(r16)
 20237d4:	010080b4 	movhi	r4,514
 20237d8:	210b6804 	addi	r4,r4,11680
 20237dc:	89000f15 	stw	r4,60(r17)
 20237e0:	18c02014 	ori	r3,r3,128
 20237e4:	80c0030d 	sth	r3,12(r16)
 20237e8:	80800015 	stw	r2,0(r16)
 20237ec:	80800415 	stw	r2,16(r16)
 20237f0:	84800515 	stw	r18,20(r16)
 20237f4:	98001a1e 	bne	r19,zero,2023860 <__smakebuf_r+0x15c>
 20237f8:	dfc01317 	ldw	ra,76(sp)
 20237fc:	dcc01217 	ldw	r19,72(sp)
 2023800:	dc801117 	ldw	r18,68(sp)
 2023804:	dc401017 	ldw	r17,64(sp)
 2023808:	dc000f17 	ldw	r16,60(sp)
 202380c:	dec01404 	addi	sp,sp,80
 2023810:	f800283a 	ret
 2023814:	288010c4 	addi	r2,r5,67
 2023818:	28800015 	stw	r2,0(r5)
 202381c:	28800415 	stw	r2,16(r5)
 2023820:	00800044 	movi	r2,1
 2023824:	28800515 	stw	r2,20(r5)
 2023828:	f800283a 	ret
 202382c:	04801004 	movi	r18,64
 2023830:	003fe006 	br	20237b4 <_gp+0xffff5a54>
 2023834:	81000a17 	ldw	r4,40(r16)
 2023838:	00c080b4 	movhi	r3,514
 202383c:	18d14404 	addi	r3,r3,17680
 2023840:	20ffc51e 	bne	r4,r3,2023758 <_gp+0xffff59f8>
 2023844:	8080030b 	ldhu	r2,12(r16)
 2023848:	04810004 	movi	r18,1024
 202384c:	84801315 	stw	r18,76(r16)
 2023850:	1484b03a 	or	r2,r2,r18
 2023854:	8080030d 	sth	r2,12(r16)
 2023858:	0027883a 	mov	r19,zero
 202385c:	003fd806 	br	20237c0 <_gp+0xffff5a60>
 2023860:	8140038f 	ldh	r5,14(r16)
 2023864:	8809883a 	mov	r4,r17
 2023868:	20247880 	call	2024788 <_isatty_r>
 202386c:	103fe226 	beq	r2,zero,20237f8 <_gp+0xffff5a98>
 2023870:	8080030b 	ldhu	r2,12(r16)
 2023874:	10800054 	ori	r2,r2,1
 2023878:	8080030d 	sth	r2,12(r16)
 202387c:	003fde06 	br	20237f8 <_gp+0xffff5a98>
 2023880:	8080030b 	ldhu	r2,12(r16)
 2023884:	10c0800c 	andi	r3,r2,512
 2023888:	183fdb1e 	bne	r3,zero,20237f8 <_gp+0xffff5a98>
 202388c:	10800094 	ori	r2,r2,2
 2023890:	80c010c4 	addi	r3,r16,67
 2023894:	8080030d 	sth	r2,12(r16)
 2023898:	00800044 	movi	r2,1
 202389c:	80c00015 	stw	r3,0(r16)
 20238a0:	80c00415 	stw	r3,16(r16)
 20238a4:	80800515 	stw	r2,20(r16)
 20238a8:	003fd306 	br	20237f8 <_gp+0xffff5a98>
 20238ac:	04810004 	movi	r18,1024
 20238b0:	003fc306 	br	20237c0 <_gp+0xffff5a60>
 20238b4:	0027883a 	mov	r19,zero
 20238b8:	04810004 	movi	r18,1024
 20238bc:	003fc006 	br	20237c0 <_gp+0xffff5a60>

020238c0 <_malloc_r>:
 20238c0:	defff504 	addi	sp,sp,-44
 20238c4:	dc800315 	stw	r18,12(sp)
 20238c8:	dfc00a15 	stw	ra,40(sp)
 20238cc:	df000915 	stw	fp,36(sp)
 20238d0:	ddc00815 	stw	r23,32(sp)
 20238d4:	dd800715 	stw	r22,28(sp)
 20238d8:	dd400615 	stw	r21,24(sp)
 20238dc:	dd000515 	stw	r20,20(sp)
 20238e0:	dcc00415 	stw	r19,16(sp)
 20238e4:	dc400215 	stw	r17,8(sp)
 20238e8:	dc000115 	stw	r16,4(sp)
 20238ec:	288002c4 	addi	r2,r5,11
 20238f0:	00c00584 	movi	r3,22
 20238f4:	2025883a 	mov	r18,r4
 20238f8:	18807f2e 	bgeu	r3,r2,2023af8 <_malloc_r+0x238>
 20238fc:	047ffe04 	movi	r17,-8
 2023900:	1462703a 	and	r17,r2,r17
 2023904:	8800a316 	blt	r17,zero,2023b94 <_malloc_r+0x2d4>
 2023908:	8940a236 	bltu	r17,r5,2023b94 <_malloc_r+0x2d4>
 202390c:	2024ae00 	call	2024ae0 <__malloc_lock>
 2023910:	00807dc4 	movi	r2,503
 2023914:	1441e92e 	bgeu	r2,r17,20240bc <_malloc_r+0x7fc>
 2023918:	8804d27a 	srli	r2,r17,9
 202391c:	1000a126 	beq	r2,zero,2023ba4 <_malloc_r+0x2e4>
 2023920:	00c00104 	movi	r3,4
 2023924:	18811e36 	bltu	r3,r2,2023da0 <_malloc_r+0x4e0>
 2023928:	8804d1ba 	srli	r2,r17,6
 202392c:	12000e44 	addi	r8,r2,57
 2023930:	11c00e04 	addi	r7,r2,56
 2023934:	4209883a 	add	r4,r8,r8
 2023938:	04c080b4 	movhi	r19,514
 202393c:	2109883a 	add	r4,r4,r4
 2023940:	9cd65604 	addi	r19,r19,22872
 2023944:	2109883a 	add	r4,r4,r4
 2023948:	9909883a 	add	r4,r19,r4
 202394c:	24000117 	ldw	r16,4(r4)
 2023950:	213ffe04 	addi	r4,r4,-8
 2023954:	24009726 	beq	r4,r16,2023bb4 <_malloc_r+0x2f4>
 2023958:	80800117 	ldw	r2,4(r16)
 202395c:	01bfff04 	movi	r6,-4
 2023960:	014003c4 	movi	r5,15
 2023964:	1184703a 	and	r2,r2,r6
 2023968:	1447c83a 	sub	r3,r2,r17
 202396c:	28c00716 	blt	r5,r3,202398c <_malloc_r+0xcc>
 2023970:	1800920e 	bge	r3,zero,2023bbc <_malloc_r+0x2fc>
 2023974:	84000317 	ldw	r16,12(r16)
 2023978:	24008e26 	beq	r4,r16,2023bb4 <_malloc_r+0x2f4>
 202397c:	80800117 	ldw	r2,4(r16)
 2023980:	1184703a 	and	r2,r2,r6
 2023984:	1447c83a 	sub	r3,r2,r17
 2023988:	28fff90e 	bge	r5,r3,2023970 <_gp+0xffff5c10>
 202398c:	3809883a 	mov	r4,r7
 2023990:	018080b4 	movhi	r6,514
 2023994:	9c000417 	ldw	r16,16(r19)
 2023998:	31965604 	addi	r6,r6,22872
 202399c:	32000204 	addi	r8,r6,8
 20239a0:	82013426 	beq	r16,r8,2023e74 <_malloc_r+0x5b4>
 20239a4:	80c00117 	ldw	r3,4(r16)
 20239a8:	00bfff04 	movi	r2,-4
 20239ac:	188e703a 	and	r7,r3,r2
 20239b0:	3c45c83a 	sub	r2,r7,r17
 20239b4:	00c003c4 	movi	r3,15
 20239b8:	18811f16 	blt	r3,r2,2023e38 <_malloc_r+0x578>
 20239bc:	32000515 	stw	r8,20(r6)
 20239c0:	32000415 	stw	r8,16(r6)
 20239c4:	10007f0e 	bge	r2,zero,2023bc4 <_malloc_r+0x304>
 20239c8:	00807fc4 	movi	r2,511
 20239cc:	11c0fd36 	bltu	r2,r7,2023dc4 <_malloc_r+0x504>
 20239d0:	3806d0fa 	srli	r3,r7,3
 20239d4:	01c00044 	movi	r7,1
 20239d8:	30800117 	ldw	r2,4(r6)
 20239dc:	19400044 	addi	r5,r3,1
 20239e0:	294b883a 	add	r5,r5,r5
 20239e4:	1807d0ba 	srai	r3,r3,2
 20239e8:	294b883a 	add	r5,r5,r5
 20239ec:	294b883a 	add	r5,r5,r5
 20239f0:	298b883a 	add	r5,r5,r6
 20239f4:	38c6983a 	sll	r3,r7,r3
 20239f8:	29c00017 	ldw	r7,0(r5)
 20239fc:	2a7ffe04 	addi	r9,r5,-8
 2023a00:	1886b03a 	or	r3,r3,r2
 2023a04:	82400315 	stw	r9,12(r16)
 2023a08:	81c00215 	stw	r7,8(r16)
 2023a0c:	30c00115 	stw	r3,4(r6)
 2023a10:	2c000015 	stw	r16,0(r5)
 2023a14:	3c000315 	stw	r16,12(r7)
 2023a18:	2005d0ba 	srai	r2,r4,2
 2023a1c:	01400044 	movi	r5,1
 2023a20:	288a983a 	sll	r5,r5,r2
 2023a24:	19406f36 	bltu	r3,r5,2023be4 <_malloc_r+0x324>
 2023a28:	28c4703a 	and	r2,r5,r3
 2023a2c:	10000a1e 	bne	r2,zero,2023a58 <_malloc_r+0x198>
 2023a30:	00bfff04 	movi	r2,-4
 2023a34:	294b883a 	add	r5,r5,r5
 2023a38:	2088703a 	and	r4,r4,r2
 2023a3c:	28c4703a 	and	r2,r5,r3
 2023a40:	21000104 	addi	r4,r4,4
 2023a44:	1000041e 	bne	r2,zero,2023a58 <_malloc_r+0x198>
 2023a48:	294b883a 	add	r5,r5,r5
 2023a4c:	28c4703a 	and	r2,r5,r3
 2023a50:	21000104 	addi	r4,r4,4
 2023a54:	103ffc26 	beq	r2,zero,2023a48 <_gp+0xffff5ce8>
 2023a58:	02bfff04 	movi	r10,-4
 2023a5c:	024003c4 	movi	r9,15
 2023a60:	21800044 	addi	r6,r4,1
 2023a64:	318d883a 	add	r6,r6,r6
 2023a68:	318d883a 	add	r6,r6,r6
 2023a6c:	318d883a 	add	r6,r6,r6
 2023a70:	998d883a 	add	r6,r19,r6
 2023a74:	333ffe04 	addi	r12,r6,-8
 2023a78:	2017883a 	mov	r11,r4
 2023a7c:	31800104 	addi	r6,r6,4
 2023a80:	34000017 	ldw	r16,0(r6)
 2023a84:	31fffd04 	addi	r7,r6,-12
 2023a88:	81c0041e 	bne	r16,r7,2023a9c <_malloc_r+0x1dc>
 2023a8c:	0000fb06 	br	2023e7c <_malloc_r+0x5bc>
 2023a90:	1801030e 	bge	r3,zero,2023ea0 <_malloc_r+0x5e0>
 2023a94:	84000317 	ldw	r16,12(r16)
 2023a98:	81c0f826 	beq	r16,r7,2023e7c <_malloc_r+0x5bc>
 2023a9c:	80800117 	ldw	r2,4(r16)
 2023aa0:	1284703a 	and	r2,r2,r10
 2023aa4:	1447c83a 	sub	r3,r2,r17
 2023aa8:	48fff90e 	bge	r9,r3,2023a90 <_gp+0xffff5d30>
 2023aac:	80800317 	ldw	r2,12(r16)
 2023ab0:	81000217 	ldw	r4,8(r16)
 2023ab4:	89400054 	ori	r5,r17,1
 2023ab8:	81400115 	stw	r5,4(r16)
 2023abc:	20800315 	stw	r2,12(r4)
 2023ac0:	11000215 	stw	r4,8(r2)
 2023ac4:	8463883a 	add	r17,r16,r17
 2023ac8:	9c400515 	stw	r17,20(r19)
 2023acc:	9c400415 	stw	r17,16(r19)
 2023ad0:	18800054 	ori	r2,r3,1
 2023ad4:	88800115 	stw	r2,4(r17)
 2023ad8:	8a000315 	stw	r8,12(r17)
 2023adc:	8a000215 	stw	r8,8(r17)
 2023ae0:	88e3883a 	add	r17,r17,r3
 2023ae4:	88c00015 	stw	r3,0(r17)
 2023ae8:	9009883a 	mov	r4,r18
 2023aec:	2024ae40 	call	2024ae4 <__malloc_unlock>
 2023af0:	80800204 	addi	r2,r16,8
 2023af4:	00001b06 	br	2023b64 <_malloc_r+0x2a4>
 2023af8:	04400404 	movi	r17,16
 2023afc:	89402536 	bltu	r17,r5,2023b94 <_malloc_r+0x2d4>
 2023b00:	2024ae00 	call	2024ae0 <__malloc_lock>
 2023b04:	00800184 	movi	r2,6
 2023b08:	01000084 	movi	r4,2
 2023b0c:	04c080b4 	movhi	r19,514
 2023b10:	1085883a 	add	r2,r2,r2
 2023b14:	9cd65604 	addi	r19,r19,22872
 2023b18:	1085883a 	add	r2,r2,r2
 2023b1c:	9885883a 	add	r2,r19,r2
 2023b20:	14000117 	ldw	r16,4(r2)
 2023b24:	10fffe04 	addi	r3,r2,-8
 2023b28:	80c0d926 	beq	r16,r3,2023e90 <_malloc_r+0x5d0>
 2023b2c:	80c00117 	ldw	r3,4(r16)
 2023b30:	81000317 	ldw	r4,12(r16)
 2023b34:	00bfff04 	movi	r2,-4
 2023b38:	1884703a 	and	r2,r3,r2
 2023b3c:	81400217 	ldw	r5,8(r16)
 2023b40:	8085883a 	add	r2,r16,r2
 2023b44:	10c00117 	ldw	r3,4(r2)
 2023b48:	29000315 	stw	r4,12(r5)
 2023b4c:	21400215 	stw	r5,8(r4)
 2023b50:	18c00054 	ori	r3,r3,1
 2023b54:	10c00115 	stw	r3,4(r2)
 2023b58:	9009883a 	mov	r4,r18
 2023b5c:	2024ae40 	call	2024ae4 <__malloc_unlock>
 2023b60:	80800204 	addi	r2,r16,8
 2023b64:	dfc00a17 	ldw	ra,40(sp)
 2023b68:	df000917 	ldw	fp,36(sp)
 2023b6c:	ddc00817 	ldw	r23,32(sp)
 2023b70:	dd800717 	ldw	r22,28(sp)
 2023b74:	dd400617 	ldw	r21,24(sp)
 2023b78:	dd000517 	ldw	r20,20(sp)
 2023b7c:	dcc00417 	ldw	r19,16(sp)
 2023b80:	dc800317 	ldw	r18,12(sp)
 2023b84:	dc400217 	ldw	r17,8(sp)
 2023b88:	dc000117 	ldw	r16,4(sp)
 2023b8c:	dec00b04 	addi	sp,sp,44
 2023b90:	f800283a 	ret
 2023b94:	00800304 	movi	r2,12
 2023b98:	90800015 	stw	r2,0(r18)
 2023b9c:	0005883a 	mov	r2,zero
 2023ba0:	003ff006 	br	2023b64 <_gp+0xffff5e04>
 2023ba4:	01002004 	movi	r4,128
 2023ba8:	02001004 	movi	r8,64
 2023bac:	01c00fc4 	movi	r7,63
 2023bb0:	003f6106 	br	2023938 <_gp+0xffff5bd8>
 2023bb4:	4009883a 	mov	r4,r8
 2023bb8:	003f7506 	br	2023990 <_gp+0xffff5c30>
 2023bbc:	81000317 	ldw	r4,12(r16)
 2023bc0:	003fde06 	br	2023b3c <_gp+0xffff5ddc>
 2023bc4:	81c5883a 	add	r2,r16,r7
 2023bc8:	11400117 	ldw	r5,4(r2)
 2023bcc:	9009883a 	mov	r4,r18
 2023bd0:	29400054 	ori	r5,r5,1
 2023bd4:	11400115 	stw	r5,4(r2)
 2023bd8:	2024ae40 	call	2024ae4 <__malloc_unlock>
 2023bdc:	80800204 	addi	r2,r16,8
 2023be0:	003fe006 	br	2023b64 <_gp+0xffff5e04>
 2023be4:	9c000217 	ldw	r16,8(r19)
 2023be8:	00bfff04 	movi	r2,-4
 2023bec:	85800117 	ldw	r22,4(r16)
 2023bf0:	b0ac703a 	and	r22,r22,r2
 2023bf4:	b4400336 	bltu	r22,r17,2023c04 <_malloc_r+0x344>
 2023bf8:	b445c83a 	sub	r2,r22,r17
 2023bfc:	00c003c4 	movi	r3,15
 2023c00:	18805d16 	blt	r3,r2,2023d78 <_malloc_r+0x4b8>
 2023c04:	05c080b4 	movhi	r23,514
 2023c08:	008080b4 	movhi	r2,514
 2023c0c:	1099f604 	addi	r2,r2,26584
 2023c10:	bdd76104 	addi	r23,r23,23940
 2023c14:	15400017 	ldw	r21,0(r2)
 2023c18:	b8c00017 	ldw	r3,0(r23)
 2023c1c:	00bfffc4 	movi	r2,-1
 2023c20:	858d883a 	add	r6,r16,r22
 2023c24:	8d6b883a 	add	r21,r17,r21
 2023c28:	1880ea26 	beq	r3,r2,2023fd4 <_malloc_r+0x714>
 2023c2c:	ad4403c4 	addi	r21,r21,4111
 2023c30:	00bc0004 	movi	r2,-4096
 2023c34:	a8aa703a 	and	r21,r21,r2
 2023c38:	a80b883a 	mov	r5,r21
 2023c3c:	9009883a 	mov	r4,r18
 2023c40:	d9800015 	stw	r6,0(sp)
 2023c44:	20243e40 	call	20243e4 <_sbrk_r>
 2023c48:	1029883a 	mov	r20,r2
 2023c4c:	00bfffc4 	movi	r2,-1
 2023c50:	d9800017 	ldw	r6,0(sp)
 2023c54:	a080e826 	beq	r20,r2,2023ff8 <_malloc_r+0x738>
 2023c58:	a180a636 	bltu	r20,r6,2023ef4 <_malloc_r+0x634>
 2023c5c:	070080b4 	movhi	fp,514
 2023c60:	e719f704 	addi	fp,fp,26588
 2023c64:	e0800017 	ldw	r2,0(fp)
 2023c68:	a887883a 	add	r3,r21,r2
 2023c6c:	e0c00015 	stw	r3,0(fp)
 2023c70:	3500e626 	beq	r6,r20,202400c <_malloc_r+0x74c>
 2023c74:	b9000017 	ldw	r4,0(r23)
 2023c78:	00bfffc4 	movi	r2,-1
 2023c7c:	2080ee26 	beq	r4,r2,2024038 <_malloc_r+0x778>
 2023c80:	a185c83a 	sub	r2,r20,r6
 2023c84:	10c5883a 	add	r2,r2,r3
 2023c88:	e0800015 	stw	r2,0(fp)
 2023c8c:	a0c001cc 	andi	r3,r20,7
 2023c90:	1800bc26 	beq	r3,zero,2023f84 <_malloc_r+0x6c4>
 2023c94:	a0e9c83a 	sub	r20,r20,r3
 2023c98:	00840204 	movi	r2,4104
 2023c9c:	a5000204 	addi	r20,r20,8
 2023ca0:	10c7c83a 	sub	r3,r2,r3
 2023ca4:	a545883a 	add	r2,r20,r21
 2023ca8:	1083ffcc 	andi	r2,r2,4095
 2023cac:	18abc83a 	sub	r21,r3,r2
 2023cb0:	a80b883a 	mov	r5,r21
 2023cb4:	9009883a 	mov	r4,r18
 2023cb8:	20243e40 	call	20243e4 <_sbrk_r>
 2023cbc:	00ffffc4 	movi	r3,-1
 2023cc0:	10c0e126 	beq	r2,r3,2024048 <_malloc_r+0x788>
 2023cc4:	1505c83a 	sub	r2,r2,r20
 2023cc8:	1545883a 	add	r2,r2,r21
 2023ccc:	10800054 	ori	r2,r2,1
 2023cd0:	e0c00017 	ldw	r3,0(fp)
 2023cd4:	9d000215 	stw	r20,8(r19)
 2023cd8:	a0800115 	stw	r2,4(r20)
 2023cdc:	a8c7883a 	add	r3,r21,r3
 2023ce0:	e0c00015 	stw	r3,0(fp)
 2023ce4:	84c00e26 	beq	r16,r19,2023d20 <_malloc_r+0x460>
 2023ce8:	018003c4 	movi	r6,15
 2023cec:	3580a72e 	bgeu	r6,r22,2023f8c <_malloc_r+0x6cc>
 2023cf0:	81400117 	ldw	r5,4(r16)
 2023cf4:	013ffe04 	movi	r4,-8
 2023cf8:	b0bffd04 	addi	r2,r22,-12
 2023cfc:	1104703a 	and	r2,r2,r4
 2023d00:	2900004c 	andi	r4,r5,1
 2023d04:	2088b03a 	or	r4,r4,r2
 2023d08:	81000115 	stw	r4,4(r16)
 2023d0c:	01400144 	movi	r5,5
 2023d10:	8089883a 	add	r4,r16,r2
 2023d14:	21400115 	stw	r5,4(r4)
 2023d18:	21400215 	stw	r5,8(r4)
 2023d1c:	3080cd36 	bltu	r6,r2,2024054 <_malloc_r+0x794>
 2023d20:	008080b4 	movhi	r2,514
 2023d24:	1099f504 	addi	r2,r2,26580
 2023d28:	11000017 	ldw	r4,0(r2)
 2023d2c:	20c0012e 	bgeu	r4,r3,2023d34 <_malloc_r+0x474>
 2023d30:	10c00015 	stw	r3,0(r2)
 2023d34:	008080b4 	movhi	r2,514
 2023d38:	1099f404 	addi	r2,r2,26576
 2023d3c:	11000017 	ldw	r4,0(r2)
 2023d40:	9c000217 	ldw	r16,8(r19)
 2023d44:	20c0012e 	bgeu	r4,r3,2023d4c <_malloc_r+0x48c>
 2023d48:	10c00015 	stw	r3,0(r2)
 2023d4c:	80c00117 	ldw	r3,4(r16)
 2023d50:	00bfff04 	movi	r2,-4
 2023d54:	1886703a 	and	r3,r3,r2
 2023d58:	1c45c83a 	sub	r2,r3,r17
 2023d5c:	1c400236 	bltu	r3,r17,2023d68 <_malloc_r+0x4a8>
 2023d60:	00c003c4 	movi	r3,15
 2023d64:	18800416 	blt	r3,r2,2023d78 <_malloc_r+0x4b8>
 2023d68:	9009883a 	mov	r4,r18
 2023d6c:	2024ae40 	call	2024ae4 <__malloc_unlock>
 2023d70:	0005883a 	mov	r2,zero
 2023d74:	003f7b06 	br	2023b64 <_gp+0xffff5e04>
 2023d78:	88c00054 	ori	r3,r17,1
 2023d7c:	80c00115 	stw	r3,4(r16)
 2023d80:	8463883a 	add	r17,r16,r17
 2023d84:	10800054 	ori	r2,r2,1
 2023d88:	9c400215 	stw	r17,8(r19)
 2023d8c:	88800115 	stw	r2,4(r17)
 2023d90:	9009883a 	mov	r4,r18
 2023d94:	2024ae40 	call	2024ae4 <__malloc_unlock>
 2023d98:	80800204 	addi	r2,r16,8
 2023d9c:	003f7106 	br	2023b64 <_gp+0xffff5e04>
 2023da0:	00c00504 	movi	r3,20
 2023da4:	18804a2e 	bgeu	r3,r2,2023ed0 <_malloc_r+0x610>
 2023da8:	00c01504 	movi	r3,84
 2023dac:	18806e36 	bltu	r3,r2,2023f68 <_malloc_r+0x6a8>
 2023db0:	8804d33a 	srli	r2,r17,12
 2023db4:	12001bc4 	addi	r8,r2,111
 2023db8:	11c01b84 	addi	r7,r2,110
 2023dbc:	4209883a 	add	r4,r8,r8
 2023dc0:	003edd06 	br	2023938 <_gp+0xffff5bd8>
 2023dc4:	3804d27a 	srli	r2,r7,9
 2023dc8:	00c00104 	movi	r3,4
 2023dcc:	1880442e 	bgeu	r3,r2,2023ee0 <_malloc_r+0x620>
 2023dd0:	00c00504 	movi	r3,20
 2023dd4:	18808136 	bltu	r3,r2,2023fdc <_malloc_r+0x71c>
 2023dd8:	11401704 	addi	r5,r2,92
 2023ddc:	10c016c4 	addi	r3,r2,91
 2023de0:	294b883a 	add	r5,r5,r5
 2023de4:	294b883a 	add	r5,r5,r5
 2023de8:	294b883a 	add	r5,r5,r5
 2023dec:	994b883a 	add	r5,r19,r5
 2023df0:	28800017 	ldw	r2,0(r5)
 2023df4:	018080b4 	movhi	r6,514
 2023df8:	297ffe04 	addi	r5,r5,-8
 2023dfc:	31965604 	addi	r6,r6,22872
 2023e00:	28806526 	beq	r5,r2,2023f98 <_malloc_r+0x6d8>
 2023e04:	01bfff04 	movi	r6,-4
 2023e08:	10c00117 	ldw	r3,4(r2)
 2023e0c:	1986703a 	and	r3,r3,r6
 2023e10:	38c0022e 	bgeu	r7,r3,2023e1c <_malloc_r+0x55c>
 2023e14:	10800217 	ldw	r2,8(r2)
 2023e18:	28bffb1e 	bne	r5,r2,2023e08 <_gp+0xffff60a8>
 2023e1c:	11400317 	ldw	r5,12(r2)
 2023e20:	98c00117 	ldw	r3,4(r19)
 2023e24:	81400315 	stw	r5,12(r16)
 2023e28:	80800215 	stw	r2,8(r16)
 2023e2c:	2c000215 	stw	r16,8(r5)
 2023e30:	14000315 	stw	r16,12(r2)
 2023e34:	003ef806 	br	2023a18 <_gp+0xffff5cb8>
 2023e38:	88c00054 	ori	r3,r17,1
 2023e3c:	80c00115 	stw	r3,4(r16)
 2023e40:	8463883a 	add	r17,r16,r17
 2023e44:	34400515 	stw	r17,20(r6)
 2023e48:	34400415 	stw	r17,16(r6)
 2023e4c:	10c00054 	ori	r3,r2,1
 2023e50:	8a000315 	stw	r8,12(r17)
 2023e54:	8a000215 	stw	r8,8(r17)
 2023e58:	88c00115 	stw	r3,4(r17)
 2023e5c:	88a3883a 	add	r17,r17,r2
 2023e60:	88800015 	stw	r2,0(r17)
 2023e64:	9009883a 	mov	r4,r18
 2023e68:	2024ae40 	call	2024ae4 <__malloc_unlock>
 2023e6c:	80800204 	addi	r2,r16,8
 2023e70:	003f3c06 	br	2023b64 <_gp+0xffff5e04>
 2023e74:	30c00117 	ldw	r3,4(r6)
 2023e78:	003ee706 	br	2023a18 <_gp+0xffff5cb8>
 2023e7c:	5ac00044 	addi	r11,r11,1
 2023e80:	588000cc 	andi	r2,r11,3
 2023e84:	31800204 	addi	r6,r6,8
 2023e88:	103efd1e 	bne	r2,zero,2023a80 <_gp+0xffff5d20>
 2023e8c:	00002406 	br	2023f20 <_malloc_r+0x660>
 2023e90:	14000317 	ldw	r16,12(r2)
 2023e94:	143f251e 	bne	r2,r16,2023b2c <_gp+0xffff5dcc>
 2023e98:	21000084 	addi	r4,r4,2
 2023e9c:	003ebc06 	br	2023990 <_gp+0xffff5c30>
 2023ea0:	8085883a 	add	r2,r16,r2
 2023ea4:	10c00117 	ldw	r3,4(r2)
 2023ea8:	81000317 	ldw	r4,12(r16)
 2023eac:	81400217 	ldw	r5,8(r16)
 2023eb0:	18c00054 	ori	r3,r3,1
 2023eb4:	10c00115 	stw	r3,4(r2)
 2023eb8:	29000315 	stw	r4,12(r5)
 2023ebc:	21400215 	stw	r5,8(r4)
 2023ec0:	9009883a 	mov	r4,r18
 2023ec4:	2024ae40 	call	2024ae4 <__malloc_unlock>
 2023ec8:	80800204 	addi	r2,r16,8
 2023ecc:	003f2506 	br	2023b64 <_gp+0xffff5e04>
 2023ed0:	12001704 	addi	r8,r2,92
 2023ed4:	11c016c4 	addi	r7,r2,91
 2023ed8:	4209883a 	add	r4,r8,r8
 2023edc:	003e9606 	br	2023938 <_gp+0xffff5bd8>
 2023ee0:	3804d1ba 	srli	r2,r7,6
 2023ee4:	11400e44 	addi	r5,r2,57
 2023ee8:	10c00e04 	addi	r3,r2,56
 2023eec:	294b883a 	add	r5,r5,r5
 2023ef0:	003fbc06 	br	2023de4 <_gp+0xffff6084>
 2023ef4:	84ff5926 	beq	r16,r19,2023c5c <_gp+0xffff5efc>
 2023ef8:	008080b4 	movhi	r2,514
 2023efc:	10965604 	addi	r2,r2,22872
 2023f00:	14000217 	ldw	r16,8(r2)
 2023f04:	00bfff04 	movi	r2,-4
 2023f08:	80c00117 	ldw	r3,4(r16)
 2023f0c:	1886703a 	and	r3,r3,r2
 2023f10:	003f9106 	br	2023d58 <_gp+0xffff5ff8>
 2023f14:	60800217 	ldw	r2,8(r12)
 2023f18:	213fffc4 	addi	r4,r4,-1
 2023f1c:	1300651e 	bne	r2,r12,20240b4 <_malloc_r+0x7f4>
 2023f20:	208000cc 	andi	r2,r4,3
 2023f24:	633ffe04 	addi	r12,r12,-8
 2023f28:	103ffa1e 	bne	r2,zero,2023f14 <_gp+0xffff61b4>
 2023f2c:	98800117 	ldw	r2,4(r19)
 2023f30:	0146303a 	nor	r3,zero,r5
 2023f34:	1884703a 	and	r2,r3,r2
 2023f38:	98800115 	stw	r2,4(r19)
 2023f3c:	294b883a 	add	r5,r5,r5
 2023f40:	117f2836 	bltu	r2,r5,2023be4 <_gp+0xffff5e84>
 2023f44:	283f2726 	beq	r5,zero,2023be4 <_gp+0xffff5e84>
 2023f48:	2886703a 	and	r3,r5,r2
 2023f4c:	5809883a 	mov	r4,r11
 2023f50:	183ec31e 	bne	r3,zero,2023a60 <_gp+0xffff5d00>
 2023f54:	294b883a 	add	r5,r5,r5
 2023f58:	2886703a 	and	r3,r5,r2
 2023f5c:	21000104 	addi	r4,r4,4
 2023f60:	183ffc26 	beq	r3,zero,2023f54 <_gp+0xffff61f4>
 2023f64:	003ebe06 	br	2023a60 <_gp+0xffff5d00>
 2023f68:	00c05504 	movi	r3,340
 2023f6c:	18801236 	bltu	r3,r2,2023fb8 <_malloc_r+0x6f8>
 2023f70:	8804d3fa 	srli	r2,r17,15
 2023f74:	12001e04 	addi	r8,r2,120
 2023f78:	11c01dc4 	addi	r7,r2,119
 2023f7c:	4209883a 	add	r4,r8,r8
 2023f80:	003e6d06 	br	2023938 <_gp+0xffff5bd8>
 2023f84:	00c40004 	movi	r3,4096
 2023f88:	003f4606 	br	2023ca4 <_gp+0xffff5f44>
 2023f8c:	00800044 	movi	r2,1
 2023f90:	a0800115 	stw	r2,4(r20)
 2023f94:	003f7406 	br	2023d68 <_gp+0xffff6008>
 2023f98:	1805d0ba 	srai	r2,r3,2
 2023f9c:	01c00044 	movi	r7,1
 2023fa0:	30c00117 	ldw	r3,4(r6)
 2023fa4:	388e983a 	sll	r7,r7,r2
 2023fa8:	2805883a 	mov	r2,r5
 2023fac:	38c6b03a 	or	r3,r7,r3
 2023fb0:	30c00115 	stw	r3,4(r6)
 2023fb4:	003f9b06 	br	2023e24 <_gp+0xffff60c4>
 2023fb8:	00c15504 	movi	r3,1364
 2023fbc:	18801a36 	bltu	r3,r2,2024028 <_malloc_r+0x768>
 2023fc0:	8804d4ba 	srli	r2,r17,18
 2023fc4:	12001f44 	addi	r8,r2,125
 2023fc8:	11c01f04 	addi	r7,r2,124
 2023fcc:	4209883a 	add	r4,r8,r8
 2023fd0:	003e5906 	br	2023938 <_gp+0xffff5bd8>
 2023fd4:	ad400404 	addi	r21,r21,16
 2023fd8:	003f1706 	br	2023c38 <_gp+0xffff5ed8>
 2023fdc:	00c01504 	movi	r3,84
 2023fe0:	18802336 	bltu	r3,r2,2024070 <_malloc_r+0x7b0>
 2023fe4:	3804d33a 	srli	r2,r7,12
 2023fe8:	11401bc4 	addi	r5,r2,111
 2023fec:	10c01b84 	addi	r3,r2,110
 2023ff0:	294b883a 	add	r5,r5,r5
 2023ff4:	003f7b06 	br	2023de4 <_gp+0xffff6084>
 2023ff8:	9c000217 	ldw	r16,8(r19)
 2023ffc:	00bfff04 	movi	r2,-4
 2024000:	80c00117 	ldw	r3,4(r16)
 2024004:	1886703a 	and	r3,r3,r2
 2024008:	003f5306 	br	2023d58 <_gp+0xffff5ff8>
 202400c:	3083ffcc 	andi	r2,r6,4095
 2024010:	103f181e 	bne	r2,zero,2023c74 <_gp+0xffff5f14>
 2024014:	99000217 	ldw	r4,8(r19)
 2024018:	b545883a 	add	r2,r22,r21
 202401c:	10800054 	ori	r2,r2,1
 2024020:	20800115 	stw	r2,4(r4)
 2024024:	003f3e06 	br	2023d20 <_gp+0xffff5fc0>
 2024028:	01003f84 	movi	r4,254
 202402c:	02001fc4 	movi	r8,127
 2024030:	01c01f84 	movi	r7,126
 2024034:	003e4006 	br	2023938 <_gp+0xffff5bd8>
 2024038:	008080b4 	movhi	r2,514
 202403c:	10976104 	addi	r2,r2,23940
 2024040:	15000015 	stw	r20,0(r2)
 2024044:	003f1106 	br	2023c8c <_gp+0xffff5f2c>
 2024048:	00800044 	movi	r2,1
 202404c:	002b883a 	mov	r21,zero
 2024050:	003f1f06 	br	2023cd0 <_gp+0xffff5f70>
 2024054:	81400204 	addi	r5,r16,8
 2024058:	9009883a 	mov	r4,r18
 202405c:	202326c0 	call	202326c <_free_r>
 2024060:	008080b4 	movhi	r2,514
 2024064:	1099f704 	addi	r2,r2,26588
 2024068:	10c00017 	ldw	r3,0(r2)
 202406c:	003f2c06 	br	2023d20 <_gp+0xffff5fc0>
 2024070:	00c05504 	movi	r3,340
 2024074:	18800536 	bltu	r3,r2,202408c <_malloc_r+0x7cc>
 2024078:	3804d3fa 	srli	r2,r7,15
 202407c:	11401e04 	addi	r5,r2,120
 2024080:	10c01dc4 	addi	r3,r2,119
 2024084:	294b883a 	add	r5,r5,r5
 2024088:	003f5606 	br	2023de4 <_gp+0xffff6084>
 202408c:	00c15504 	movi	r3,1364
 2024090:	18800536 	bltu	r3,r2,20240a8 <_malloc_r+0x7e8>
 2024094:	3804d4ba 	srli	r2,r7,18
 2024098:	11401f44 	addi	r5,r2,125
 202409c:	10c01f04 	addi	r3,r2,124
 20240a0:	294b883a 	add	r5,r5,r5
 20240a4:	003f4f06 	br	2023de4 <_gp+0xffff6084>
 20240a8:	01403f84 	movi	r5,254
 20240ac:	00c01f84 	movi	r3,126
 20240b0:	003f4c06 	br	2023de4 <_gp+0xffff6084>
 20240b4:	98800117 	ldw	r2,4(r19)
 20240b8:	003fa006 	br	2023f3c <_gp+0xffff61dc>
 20240bc:	8808d0fa 	srli	r4,r17,3
 20240c0:	20800044 	addi	r2,r4,1
 20240c4:	1085883a 	add	r2,r2,r2
 20240c8:	003e9006 	br	2023b0c <_gp+0xffff5dac>

020240cc <memset>:
 20240cc:	20c000cc 	andi	r3,r4,3
 20240d0:	2005883a 	mov	r2,r4
 20240d4:	18004426 	beq	r3,zero,20241e8 <memset+0x11c>
 20240d8:	31ffffc4 	addi	r7,r6,-1
 20240dc:	30004026 	beq	r6,zero,20241e0 <memset+0x114>
 20240e0:	2813883a 	mov	r9,r5
 20240e4:	200d883a 	mov	r6,r4
 20240e8:	2007883a 	mov	r3,r4
 20240ec:	00000406 	br	2024100 <memset+0x34>
 20240f0:	3a3fffc4 	addi	r8,r7,-1
 20240f4:	31800044 	addi	r6,r6,1
 20240f8:	38003926 	beq	r7,zero,20241e0 <memset+0x114>
 20240fc:	400f883a 	mov	r7,r8
 2024100:	18c00044 	addi	r3,r3,1
 2024104:	32400005 	stb	r9,0(r6)
 2024108:	1a0000cc 	andi	r8,r3,3
 202410c:	403ff81e 	bne	r8,zero,20240f0 <_gp+0xffff6390>
 2024110:	010000c4 	movi	r4,3
 2024114:	21c02d2e 	bgeu	r4,r7,20241cc <memset+0x100>
 2024118:	29003fcc 	andi	r4,r5,255
 202411c:	200c923a 	slli	r6,r4,8
 2024120:	3108b03a 	or	r4,r6,r4
 2024124:	200c943a 	slli	r6,r4,16
 2024128:	218cb03a 	or	r6,r4,r6
 202412c:	010003c4 	movi	r4,15
 2024130:	21c0182e 	bgeu	r4,r7,2024194 <memset+0xc8>
 2024134:	3b3ffc04 	addi	r12,r7,-16
 2024138:	6018d13a 	srli	r12,r12,4
 202413c:	1a000104 	addi	r8,r3,4
 2024140:	1ac00204 	addi	r11,r3,8
 2024144:	6008913a 	slli	r4,r12,4
 2024148:	1a800304 	addi	r10,r3,12
 202414c:	1813883a 	mov	r9,r3
 2024150:	21000504 	addi	r4,r4,20
 2024154:	1909883a 	add	r4,r3,r4
 2024158:	49800015 	stw	r6,0(r9)
 202415c:	41800015 	stw	r6,0(r8)
 2024160:	59800015 	stw	r6,0(r11)
 2024164:	51800015 	stw	r6,0(r10)
 2024168:	42000404 	addi	r8,r8,16
 202416c:	4a400404 	addi	r9,r9,16
 2024170:	5ac00404 	addi	r11,r11,16
 2024174:	52800404 	addi	r10,r10,16
 2024178:	413ff71e 	bne	r8,r4,2024158 <_gp+0xffff63f8>
 202417c:	63000044 	addi	r12,r12,1
 2024180:	6018913a 	slli	r12,r12,4
 2024184:	39c003cc 	andi	r7,r7,15
 2024188:	010000c4 	movi	r4,3
 202418c:	1b07883a 	add	r3,r3,r12
 2024190:	21c00e2e 	bgeu	r4,r7,20241cc <memset+0x100>
 2024194:	1813883a 	mov	r9,r3
 2024198:	3811883a 	mov	r8,r7
 202419c:	010000c4 	movi	r4,3
 20241a0:	49800015 	stw	r6,0(r9)
 20241a4:	423fff04 	addi	r8,r8,-4
 20241a8:	4a400104 	addi	r9,r9,4
 20241ac:	223ffc36 	bltu	r4,r8,20241a0 <_gp+0xffff6440>
 20241b0:	393fff04 	addi	r4,r7,-4
 20241b4:	2008d0ba 	srli	r4,r4,2
 20241b8:	39c000cc 	andi	r7,r7,3
 20241bc:	21000044 	addi	r4,r4,1
 20241c0:	2109883a 	add	r4,r4,r4
 20241c4:	2109883a 	add	r4,r4,r4
 20241c8:	1907883a 	add	r3,r3,r4
 20241cc:	38000526 	beq	r7,zero,20241e4 <memset+0x118>
 20241d0:	19cf883a 	add	r7,r3,r7
 20241d4:	19400005 	stb	r5,0(r3)
 20241d8:	18c00044 	addi	r3,r3,1
 20241dc:	38fffd1e 	bne	r7,r3,20241d4 <_gp+0xffff6474>
 20241e0:	f800283a 	ret
 20241e4:	f800283a 	ret
 20241e8:	2007883a 	mov	r3,r4
 20241ec:	300f883a 	mov	r7,r6
 20241f0:	003fc706 	br	2024110 <_gp+0xffff63b0>

020241f4 <lflush>:
 20241f4:	2080030b 	ldhu	r2,12(r4)
 20241f8:	00c00244 	movi	r3,9
 20241fc:	1080024c 	andi	r2,r2,9
 2024200:	10c00226 	beq	r2,r3,202420c <lflush+0x18>
 2024204:	0005883a 	mov	r2,zero
 2024208:	f800283a 	ret
 202420c:	2022d681 	jmpi	2022d68 <fflush>

02024210 <__srefill_r>:
 2024210:	defffc04 	addi	sp,sp,-16
 2024214:	dc400115 	stw	r17,4(sp)
 2024218:	dc000015 	stw	r16,0(sp)
 202421c:	dfc00315 	stw	ra,12(sp)
 2024220:	dc800215 	stw	r18,8(sp)
 2024224:	2023883a 	mov	r17,r4
 2024228:	2821883a 	mov	r16,r5
 202422c:	20000226 	beq	r4,zero,2024238 <__srefill_r+0x28>
 2024230:	20800e17 	ldw	r2,56(r4)
 2024234:	10003c26 	beq	r2,zero,2024328 <__srefill_r+0x118>
 2024238:	80c0030b 	ldhu	r3,12(r16)
 202423c:	1908000c 	andi	r4,r3,8192
 2024240:	1805883a 	mov	r2,r3
 2024244:	2000071e 	bne	r4,zero,2024264 <__srefill_r+0x54>
 2024248:	81001917 	ldw	r4,100(r16)
 202424c:	18880014 	ori	r2,r3,8192
 2024250:	00f7ffc4 	movi	r3,-8193
 2024254:	20c8703a 	and	r4,r4,r3
 2024258:	8080030d 	sth	r2,12(r16)
 202425c:	1007883a 	mov	r3,r2
 2024260:	81001915 	stw	r4,100(r16)
 2024264:	80000115 	stw	zero,4(r16)
 2024268:	1100080c 	andi	r4,r2,32
 202426c:	2000571e 	bne	r4,zero,20243cc <__srefill_r+0x1bc>
 2024270:	1100010c 	andi	r4,r2,4
 2024274:	20001f26 	beq	r4,zero,20242f4 <__srefill_r+0xe4>
 2024278:	81400c17 	ldw	r5,48(r16)
 202427c:	28000826 	beq	r5,zero,20242a0 <__srefill_r+0x90>
 2024280:	80801004 	addi	r2,r16,64
 2024284:	28800226 	beq	r5,r2,2024290 <__srefill_r+0x80>
 2024288:	8809883a 	mov	r4,r17
 202428c:	202326c0 	call	202326c <_free_r>
 2024290:	80800f17 	ldw	r2,60(r16)
 2024294:	80000c15 	stw	zero,48(r16)
 2024298:	80800115 	stw	r2,4(r16)
 202429c:	1000391e 	bne	r2,zero,2024384 <__srefill_r+0x174>
 20242a0:	80800417 	ldw	r2,16(r16)
 20242a4:	10004b26 	beq	r2,zero,20243d4 <__srefill_r+0x1c4>
 20242a8:	8480030b 	ldhu	r18,12(r16)
 20242ac:	908000cc 	andi	r2,r18,3
 20242b0:	10001f1e 	bne	r2,zero,2024330 <__srefill_r+0x120>
 20242b4:	81800417 	ldw	r6,16(r16)
 20242b8:	80800817 	ldw	r2,32(r16)
 20242bc:	81c00517 	ldw	r7,20(r16)
 20242c0:	81400717 	ldw	r5,28(r16)
 20242c4:	81800015 	stw	r6,0(r16)
 20242c8:	8809883a 	mov	r4,r17
 20242cc:	103ee83a 	callr	r2
 20242d0:	80800115 	stw	r2,4(r16)
 20242d4:	00800e0e 	bge	zero,r2,2024310 <__srefill_r+0x100>
 20242d8:	0005883a 	mov	r2,zero
 20242dc:	dfc00317 	ldw	ra,12(sp)
 20242e0:	dc800217 	ldw	r18,8(sp)
 20242e4:	dc400117 	ldw	r17,4(sp)
 20242e8:	dc000017 	ldw	r16,0(sp)
 20242ec:	dec00404 	addi	sp,sp,16
 20242f0:	f800283a 	ret
 20242f4:	1100040c 	andi	r4,r2,16
 20242f8:	20003026 	beq	r4,zero,20243bc <__srefill_r+0x1ac>
 20242fc:	1080020c 	andi	r2,r2,8
 2024300:	1000241e 	bne	r2,zero,2024394 <__srefill_r+0x184>
 2024304:	18c00114 	ori	r3,r3,4
 2024308:	80c0030d 	sth	r3,12(r16)
 202430c:	003fe406 	br	20242a0 <_gp+0xffff6540>
 2024310:	80c0030b 	ldhu	r3,12(r16)
 2024314:	1000161e 	bne	r2,zero,2024370 <__srefill_r+0x160>
 2024318:	18c00814 	ori	r3,r3,32
 202431c:	00bfffc4 	movi	r2,-1
 2024320:	80c0030d 	sth	r3,12(r16)
 2024324:	003fed06 	br	20242dc <_gp+0xffff657c>
 2024328:	20230f80 	call	20230f8 <__sinit>
 202432c:	003fc206 	br	2024238 <_gp+0xffff64d8>
 2024330:	008080b4 	movhi	r2,514
 2024334:	10975f04 	addi	r2,r2,23932
 2024338:	11000017 	ldw	r4,0(r2)
 202433c:	014080b4 	movhi	r5,514
 2024340:	00800044 	movi	r2,1
 2024344:	29507d04 	addi	r5,r5,16884
 2024348:	8080030d 	sth	r2,12(r16)
 202434c:	202357c0 	call	202357c <_fwalk>
 2024350:	00800244 	movi	r2,9
 2024354:	8480030d 	sth	r18,12(r16)
 2024358:	9480024c 	andi	r18,r18,9
 202435c:	90bfd51e 	bne	r18,r2,20242b4 <_gp+0xffff6554>
 2024360:	800b883a 	mov	r5,r16
 2024364:	8809883a 	mov	r4,r17
 2024368:	2022af00 	call	2022af0 <__sflush_r>
 202436c:	003fd106 	br	20242b4 <_gp+0xffff6554>
 2024370:	18c01014 	ori	r3,r3,64
 2024374:	80000115 	stw	zero,4(r16)
 2024378:	00bfffc4 	movi	r2,-1
 202437c:	80c0030d 	sth	r3,12(r16)
 2024380:	003fd606 	br	20242dc <_gp+0xffff657c>
 2024384:	80c00e17 	ldw	r3,56(r16)
 2024388:	0005883a 	mov	r2,zero
 202438c:	80c00015 	stw	r3,0(r16)
 2024390:	003fd206 	br	20242dc <_gp+0xffff657c>
 2024394:	800b883a 	mov	r5,r16
 2024398:	8809883a 	mov	r4,r17
 202439c:	2022d0c0 	call	2022d0c <_fflush_r>
 20243a0:	10000a1e 	bne	r2,zero,20243cc <__srefill_r+0x1bc>
 20243a4:	8080030b 	ldhu	r2,12(r16)
 20243a8:	00fffdc4 	movi	r3,-9
 20243ac:	80000215 	stw	zero,8(r16)
 20243b0:	1886703a 	and	r3,r3,r2
 20243b4:	80000615 	stw	zero,24(r16)
 20243b8:	003fd206 	br	2024304 <_gp+0xffff65a4>
 20243bc:	00800244 	movi	r2,9
 20243c0:	88800015 	stw	r2,0(r17)
 20243c4:	18c01014 	ori	r3,r3,64
 20243c8:	80c0030d 	sth	r3,12(r16)
 20243cc:	00bfffc4 	movi	r2,-1
 20243d0:	003fc206 	br	20242dc <_gp+0xffff657c>
 20243d4:	800b883a 	mov	r5,r16
 20243d8:	8809883a 	mov	r4,r17
 20243dc:	20237040 	call	2023704 <__smakebuf_r>
 20243e0:	003fb106 	br	20242a8 <_gp+0xffff6548>

020243e4 <_sbrk_r>:
 20243e4:	defffd04 	addi	sp,sp,-12
 20243e8:	dc000015 	stw	r16,0(sp)
 20243ec:	040080b4 	movhi	r16,514
 20243f0:	dc400115 	stw	r17,4(sp)
 20243f4:	8419f304 	addi	r16,r16,26572
 20243f8:	2023883a 	mov	r17,r4
 20243fc:	2809883a 	mov	r4,r5
 2024400:	dfc00215 	stw	ra,8(sp)
 2024404:	80000015 	stw	zero,0(r16)
 2024408:	2024bfc0 	call	2024bfc <sbrk>
 202440c:	00ffffc4 	movi	r3,-1
 2024410:	10c00526 	beq	r2,r3,2024428 <_sbrk_r+0x44>
 2024414:	dfc00217 	ldw	ra,8(sp)
 2024418:	dc400117 	ldw	r17,4(sp)
 202441c:	dc000017 	ldw	r16,0(sp)
 2024420:	dec00304 	addi	sp,sp,12
 2024424:	f800283a 	ret
 2024428:	80c00017 	ldw	r3,0(r16)
 202442c:	183ff926 	beq	r3,zero,2024414 <_gp+0xffff66b4>
 2024430:	88c00015 	stw	r3,0(r17)
 2024434:	003ff706 	br	2024414 <_gp+0xffff66b4>

02024438 <__sread>:
 2024438:	defffe04 	addi	sp,sp,-8
 202443c:	dc000015 	stw	r16,0(sp)
 2024440:	2821883a 	mov	r16,r5
 2024444:	2940038f 	ldh	r5,14(r5)
 2024448:	dfc00115 	stw	ra,4(sp)
 202444c:	202483c0 	call	202483c <_read_r>
 2024450:	10000716 	blt	r2,zero,2024470 <__sread+0x38>
 2024454:	80c01417 	ldw	r3,80(r16)
 2024458:	1887883a 	add	r3,r3,r2
 202445c:	80c01415 	stw	r3,80(r16)
 2024460:	dfc00117 	ldw	ra,4(sp)
 2024464:	dc000017 	ldw	r16,0(sp)
 2024468:	dec00204 	addi	sp,sp,8
 202446c:	f800283a 	ret
 2024470:	80c0030b 	ldhu	r3,12(r16)
 2024474:	18fbffcc 	andi	r3,r3,61439
 2024478:	80c0030d 	sth	r3,12(r16)
 202447c:	dfc00117 	ldw	ra,4(sp)
 2024480:	dc000017 	ldw	r16,0(sp)
 2024484:	dec00204 	addi	sp,sp,8
 2024488:	f800283a 	ret

0202448c <__seofread>:
 202448c:	0005883a 	mov	r2,zero
 2024490:	f800283a 	ret

02024494 <__swrite>:
 2024494:	2880030b 	ldhu	r2,12(r5)
 2024498:	defffb04 	addi	sp,sp,-20
 202449c:	dcc00315 	stw	r19,12(sp)
 20244a0:	dc800215 	stw	r18,8(sp)
 20244a4:	dc400115 	stw	r17,4(sp)
 20244a8:	dc000015 	stw	r16,0(sp)
 20244ac:	dfc00415 	stw	ra,16(sp)
 20244b0:	10c0400c 	andi	r3,r2,256
 20244b4:	2821883a 	mov	r16,r5
 20244b8:	2023883a 	mov	r17,r4
 20244bc:	3025883a 	mov	r18,r6
 20244c0:	3827883a 	mov	r19,r7
 20244c4:	18000526 	beq	r3,zero,20244dc <__swrite+0x48>
 20244c8:	2940038f 	ldh	r5,14(r5)
 20244cc:	01c00084 	movi	r7,2
 20244d0:	000d883a 	mov	r6,zero
 20244d4:	20247dc0 	call	20247dc <_lseek_r>
 20244d8:	8080030b 	ldhu	r2,12(r16)
 20244dc:	8140038f 	ldh	r5,14(r16)
 20244e0:	10bbffcc 	andi	r2,r2,61439
 20244e4:	980f883a 	mov	r7,r19
 20244e8:	900d883a 	mov	r6,r18
 20244ec:	8809883a 	mov	r4,r17
 20244f0:	8080030d 	sth	r2,12(r16)
 20244f4:	dfc00417 	ldw	ra,16(sp)
 20244f8:	dcc00317 	ldw	r19,12(sp)
 20244fc:	dc800217 	ldw	r18,8(sp)
 2024500:	dc400117 	ldw	r17,4(sp)
 2024504:	dc000017 	ldw	r16,0(sp)
 2024508:	dec00504 	addi	sp,sp,20
 202450c:	20245741 	jmpi	2024574 <_write_r>

02024510 <__sseek>:
 2024510:	defffe04 	addi	sp,sp,-8
 2024514:	dc000015 	stw	r16,0(sp)
 2024518:	2821883a 	mov	r16,r5
 202451c:	2940038f 	ldh	r5,14(r5)
 2024520:	dfc00115 	stw	ra,4(sp)
 2024524:	20247dc0 	call	20247dc <_lseek_r>
 2024528:	00ffffc4 	movi	r3,-1
 202452c:	10c00826 	beq	r2,r3,2024550 <__sseek+0x40>
 2024530:	80c0030b 	ldhu	r3,12(r16)
 2024534:	80801415 	stw	r2,80(r16)
 2024538:	18c40014 	ori	r3,r3,4096
 202453c:	80c0030d 	sth	r3,12(r16)
 2024540:	dfc00117 	ldw	ra,4(sp)
 2024544:	dc000017 	ldw	r16,0(sp)
 2024548:	dec00204 	addi	sp,sp,8
 202454c:	f800283a 	ret
 2024550:	80c0030b 	ldhu	r3,12(r16)
 2024554:	18fbffcc 	andi	r3,r3,61439
 2024558:	80c0030d 	sth	r3,12(r16)
 202455c:	dfc00117 	ldw	ra,4(sp)
 2024560:	dc000017 	ldw	r16,0(sp)
 2024564:	dec00204 	addi	sp,sp,8
 2024568:	f800283a 	ret

0202456c <__sclose>:
 202456c:	2940038f 	ldh	r5,14(r5)
 2024570:	20245d41 	jmpi	20245d4 <_close_r>

02024574 <_write_r>:
 2024574:	defffd04 	addi	sp,sp,-12
 2024578:	2805883a 	mov	r2,r5
 202457c:	dc000015 	stw	r16,0(sp)
 2024580:	040080b4 	movhi	r16,514
 2024584:	dc400115 	stw	r17,4(sp)
 2024588:	300b883a 	mov	r5,r6
 202458c:	8419f304 	addi	r16,r16,26572
 2024590:	2023883a 	mov	r17,r4
 2024594:	380d883a 	mov	r6,r7
 2024598:	1009883a 	mov	r4,r2
 202459c:	dfc00215 	stw	ra,8(sp)
 20245a0:	80000015 	stw	zero,0(r16)
 20245a4:	202188c0 	call	202188c <write>
 20245a8:	00ffffc4 	movi	r3,-1
 20245ac:	10c00526 	beq	r2,r3,20245c4 <_write_r+0x50>
 20245b0:	dfc00217 	ldw	ra,8(sp)
 20245b4:	dc400117 	ldw	r17,4(sp)
 20245b8:	dc000017 	ldw	r16,0(sp)
 20245bc:	dec00304 	addi	sp,sp,12
 20245c0:	f800283a 	ret
 20245c4:	80c00017 	ldw	r3,0(r16)
 20245c8:	183ff926 	beq	r3,zero,20245b0 <_gp+0xffff6850>
 20245cc:	88c00015 	stw	r3,0(r17)
 20245d0:	003ff706 	br	20245b0 <_gp+0xffff6850>

020245d4 <_close_r>:
 20245d4:	defffd04 	addi	sp,sp,-12
 20245d8:	dc000015 	stw	r16,0(sp)
 20245dc:	040080b4 	movhi	r16,514
 20245e0:	dc400115 	stw	r17,4(sp)
 20245e4:	8419f304 	addi	r16,r16,26572
 20245e8:	2023883a 	mov	r17,r4
 20245ec:	2809883a 	mov	r4,r5
 20245f0:	dfc00215 	stw	ra,8(sp)
 20245f4:	80000015 	stw	zero,0(r16)
 20245f8:	2021b340 	call	2021b34 <close>
 20245fc:	00ffffc4 	movi	r3,-1
 2024600:	10c00526 	beq	r2,r3,2024618 <_close_r+0x44>
 2024604:	dfc00217 	ldw	ra,8(sp)
 2024608:	dc400117 	ldw	r17,4(sp)
 202460c:	dc000017 	ldw	r16,0(sp)
 2024610:	dec00304 	addi	sp,sp,12
 2024614:	f800283a 	ret
 2024618:	80c00017 	ldw	r3,0(r16)
 202461c:	183ff926 	beq	r3,zero,2024604 <_gp+0xffff68a4>
 2024620:	88c00015 	stw	r3,0(r17)
 2024624:	003ff706 	br	2024604 <_gp+0xffff68a4>

02024628 <_fclose_r>:
 2024628:	28003926 	beq	r5,zero,2024710 <_fclose_r+0xe8>
 202462c:	defffc04 	addi	sp,sp,-16
 2024630:	dc400115 	stw	r17,4(sp)
 2024634:	dc000015 	stw	r16,0(sp)
 2024638:	dfc00315 	stw	ra,12(sp)
 202463c:	dc800215 	stw	r18,8(sp)
 2024640:	2023883a 	mov	r17,r4
 2024644:	2821883a 	mov	r16,r5
 2024648:	20000226 	beq	r4,zero,2024654 <_fclose_r+0x2c>
 202464c:	20800e17 	ldw	r2,56(r4)
 2024650:	10002726 	beq	r2,zero,20246f0 <_fclose_r+0xc8>
 2024654:	8080030f 	ldh	r2,12(r16)
 2024658:	1000071e 	bne	r2,zero,2024678 <_fclose_r+0x50>
 202465c:	0005883a 	mov	r2,zero
 2024660:	dfc00317 	ldw	ra,12(sp)
 2024664:	dc800217 	ldw	r18,8(sp)
 2024668:	dc400117 	ldw	r17,4(sp)
 202466c:	dc000017 	ldw	r16,0(sp)
 2024670:	dec00404 	addi	sp,sp,16
 2024674:	f800283a 	ret
 2024678:	800b883a 	mov	r5,r16
 202467c:	8809883a 	mov	r4,r17
 2024680:	2022af00 	call	2022af0 <__sflush_r>
 2024684:	1025883a 	mov	r18,r2
 2024688:	80800b17 	ldw	r2,44(r16)
 202468c:	10000426 	beq	r2,zero,20246a0 <_fclose_r+0x78>
 2024690:	81400717 	ldw	r5,28(r16)
 2024694:	8809883a 	mov	r4,r17
 2024698:	103ee83a 	callr	r2
 202469c:	10001616 	blt	r2,zero,20246f8 <_fclose_r+0xd0>
 20246a0:	8080030b 	ldhu	r2,12(r16)
 20246a4:	1080200c 	andi	r2,r2,128
 20246a8:	1000151e 	bne	r2,zero,2024700 <_fclose_r+0xd8>
 20246ac:	81400c17 	ldw	r5,48(r16)
 20246b0:	28000526 	beq	r5,zero,20246c8 <_fclose_r+0xa0>
 20246b4:	80801004 	addi	r2,r16,64
 20246b8:	28800226 	beq	r5,r2,20246c4 <_fclose_r+0x9c>
 20246bc:	8809883a 	mov	r4,r17
 20246c0:	202326c0 	call	202326c <_free_r>
 20246c4:	80000c15 	stw	zero,48(r16)
 20246c8:	81401117 	ldw	r5,68(r16)
 20246cc:	28000326 	beq	r5,zero,20246dc <_fclose_r+0xb4>
 20246d0:	8809883a 	mov	r4,r17
 20246d4:	202326c0 	call	202326c <_free_r>
 20246d8:	80001115 	stw	zero,68(r16)
 20246dc:	20231080 	call	2023108 <__sfp_lock_acquire>
 20246e0:	8000030d 	sth	zero,12(r16)
 20246e4:	202310c0 	call	202310c <__sfp_lock_release>
 20246e8:	9005883a 	mov	r2,r18
 20246ec:	003fdc06 	br	2024660 <_gp+0xffff6900>
 20246f0:	20230f80 	call	20230f8 <__sinit>
 20246f4:	003fd706 	br	2024654 <_gp+0xffff68f4>
 20246f8:	04bfffc4 	movi	r18,-1
 20246fc:	003fe806 	br	20246a0 <_gp+0xffff6940>
 2024700:	81400417 	ldw	r5,16(r16)
 2024704:	8809883a 	mov	r4,r17
 2024708:	202326c0 	call	202326c <_free_r>
 202470c:	003fe706 	br	20246ac <_gp+0xffff694c>
 2024710:	0005883a 	mov	r2,zero
 2024714:	f800283a 	ret

02024718 <fclose>:
 2024718:	008080b4 	movhi	r2,514
 202471c:	10976004 	addi	r2,r2,23936
 2024720:	200b883a 	mov	r5,r4
 2024724:	11000017 	ldw	r4,0(r2)
 2024728:	20246281 	jmpi	2024628 <_fclose_r>

0202472c <_fstat_r>:
 202472c:	defffd04 	addi	sp,sp,-12
 2024730:	2805883a 	mov	r2,r5
 2024734:	dc000015 	stw	r16,0(sp)
 2024738:	040080b4 	movhi	r16,514
 202473c:	dc400115 	stw	r17,4(sp)
 2024740:	8419f304 	addi	r16,r16,26572
 2024744:	2023883a 	mov	r17,r4
 2024748:	300b883a 	mov	r5,r6
 202474c:	1009883a 	mov	r4,r2
 2024750:	dfc00215 	stw	ra,8(sp)
 2024754:	80000015 	stw	zero,0(r16)
 2024758:	20248b00 	call	20248b0 <fstat>
 202475c:	00ffffc4 	movi	r3,-1
 2024760:	10c00526 	beq	r2,r3,2024778 <_fstat_r+0x4c>
 2024764:	dfc00217 	ldw	ra,8(sp)
 2024768:	dc400117 	ldw	r17,4(sp)
 202476c:	dc000017 	ldw	r16,0(sp)
 2024770:	dec00304 	addi	sp,sp,12
 2024774:	f800283a 	ret
 2024778:	80c00017 	ldw	r3,0(r16)
 202477c:	183ff926 	beq	r3,zero,2024764 <_gp+0xffff6a04>
 2024780:	88c00015 	stw	r3,0(r17)
 2024784:	003ff706 	br	2024764 <_gp+0xffff6a04>

02024788 <_isatty_r>:
 2024788:	defffd04 	addi	sp,sp,-12
 202478c:	dc000015 	stw	r16,0(sp)
 2024790:	040080b4 	movhi	r16,514
 2024794:	dc400115 	stw	r17,4(sp)
 2024798:	8419f304 	addi	r16,r16,26572
 202479c:	2023883a 	mov	r17,r4
 20247a0:	2809883a 	mov	r4,r5
 20247a4:	dfc00215 	stw	ra,8(sp)
 20247a8:	80000015 	stw	zero,0(r16)
 20247ac:	20249780 	call	2024978 <isatty>
 20247b0:	00ffffc4 	movi	r3,-1
 20247b4:	10c00526 	beq	r2,r3,20247cc <_isatty_r+0x44>
 20247b8:	dfc00217 	ldw	ra,8(sp)
 20247bc:	dc400117 	ldw	r17,4(sp)
 20247c0:	dc000017 	ldw	r16,0(sp)
 20247c4:	dec00304 	addi	sp,sp,12
 20247c8:	f800283a 	ret
 20247cc:	80c00017 	ldw	r3,0(r16)
 20247d0:	183ff926 	beq	r3,zero,20247b8 <_gp+0xffff6a58>
 20247d4:	88c00015 	stw	r3,0(r17)
 20247d8:	003ff706 	br	20247b8 <_gp+0xffff6a58>

020247dc <_lseek_r>:
 20247dc:	defffd04 	addi	sp,sp,-12
 20247e0:	2805883a 	mov	r2,r5
 20247e4:	dc000015 	stw	r16,0(sp)
 20247e8:	040080b4 	movhi	r16,514
 20247ec:	dc400115 	stw	r17,4(sp)
 20247f0:	300b883a 	mov	r5,r6
 20247f4:	8419f304 	addi	r16,r16,26572
 20247f8:	2023883a 	mov	r17,r4
 20247fc:	380d883a 	mov	r6,r7
 2024800:	1009883a 	mov	r4,r2
 2024804:	dfc00215 	stw	ra,8(sp)
 2024808:	80000015 	stw	zero,0(r16)
 202480c:	2024a180 	call	2024a18 <lseek>
 2024810:	00ffffc4 	movi	r3,-1
 2024814:	10c00526 	beq	r2,r3,202482c <_lseek_r+0x50>
 2024818:	dfc00217 	ldw	ra,8(sp)
 202481c:	dc400117 	ldw	r17,4(sp)
 2024820:	dc000017 	ldw	r16,0(sp)
 2024824:	dec00304 	addi	sp,sp,12
 2024828:	f800283a 	ret
 202482c:	80c00017 	ldw	r3,0(r16)
 2024830:	183ff926 	beq	r3,zero,2024818 <_gp+0xffff6ab8>
 2024834:	88c00015 	stw	r3,0(r17)
 2024838:	003ff706 	br	2024818 <_gp+0xffff6ab8>

0202483c <_read_r>:
 202483c:	defffd04 	addi	sp,sp,-12
 2024840:	2805883a 	mov	r2,r5
 2024844:	dc000015 	stw	r16,0(sp)
 2024848:	040080b4 	movhi	r16,514
 202484c:	dc400115 	stw	r17,4(sp)
 2024850:	300b883a 	mov	r5,r6
 2024854:	8419f304 	addi	r16,r16,26572
 2024858:	2023883a 	mov	r17,r4
 202485c:	380d883a 	mov	r6,r7
 2024860:	1009883a 	mov	r4,r2
 2024864:	dfc00215 	stw	ra,8(sp)
 2024868:	80000015 	stw	zero,0(r16)
 202486c:	2024ae80 	call	2024ae8 <read>
 2024870:	00ffffc4 	movi	r3,-1
 2024874:	10c00526 	beq	r2,r3,202488c <_read_r+0x50>
 2024878:	dfc00217 	ldw	ra,8(sp)
 202487c:	dc400117 	ldw	r17,4(sp)
 2024880:	dc000017 	ldw	r16,0(sp)
 2024884:	dec00304 	addi	sp,sp,12
 2024888:	f800283a 	ret
 202488c:	80c00017 	ldw	r3,0(r16)
 2024890:	183ff926 	beq	r3,zero,2024878 <_gp+0xffff6b18>
 2024894:	88c00015 	stw	r3,0(r17)
 2024898:	003ff706 	br	2024878 <_gp+0xffff6b18>

0202489c <_exit>:
 202489c:	20000226 	beq	r4,zero,20248a8 <_exit+0xc>
 20248a0:	002af070 	cmpltui	zero,zero,43969
 20248a4:	003fff06 	br	20248a4 <_gp+0xffff6b44>
 20248a8:	002af0b0 	cmpltui	zero,zero,43970
 20248ac:	003ffd06 	br	20248a4 <_gp+0xffff6b44>

020248b0 <fstat>:
 20248b0:	defffb04 	addi	sp,sp,-20
 20248b4:	dfc00415 	stw	ra,16(sp)
 20248b8:	dcc00315 	stw	r19,12(sp)
 20248bc:	dc800215 	stw	r18,8(sp)
 20248c0:	dc400115 	stw	r17,4(sp)
 20248c4:	dc000015 	stw	r16,0(sp)
 20248c8:	20002216 	blt	r4,zero,2024954 <fstat+0xa4>
 20248cc:	2827883a 	mov	r19,r5
 20248d0:	040080b4 	movhi	r16,514
 20248d4:	01400304 	movi	r5,12
 20248d8:	2023883a 	mov	r17,r4
 20248dc:	8414e304 	addi	r16,r16,21388
 20248e0:	20215b00 	call	20215b0 <__mulsi3>
 20248e4:	80a5883a 	add	r18,r16,r2
 20248e8:	90001a26 	beq	r18,zero,2024954 <fstat+0xa4>
 20248ec:	01400304 	movi	r5,12
 20248f0:	8809883a 	mov	r4,r17
 20248f4:	20215b00 	call	20215b0 <__mulsi3>
 20248f8:	8085883a 	add	r2,r16,r2
 20248fc:	10800017 	ldw	r2,0(r2)
 2024900:	10800817 	ldw	r2,32(r2)
 2024904:	10000926 	beq	r2,zero,202492c <fstat+0x7c>
 2024908:	980b883a 	mov	r5,r19
 202490c:	9009883a 	mov	r4,r18
 2024910:	dfc00417 	ldw	ra,16(sp)
 2024914:	dcc00317 	ldw	r19,12(sp)
 2024918:	dc800217 	ldw	r18,8(sp)
 202491c:	dc400117 	ldw	r17,4(sp)
 2024920:	dc000017 	ldw	r16,0(sp)
 2024924:	dec00504 	addi	sp,sp,20
 2024928:	1000683a 	jmp	r2
 202492c:	00880004 	movi	r2,8192
 2024930:	98800115 	stw	r2,4(r19)
 2024934:	0005883a 	mov	r2,zero
 2024938:	dfc00417 	ldw	ra,16(sp)
 202493c:	dcc00317 	ldw	r19,12(sp)
 2024940:	dc800217 	ldw	r18,8(sp)
 2024944:	dc400117 	ldw	r17,4(sp)
 2024948:	dc000017 	ldw	r16,0(sp)
 202494c:	dec00504 	addi	sp,sp,20
 2024950:	f800283a 	ret
 2024954:	d0a00617 	ldw	r2,-32744(gp)
 2024958:	10000526 	beq	r2,zero,2024970 <fstat+0xc0>
 202495c:	103ee83a 	callr	r2
 2024960:	00c01444 	movi	r3,81
 2024964:	10c00015 	stw	r3,0(r2)
 2024968:	00bfffc4 	movi	r2,-1
 202496c:	003ff206 	br	2024938 <_gp+0xffff6bd8>
 2024970:	d0a29b04 	addi	r2,gp,-30100
 2024974:	003ffa06 	br	2024960 <_gp+0xffff6c00>

02024978 <isatty>:
 2024978:	deffef04 	addi	sp,sp,-68
 202497c:	dfc01015 	stw	ra,64(sp)
 2024980:	dc000f15 	stw	r16,60(sp)
 2024984:	20001816 	blt	r4,zero,20249e8 <isatty+0x70>
 2024988:	01400304 	movi	r5,12
 202498c:	2021883a 	mov	r16,r4
 2024990:	20215b00 	call	20215b0 <__mulsi3>
 2024994:	00c080b4 	movhi	r3,514
 2024998:	18d4e304 	addi	r3,r3,21388
 202499c:	1885883a 	add	r2,r3,r2
 20249a0:	10001126 	beq	r2,zero,20249e8 <isatty+0x70>
 20249a4:	10800017 	ldw	r2,0(r2)
 20249a8:	10800817 	ldw	r2,32(r2)
 20249ac:	10000926 	beq	r2,zero,20249d4 <isatty+0x5c>
 20249b0:	d80b883a 	mov	r5,sp
 20249b4:	8009883a 	mov	r4,r16
 20249b8:	20248b00 	call	20248b0 <fstat>
 20249bc:	d8800117 	ldw	r2,4(sp)
 20249c0:	10880020 	cmpeqi	r2,r2,8192
 20249c4:	dfc01017 	ldw	ra,64(sp)
 20249c8:	dc000f17 	ldw	r16,60(sp)
 20249cc:	dec01104 	addi	sp,sp,68
 20249d0:	f800283a 	ret
 20249d4:	00800044 	movi	r2,1
 20249d8:	dfc01017 	ldw	ra,64(sp)
 20249dc:	dc000f17 	ldw	r16,60(sp)
 20249e0:	dec01104 	addi	sp,sp,68
 20249e4:	f800283a 	ret
 20249e8:	d0a00617 	ldw	r2,-32744(gp)
 20249ec:	10000826 	beq	r2,zero,2024a10 <isatty+0x98>
 20249f0:	103ee83a 	callr	r2
 20249f4:	00c01444 	movi	r3,81
 20249f8:	10c00015 	stw	r3,0(r2)
 20249fc:	0005883a 	mov	r2,zero
 2024a00:	dfc01017 	ldw	ra,64(sp)
 2024a04:	dc000f17 	ldw	r16,60(sp)
 2024a08:	dec01104 	addi	sp,sp,68
 2024a0c:	f800283a 	ret
 2024a10:	d0a29b04 	addi	r2,gp,-30100
 2024a14:	003ff706 	br	20249f4 <_gp+0xffff6c94>

02024a18 <lseek>:
 2024a18:	defffa04 	addi	sp,sp,-24
 2024a1c:	dfc00515 	stw	ra,20(sp)
 2024a20:	dd000415 	stw	r20,16(sp)
 2024a24:	dcc00315 	stw	r19,12(sp)
 2024a28:	dc800215 	stw	r18,8(sp)
 2024a2c:	dc400115 	stw	r17,4(sp)
 2024a30:	dc000015 	stw	r16,0(sp)
 2024a34:	20001d16 	blt	r4,zero,2024aac <lseek+0x94>
 2024a38:	2827883a 	mov	r19,r5
 2024a3c:	040080b4 	movhi	r16,514
 2024a40:	01400304 	movi	r5,12
 2024a44:	2023883a 	mov	r17,r4
 2024a48:	3029883a 	mov	r20,r6
 2024a4c:	8414e304 	addi	r16,r16,21388
 2024a50:	20215b00 	call	20215b0 <__mulsi3>
 2024a54:	80a5883a 	add	r18,r16,r2
 2024a58:	90001426 	beq	r18,zero,2024aac <lseek+0x94>
 2024a5c:	01400304 	movi	r5,12
 2024a60:	8809883a 	mov	r4,r17
 2024a64:	20215b00 	call	20215b0 <__mulsi3>
 2024a68:	8085883a 	add	r2,r16,r2
 2024a6c:	10800017 	ldw	r2,0(r2)
 2024a70:	10800717 	ldw	r2,28(r2)
 2024a74:	10001426 	beq	r2,zero,2024ac8 <lseek+0xb0>
 2024a78:	a00d883a 	mov	r6,r20
 2024a7c:	980b883a 	mov	r5,r19
 2024a80:	9009883a 	mov	r4,r18
 2024a84:	103ee83a 	callr	r2
 2024a88:	10001316 	blt	r2,zero,2024ad8 <lseek+0xc0>
 2024a8c:	dfc00517 	ldw	ra,20(sp)
 2024a90:	dd000417 	ldw	r20,16(sp)
 2024a94:	dcc00317 	ldw	r19,12(sp)
 2024a98:	dc800217 	ldw	r18,8(sp)
 2024a9c:	dc400117 	ldw	r17,4(sp)
 2024aa0:	dc000017 	ldw	r16,0(sp)
 2024aa4:	dec00604 	addi	sp,sp,24
 2024aa8:	f800283a 	ret
 2024aac:	04001444 	movi	r16,81
 2024ab0:	d0a00617 	ldw	r2,-32744(gp)
 2024ab4:	10000626 	beq	r2,zero,2024ad0 <lseek+0xb8>
 2024ab8:	103ee83a 	callr	r2
 2024abc:	14000015 	stw	r16,0(r2)
 2024ac0:	00bfffc4 	movi	r2,-1
 2024ac4:	003ff106 	br	2024a8c <_gp+0xffff6d2c>
 2024ac8:	04002184 	movi	r16,134
 2024acc:	003ff806 	br	2024ab0 <_gp+0xffff6d50>
 2024ad0:	d0a29b04 	addi	r2,gp,-30100
 2024ad4:	003ff906 	br	2024abc <_gp+0xffff6d5c>
 2024ad8:	00a1c83a 	sub	r16,zero,r2
 2024adc:	003ff406 	br	2024ab0 <_gp+0xffff6d50>

02024ae0 <__malloc_lock>:
 2024ae0:	f800283a 	ret

02024ae4 <__malloc_unlock>:
 2024ae4:	f800283a 	ret

02024ae8 <read>:
 2024ae8:	defffa04 	addi	sp,sp,-24
 2024aec:	dfc00515 	stw	ra,20(sp)
 2024af0:	dd000415 	stw	r20,16(sp)
 2024af4:	dcc00315 	stw	r19,12(sp)
 2024af8:	dc800215 	stw	r18,8(sp)
 2024afc:	dc400115 	stw	r17,4(sp)
 2024b00:	dc000015 	stw	r16,0(sp)
 2024b04:	20003016 	blt	r4,zero,2024bc8 <read+0xe0>
 2024b08:	2827883a 	mov	r19,r5
 2024b0c:	040080b4 	movhi	r16,514
 2024b10:	01400304 	movi	r5,12
 2024b14:	2025883a 	mov	r18,r4
 2024b18:	3029883a 	mov	r20,r6
 2024b1c:	8414e304 	addi	r16,r16,21388
 2024b20:	20215b00 	call	20215b0 <__mulsi3>
 2024b24:	80a3883a 	add	r17,r16,r2
 2024b28:	88002726 	beq	r17,zero,2024bc8 <read+0xe0>
 2024b2c:	88800217 	ldw	r2,8(r17)
 2024b30:	00c00044 	movi	r3,1
 2024b34:	108000cc 	andi	r2,r2,3
 2024b38:	10c01526 	beq	r2,r3,2024b90 <read+0xa8>
 2024b3c:	01400304 	movi	r5,12
 2024b40:	9009883a 	mov	r4,r18
 2024b44:	20215b00 	call	20215b0 <__mulsi3>
 2024b48:	8085883a 	add	r2,r16,r2
 2024b4c:	10800017 	ldw	r2,0(r2)
 2024b50:	10800517 	ldw	r2,20(r2)
 2024b54:	10000e26 	beq	r2,zero,2024b90 <read+0xa8>
 2024b58:	a00d883a 	mov	r6,r20
 2024b5c:	980b883a 	mov	r5,r19
 2024b60:	8809883a 	mov	r4,r17
 2024b64:	103ee83a 	callr	r2
 2024b68:	1021883a 	mov	r16,r2
 2024b6c:	10000f16 	blt	r2,zero,2024bac <read+0xc4>
 2024b70:	dfc00517 	ldw	ra,20(sp)
 2024b74:	dd000417 	ldw	r20,16(sp)
 2024b78:	dcc00317 	ldw	r19,12(sp)
 2024b7c:	dc800217 	ldw	r18,8(sp)
 2024b80:	dc400117 	ldw	r17,4(sp)
 2024b84:	dc000017 	ldw	r16,0(sp)
 2024b88:	dec00604 	addi	sp,sp,24
 2024b8c:	f800283a 	ret
 2024b90:	d0a00617 	ldw	r2,-32744(gp)
 2024b94:	10001326 	beq	r2,zero,2024be4 <read+0xfc>
 2024b98:	103ee83a 	callr	r2
 2024b9c:	00c00344 	movi	r3,13
 2024ba0:	10c00015 	stw	r3,0(r2)
 2024ba4:	00bfffc4 	movi	r2,-1
 2024ba8:	003ff106 	br	2024b70 <_gp+0xffff6e10>
 2024bac:	d0a00617 	ldw	r2,-32744(gp)
 2024bb0:	10000e26 	beq	r2,zero,2024bec <read+0x104>
 2024bb4:	103ee83a 	callr	r2
 2024bb8:	0421c83a 	sub	r16,zero,r16
 2024bbc:	14000015 	stw	r16,0(r2)
 2024bc0:	00bfffc4 	movi	r2,-1
 2024bc4:	003fea06 	br	2024b70 <_gp+0xffff6e10>
 2024bc8:	d0a00617 	ldw	r2,-32744(gp)
 2024bcc:	10000926 	beq	r2,zero,2024bf4 <read+0x10c>
 2024bd0:	103ee83a 	callr	r2
 2024bd4:	00c01444 	movi	r3,81
 2024bd8:	10c00015 	stw	r3,0(r2)
 2024bdc:	00bfffc4 	movi	r2,-1
 2024be0:	003fe306 	br	2024b70 <_gp+0xffff6e10>
 2024be4:	d0a29b04 	addi	r2,gp,-30100
 2024be8:	003fec06 	br	2024b9c <_gp+0xffff6e3c>
 2024bec:	d0a29b04 	addi	r2,gp,-30100
 2024bf0:	003ff106 	br	2024bb8 <_gp+0xffff6e58>
 2024bf4:	d0a29b04 	addi	r2,gp,-30100
 2024bf8:	003ff606 	br	2024bd4 <_gp+0xffff6e74>

02024bfc <sbrk>:
 2024bfc:	000b303a 	rdctl	r5,status
 2024c00:	00bfff84 	movi	r2,-2
 2024c04:	2884703a 	and	r2,r5,r2
 2024c08:	1001703a 	wrctl	status,r2
 2024c0c:	d0a00b17 	ldw	r2,-32724(gp)
 2024c10:	00ffff04 	movi	r3,-4
 2024c14:	108000c4 	addi	r2,r2,3
 2024c18:	10c4703a 	and	r2,r2,r3
 2024c1c:	00c080f4 	movhi	r3,515
 2024c20:	d0a00b15 	stw	r2,-32724(gp)
 2024c24:	1109883a 	add	r4,r2,r4
 2024c28:	18e80004 	addi	r3,r3,-24576
 2024c2c:	19000336 	bltu	r3,r4,2024c3c <sbrk+0x40>
 2024c30:	d1200b15 	stw	r4,-32724(gp)
 2024c34:	2801703a 	wrctl	status,r5
 2024c38:	f800283a 	ret
 2024c3c:	2801703a 	wrctl	status,r5
 2024c40:	00bfffc4 	movi	r2,-1
 2024c44:	f800283a 	ret
